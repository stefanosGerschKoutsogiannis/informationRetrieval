2011,On the Completeness of First-Order Knowledge Compilation for Lifted Probabilistic Inference,Probabilistic logics are receiving a lot of attention today because of their expressive power for knowledge representation and learning. However  this expressivity is detrimental to the tractability of inference  when done at the propositional level.  To solve this problem  various lifted inference algorithms have been proposed that reason at the first-order level  about groups of objects as a whole. Despite the existence of various lifted inference approaches  there are currently no completeness results about these algorithms.  The key contribution of this paper is that we introduce a formal definition of lifted inference that allows us to reason about the completeness of lifted inference algorithms relative to a particular class of probabilistic models.  We then show how to obtain a completeness result using a first-order knowledge compilation approach for theories of formulae containing up to two logical variables.,On the Completeness of First-Order Knowledge
Compilation for Lifted Probabilistic Inference

Department of Computer Science  Katholieke Universiteit Leuven

Guy Van den Broeck

Celestijnenlaan 200A  B-3001 Heverlee  Belgium

guy.vandenbroeck@cs.kuleuven.be

Abstract

Probabilistic logics are receiving a lot of attention today because of their expres-
sive power for knowledge representation and learning. However  this expressivity
is detrimental to the tractability of inference  when done at the propositional level.
To solve this problem  various lifted inference algorithms have been proposed
that reason at the ﬁrst-order level  about groups of objects as a whole. Despite
the existence of various lifted inference approaches  there are currently no com-
pleteness results about these algorithms. The key contribution of this paper is
that we introduce a formal deﬁnition of lifted inference that allows us to reason
about the completeness of lifted inference algorithms relative to a particular class
of probabilistic models. We then show how to obtain a completeness result using
a ﬁrst-order knowledge compilation approach for theories of formulae containing
up to two logical variables.

1

Introduction and related work

Probabilistic logic models build on ﬁrst-order logic to capture relational structure and on graphical
models to represent and reason about uncertainty [1  2]. Due to their expressivity  these models can
concisely represent large problems with many interacting random variables. While the semantics of
these logics is often deﬁned through grounding the models [3]  performing inference at the proposi-
tional level is – as for ﬁrst-order logic – inefﬁcient. This has motivated the quest for lifted inference
methods that exploit the structure of probabilistic logic models for efﬁcient inference  by reasoning
about groups of objects as a whole and avoiding repeated computations. The ﬁrst approaches to ex-
act lifted inference have upgraded the variable elimination algorithm to the ﬁrst-order level [4  5  6].
More recent work is based on methods from logical inference [7  8  9  10]  such as knowledge com-
pilation. While these approaches often yield dramatic improvements in runtime over propositional
inference methods on speciﬁc problems  it is still largely unclear for which classes of models these
lifted inference operators will be useful and for which ones they will eventually have to resort to
propositional inference. One notable exception in this regard is lifted belief propagation [11]  which
performs exact lifted inference on any model whose factor graph representation is a tree.
A ﬁrst contribution of this paper is that we introduce a notion of domain lifted inference  which
formally deﬁnes what lifting means  and which can be used to characterize the classes of proba-
bilistic models to which lifted inference applies. Domain lifted inference essentially requires that
probabilistic inference runs in polynomial time in the domain size of the logical variables appearing
in the model. As a second contribution we show that the class of models expressed as 2-WFOMC
formulae (weighted ﬁrst-order model counting with up to 2 logical variables per formula) can be
domain lifted using an extended ﬁrst-order knowledge compilation approach [10]. The resulting
approach allows for lifted inference even in the presence of (anti-) symmetric or total relations in a
theory. These are extremely common and useful concepts that cannot be lifted by any of the existing
ﬁrst-order knowledge compilation inference rules.

1

2 Background

We will use standard concepts of function-free ﬁrst-order logic (FOL). An atom p(t1  . . .   tn) con-
sists of a predicate p/n of arity n followed by n arguments  which are either constants or logical
variables. An atom is ground if it does not contain any variables. A literal is an atom a or its nega-
tion ¬a. A clause is a disjunction l1 ∨ ... ∨ lk of literals. If k = 1  it is a unit clause. An expression
is an atom  literal or clause. The pred(a) function maps an atom to its predicate and the vars(e)
function maps an expression to its logical variables. A theory in conjunctive normal form (CNF) is
a conjunction of clauses. We often represent theories by their set of clauses and clauses by their set
of literals. Furthermore  we will assume that all logical variables are universally quantiﬁed.
In addition  we associate a set of constraints with each clause or atom  either of the form X (cid:54)= t 
where X is a logical variable and t is a constant or variable  or of the form X ∈ D  where D is a
domain  or the negation of these constraints. These deﬁne a ﬁnite domain for each logical variable.
Abusing notation  we will use constraints of the form X = t to denote a substitution of X by t. The
function atom(e) maps an expression e to its atoms  now associating the constraints on e with each
atom individually. To add the constraint c to an expression e  we use the notation e ∧ c. Two atoms
unify if there is a substitution which makes them identical and if the conjunction of the constraints on
both atoms with the substitution is satisﬁable. Two expressions e1 and e2 are independent  written
e1 ⊥⊥ e2  if no atom a1 ∈ atom(e1) uniﬁes with an atom a2 ∈ atom(e2).
We adopt the Weighted First-Order Model Counting (WFOMC) [10] formalism to represent proba-
bilistic logic models  building on the notion of a Herbrand interpretation. Herbrand interpretations
are subsets of the Herbrand base HB (T )  which consists of all ground atoms that can be constructed
with the available predicates and constant symbols in T . The atoms in a Herbrand interpretation are
assumed to be true. All other atoms in HB (T ) are assumed to be false. An interpretation I satisﬁes
a theory T   written as I |= T   if it satisﬁes all the clauses c ∈ T . The WFOMC problem is deﬁned
on a weighted logic theory T   which is a logic theory augmented with a positive weight function w
and a negative weight function w  which assign a weight to each predicate. The WFOMC problem
involves computing

wmc(T  w  w) =

w(pred(a))

w(pred(a)).

(1)

(cid:88)

(cid:89)

I|=T

a∈I

(cid:89)

a∈HB(T )\I

3 First-order knowledge compilation for lifted probabilistic inference

3.1 Lifted probabilistic inference

A ﬁrst-order probabilistic model deﬁnes a probability distribution P over the set of Herbrand in-
terpretations H. Probabilistic inference in these models is concerned with computing the posterior
probability P(q|e) of query q given evidence e  where q and e are logical expressions in general:

(cid:80)
(cid:80)

P(q|e) =

h∈H h|=q∧e P(h)
h∈H h|=e P(h)

(2)

We propose one notion of lifted inference for ﬁrst-order probabilistic models  deﬁned in terms of the
computational complexity of inference w.r.t. the domains of logical variables. It is clear that other
notions of lifted inference are conceivable  especially in the case of approximate inference.
Deﬁnition 1 (Domain Lifted Probabilistic Inference). A probabilistic inference procedure is domain
lifted for a model m  query q and evidence e iff the inference procedure runs in polynomial time in
|D1|  . . .   |Dk| with Di the domain of the logical variable vi ∈ vars(m  q  e).
Domain lifted inference does not prohibit the algorithm to be exponential in the size of the vocab-
ulary  that is  the number of predicates  arguments and constants  of the probabilistic model  query
and evidence. In fact  the deﬁnition allows inference to be exponential in the number of constants
which occur in arguments of atoms in the theory  query or evidence  as long as it is polynomial in
the cardinality of the logical variable domains. This deﬁnition of lifted inference stresses the ability
to efﬁciently deal with the domains of the logical variables that arise  regardless of their size  and
formalizes what seems to be generally accepted in the lifted inference literature.

2

A class of probabilistic models is a set of probabilistic models expressed in a particular formalism.
As examples  consider Markov logic networks (MLN) [12] or parfactors [4]  or the weighted FOL
theories for WFOMC that we introduced above  when the weights are normalized.
Deﬁnition 2 (Completeness). Restricting queries to atoms and evidence to a conjunction of literals 
a procedure that is domain lifted for all probabilistic models m in a class of models M and for all
queries q and evidence e  is called complete for M.

3.2 First-order knowledge compilation

First-order knowledge compilation is an approach to lifted probabilistic inference consisting of the
following three steps (see Van den Broeck et al. [10] for details):

1. Convert the probabilistic logical model to a weighted CNF. Converting MLNs or parfactors re-
quires adding new atoms to the theory that represent the (truth) value of each factor or formula.

2 friends(X  Y ) ∧ smokes(X)

⇒ smokes(Y )

(a) MLN Model

set-disjunction

unit clause leaf

(cid:95)

Smokers
⊆ People

∧

decomposable
conjunction

∨¬ friends(X  Y ) ∨ ¬ f(X  Y )

smokes(Y ) ∨ ¬ smokes(X)
friends(X  Y ) ∨ f(X  Y )
smokes(X) ∨ f(X  Y )
¬ smokes(Y ) ∨ f(X  Y ).
(b) CNF Theory

Predicate w w
1
friends
smokes
1
1
(c) Weight Functions

1
1
e2

f

smokes(X)  X ∈ Smokers

∧

∧

f(X  Y )  Y ∈ Smokers

¬ smokes(Y )  Y /∈ Smokers

∧

f(X  Y )  X /∈ Smokers  Y /∈ Smokers

deterministic
disjunction

∧

∨

(cid:94)
(cid:94)

x ∈ Smokers

y /∈ Smokers

set-conjunction
∧

f(x  y)

¬ friends(x  y)
(d) First-Order d-DNNF Circuit

friends(x  y)

¬ f(x  y)

Figure 1: Friends-smokers example (taken from [10])

Example 1. The MLN in Figure 1a assigns a weight to a formula in FOL. Figure 1b represents
the same model as a weighted CNF  introducing a new atom f(X  Y ) to encode the truth value of
the MLN formula. The probabilistic information is captured by the weight functions in Figure 1c.
2. Compile the logical theory into a First-Order d-DNNF (FO d-DNNF) circuit. Figure 1d shows
an example of such a circuit. Leaves represent unit clauses. Inner nodes represent the disjunc-
tion or conjunction of their children l and r  but with the constraint that disjunctions must be
deterministic (l ∧ r is unsatisﬁable) and conjunctions must be decomposable (l ⊥⊥ r).

3. Perform WFOMC inference to compute posterior probabilities.

In a FO d-DNNF circuit 

WFOMC is polynomial in the size of the circuit and the cardinality of the domains.

To compile the CNF theory into a FO d-DNNF circuit  Van den Broeck et al. [10] propose a set of
compilation rules  which we will refer to as CR1. We will now brieﬂy describe these rules.
Unit Propagation introduces a decomposable conjunction when the theory contains a unit clause. In-
dependence creates a decomposable conjunction when the theory contains independent subtheories.
Shannon decomposition applies when the theory contains ground atoms and introduces a determin-
istic disjunction between two modiﬁed theories: one where the ground atom is true  and one where
it is false. Shattering splits clauses in the theory until all pairs of atoms represent either a disjoint or
identical set of ground atoms.
Example 2. In Figure 2a  the ﬁrst two clauses are made independent from the friends(X  X) clause
and split off in a decomposable conjunction by unit propagation. The unit clause becomes a leaf of
the FO d-DNNF circuit  while the other operand requires further compilation.

3

friends(X  Y ) ∨ dislikes(X  Y )
¬ friends(X  Y ) ∨ likes(X  Y )

friends(X  X)

dislikes(X  Y ) ∨ friends(X  Y )

fun(X) ∨ ¬ friends(X  Y )

∧

(cid:94)

x ∈ People

friends(X  X)
friends(X  Y ) ∨ dislikes(X  Y )  X (cid:54)= Y
¬ friends(X  Y ) ∨ likes(X  Y )  X (cid:54)= Y

likes(X  X)

dislikes(x  Y ) ∨ friends(x  Y )

fun(x) ∨ ¬ friends(x  Y )

fun(X) ∨ ¬ friends(X  Y )
fun(X) ∨ ¬ friends(Y  X)

(cid:95)

FunPeople
⊆ People

fun(X)  X ∈ FunPeople
¬ fun(X)  X /∈ FunPeople
fun(X) ∨ ¬ friends(X  Y )
fun(X) ∨ ¬ friends(Y  X)

(a) Unit propagation of friends(X  X)

(b) Independent partial grounding

(c) Atom counting of fun(X)

Figure 2: Examples of compilation rules. Circles are FO d-DNNF inner nodes. White rectangles
show theories before and after applying the rule. All variable domains are People. (taken from [10])

Independent Partial Grounding creates a decomposable conjunction over a set of child circuits 
which are identical up to the value of a grounding constant. Since they are structurally identical 
only one child circuit is actually compiled. Atom Counting applies when the theory contains an atom
with a single logical variable X ∈ D. It explicitly represents the domain D(cid:62) ⊆ D of X for which
the atom is true. It compiles the theory into a deterministic disjunction between all possible such
domains. Again  these child circuits are identical up to the value of D(cid:62) and only one is compiled.
Example 3. The theory in Figure 2b is compiled into a decomposable set-conjunction of theories
that are independent and identical up to the value of the x constant. The theory in Figure 2c contains
an atom with one logical variable: fun(X). Atom counting compiles it into a deterministic set-
disjunction over theories that differ in FunPeople  which is the domain of X for which fun(X) is
true. Subsequent steps of unit propagation remove the fun(X) atoms from the theory entirely.

3.3 Completeness

We will now characterize those theories where the CR1 compilation rules cannot be used  and where
the inference procedure has to resort to grounding out the theory to propositional logic. For these 
ﬁrst-order knowledge compilation using CR1 is not yet domain lifted.
When a logical theory contains symmetric  anti-symmetric or total relations  such as

friends(X  Y ) ⇒ friends(Y  X) 

parent(X  Y ) ⇒ ¬ parent(Y  X)  X (cid:54)= Y 

≤ (X  Y)∨≤ (Y  X) 

(3)
(4)
(5)

(6)

or more general formulas  such as

enemies(X  Y ) ⇒ ¬ friend(X  Y ) ∧ ¬ friend(Y  X) 

none of the CR1 rules apply. Intuitively  the underlying problem is the presence of either:
• Two unifying (not independent) atoms in the same clause which contain the same logical variable
in different positions of the argument list. Examples include (the CNF of) Formulas 3  4 and 5 
where the X and Y variable are bound by unifying two atoms from the same clause.
• Two logical variables that bind when unifying one pair of atoms but appear in different positions
of the argument list of two other unifying atoms. Examples include Formula 6  which in CNF is

¬ friend(X  Y ) ∨ ¬ enemies(X  Y )
¬ friend(Y  X) ∨ ¬ enemies(X  Y )

Here  unifying the enemies(X  Y ) atoms binds the X variables from both clauses  which appear
in different positions of the argument lists of the unifying atoms friend(X  Y ) and friend(Y  X).

Both of these properties preclude the use of CR1 rules. Also in the context of other model classes 
such as MLNs  probabilistic versions of the above formulas cannot be processed by CR1 rules.

4

Even though ﬁrst-order knowledge compilation with CR1 rules does not have a clear completeness
result  we can show some properties of theories to which none of the compilation rules apply. First 
we need to distinguish between the arity of an atom and its dimension. A predicate with arity two
might have atoms with dimension one  when one of the arguments is ground or both are identical.
Deﬁnition 3 (Dimension of an Expression). The dimension of an expression e is the number of
logical variables it contains: dim(e) = | vars(e)|.
Lemma 1 (CR1 Postconditions). The CR1 rules remove all atoms from the theory T which have
zero or one logical variable arguments  such that afterwards ∀a ∈ atom(T ) : dim(a) > 1. When
no CR1 rule applies  the theory is shattered and contains no independent subtheories.
Proof. Ground atoms are removed by the Shannon decomposition operator followed by unit prop-
agation. Atoms with a single logical variable (including unary relations) are removed by the atom
counting operator followed by unit propagation. If T contains independent subtheories  the inde-
pendence operator can be applied. Shattering is always applied when T is not yet shattered.

4 Extending ﬁrst-order knowledge compilation

In this section we introduce a new operator which does apply to the theories from Section 3.3.

4.1 Logical variable properties

To formally deﬁne the operator we propose  and prove its correctness  we ﬁrst introduce some math-
ematical concepts related to the logical variables in a theory (partly after Jha et al. [8]).
Deﬁnition 4 (Binding Variables). Two logical variables X  Y are directly binding b(X  Y ) if they
are bound by unifying a pair of atoms in the theory. The binding relationship b+(X  Y ) is the
transitive closure of the directly binding relation b(X  Y ).
Example 4. In the theory

¬ p(W  X) ∨ ¬ q(X)

r(Y ) ∨ ¬ q(Y )
¬ r(Z) ∨ s(Z)

the variable pairs (X  Y ) and (Y  Z) are directly binding. The variables X  Y and Z are binding.
Variable W does not bind to any other variable. Note that the binding relationship b+(X  Y ) is an
equivalence relation that deﬁnes two equivalence classes: {X  Y  Z} and {W}.
Lemma 2 (Binding Domains). After shattering  binding logical variables have identical domains.

Proof. During shattering (see Section 3.2)  when two atoms unify  binding two variables with par-
tially overlapping domains  the atoms’ clauses are split up into clauses where the domain of the
variables is identical  and clauses where the domains are disjoint and the atoms no longer unify.
Deﬁnition 5 (Root Binding Class). A root variable is a variable that appears in all the atoms in its
clause. A root binding class is an equivalence class of binding variables where all variables are root.
Example 5. In the theory of Example 4  {X  Y  Z} is a root binding class and {W} is not.

4.2 Domain recursion

We will now introduce the new domain recursion operator  starting with its preconditions.
Deﬁnition 6. A theory allows for domain recursion when (i) the theory is shattered  (ii) the theory
contains no independent subtheories and (iii) there exists a root binding class.

From now on  we will denote with C the set of clauses of the theory at hand and with B a root
binding class guaranteed to exist if C allows for domain recursion. Lemma 2 states that all variables
in B have identical domains. We will denote the domain of these variables with D.
The intuition behind the domain recursion operator is that it modiﬁes D by making one element
explicit: D = D(cid:48) ∪{xD} with xD /∈ D(cid:48). This explicit domain element is introduced by the SPLITD
function  which splits clauses w.r.t. the new subdomain D(cid:48) and element xD.

5

(cid:26)c 

Deﬁnition 7 (SPLITD). For a clause c and given set of variables Vc ⊆ vars(c) with domain D  let

SPLITD(c Vc) =

SPLITD(c1 Vc \ {V }) ∪ SPLITD(c2 Vc \ {V }) 

clauses C and set of variables V with domain D: SPLITD(C V) =(cid:83)

(7)
where c1 = c ∧ (V = xD) and c2 = c ∧ (V (cid:54)= xD) ∧ (V ∈ D(cid:48)) for some V ∈ Vc. For a set of
c∈C SPLITD(c V ∩ vars(c)).
The domain recursion operator creates three sets of clauses: SPLITD(C  B) = Cx ∪ Cv ∪ Cr  with
(8)

(V = xD)|c ∈ C} 

if Vc = ∅
if Vc (cid:54)= ∅

(V (cid:54)= xD) ∧ (V ∈ D(cid:48))|c ∈ C} 

(9)

V ∈B∩vars(c)

Cx = {c ∧ (cid:94)
Cv = {c ∧ (cid:94)
c∈SPLITD(C B) c and therefore(cid:86)

V ∈B∩vars(c)

(10)
Proposition 3. The conjunction of the domain recursion sets is equivalent to the original theory:

Cr = SPLITD(C  B) \ Cx \ Cv.

c∈C c ≡(cid:0)(cid:86)

c(cid:1) ∧(cid:0)(cid:86)

c∈Cx

c∈Cv

c(cid:1) ∧(cid:0)(cid:86)

c∈Cr

c(cid:1).

(cid:86)

c∈C c ≡(cid:86)

We will now show that these sets are independent and that their conjunction is decomposable.
Theorem 4. The theories Cx  Cv and Cr are independent: Cx ⊥⊥ Cv  Cx ⊥⊥ Cr and Cv ⊥⊥ Cr.
The proof of Theorem 4 relies on the following Lemma.
Lemma 5. If the theory allows for domain recursion  all clauses and atoms contain the same number
of variables from B:

∃n  ∀c ∈ C  ∀a ∈ atom(C) : | vars(c) ∩ B | = | vars(a) ∩ B | = n.

Proof. Denote with Cn the clauses in C that contain n logical variables from B and with C c
n its
compliment in C. If C is nonempty  there is a n > 0 for which Cn is nonempty. Then every atom
in Cn contains exactly n variables from B (Deﬁnition 5). Since the theory contains no independent
n is empty.
subtheories  there must be an atom a in Cn which uniﬁes with an atom ac in C c
After shattering  all uniﬁcations bind one variable from a to a single variable from ac. Because a
contains exactly n variables from B  ac must also contain exactly n (Deﬁnition 4)  and because B is
a root binding class  the clause of ac also contains exactly n  which contradicts the deﬁnition of C c
n.
Therefore  C c

n is empty  and because the variables in B are root  they also appear in all atoms.

n  or C c

Proof of Theorem 4. From Lemma 5  all atoms in C contain the same number of variables from B.
In Cx  these variables are all constrained to be equal to xD  while in Cv and Cr at least one variable
is constrained to be different from xD. An attempt to unify an atom from Cx with an atom from Cv
or Cr therefore creates an unsatisﬁable set of constraints. Similarly  atoms from Cv and Cr cannot
be uniﬁed.

Finally  we extend the FO d-DNNF language proposed in Van den Broeck et al. [10] with a new
node  the recursive decomposable conjunction ∧(cid:13)r  and deﬁne the domain recursion compilation
rule.
Deﬁnition 8 (∧(cid:13)r). The FO d-DNNF node ∧(cid:13)r(nx  nr  D  D(cid:48) V) represents a decomposable con-
junction between the d-DNNF nodes nx  nr and a d-DNNF node isomorphic to the ∧(cid:13)r node itself.
In particular  the isomorphic operand is identical to the node itself  except for the size of the domain
of the variables in V  which becomes one smaller  going from D to D(cid:48) in the isomorphic operand.

We have shown that the conjunction between sets Cx  Cv and Cr is decomposable (Theorem 4) and
logically equivalent to the original theory (Proposition 3). Furthermore  Cv is identical to C  up
to the constraints on the domain of the variables in B. This leads us to the following deﬁnition of
domain recursion.
Deﬁnition 9 (Domain Recursion). The domain recursion compilation rule compiles C into
∧(cid:13)r(nx  nr  D  D(cid:48)  B)  where nx  nr are the compiled circuits for Cx  Cr. The third set Cv is repre-
sented by the recursion on D  according to Deﬁnition 8.

6

Cr

¬ friends(x  X) ∨ friends(X  x)  X (cid:54)= x
¬ friends(X  x) ∨ friends(x  X)  X (cid:54)= x

nr

(cid:94)

x(cid:48)∈P erson

x(cid:48)(cid:54)=x

∨

nv

∧r

P erson ← P erson \ {x}

Cx
¬ friends(x  x) ∨ friends(x  x)

nx
∨

¬ friends(x  x)

friends(x  x)

∧

∧

¬ friends(x  x(cid:48))

¬ friends(x(cid:48)  x)

friends(x  x(cid:48))

friends(x(cid:48)  x)

Figure 3: Circuit for the symmetric relation in Equation 3  rooted in a recursive conjunction.

Example 6. Figure 3 shows the FO d-DNNF circuit for Equation 3. The theory is split up into
three independent theories: Cr and Cx  shown in the Figure 3  and Cv = {¬ friends(X  Y ) ∨
friends(Y  X)  X (cid:54)= x  Y (cid:54)= x}. The conjunction of these theories is equivalent to Equation 3.
Theory Cv is identical to Equation 3  up to the inequality constraints on X and Y .
Theorem 6. Given a function size  which maps domains to their size  the weighted ﬁrst-order model
count of a ∧(cid:13)r(nx  nr  D  D(cid:48) V) node is

wmc(∧(cid:13)r(nx  nr  D  D(cid:48) V)  size) = wmc(nx  size)size(D)

wmc(nr  size∪{D(cid:48) (cid:55)→ s}) 

size(D)(cid:89)

s=0

(11)

(12)

where size∪{D(cid:48) (cid:55)→ s} adds to the size function that the subdomain D(cid:48) has cardinality s.
Proof. If C allows for domain recursion  due to Theorem 4  the weighted model count is
if size(D) = 0
if size(D) > 0

wmc(Cx) · wmc(Cv  size(cid:48)) · wmc(Cr  size(cid:48))

wmc(C  size) =

(cid:26)1 

where size(cid:48) = size∪{D(cid:48) (cid:55)→ size(D) − 1}.
Theorem 7. The Independent Partial Grounding compilation rule is a special case of the domain
recursion rule  where ∀c ∈ C : | vars(c) ∩ B | = 1 (and therefore Cr = ∅).

4.3 Completeness

In this section  we introduce a class of models for which ﬁrst-order knowledge compilation with
domain recursion is complete.
Deﬁnition 10 (k-WFOMC). The class of k-WFOMC consist of WFOMC theories with clauses that
have up to k logical variables.

A ﬁrst completeness result is for 2-WFOMC  using the set of knowledge compilation rules CR2 
which are the rules in CR1 extended with domain recursion.
Theorem 8 (Completeness for 2-WFOMC). First-order knowledge compilation using the CR2 com-
pilation rules is a complete domain lifted probabilistic inference algorithm for 2-WFOMC.

Proof. From Lemma 1  after applying the CR1 rules  the theory contains only atoms with dimension
larger than or equal to two. From Deﬁnition 10  each clause has dimension smaller than or equal to
two. Therefore  each logical variable in the theory is a root variable and according to Deﬁnition 5 
every equivalence class of binding variables is a root binding class. Because of Lemma 1  the theory
allows for domain recursion  which requires further compilation of two theories: Cx and Cr into nx
and nr. Both have dimension smaller than 2 and can be lifted by CR1 compilation rules.

The properties of 2-WFOMC are a sufﬁcient but not necessary condition for ﬁrst-order knowledge
compilation to be domain lifted. We can obtain a similar result for MLNs or parfactors by reducing
them to a WFOMC problem. If an MLN contains only formulae with up to k logical variables  then
its WFOMC representation will be in k-WFOMC.

7

This result for 2-WFOMC is not trivial. Van den Broeck et al. [10] showed in their experiments that
counting ﬁrst-order variable elimination (C-FOVE) [6] fails to lift the “Friends Smoker Drinker”
problem  which is in 2-WFOMC. We will show in the next section that the CR1 rules fail to lift
the theory in Figure 4a  which is in 2-WFOMC. Note that there are also useful theories that are not
in 2-WFOMC  such as those containing the transitive relation friends(X  Y ) ∧ friends(Y  Z) ⇒
friends(X  Z).

5 Empirical evaluation

To complement the theoretical results of the previous section  we extended the WFOMC implemen-
tation1 with the domain recursion rule. We performed experiments with the theory in Figure 4a 
which is a version of the friends and smokers model [11] extended with the symmetric relation of
Equation 3. We evaluate the performance querying P(smokes(bob)) with increasing domain size 
comparing our approach to the existing WFOMC implementation and its propositional counterpart 
which ﬁrst grounds the theory and then compiles it with the c2d compiler [13] to a propositional
d-DNNF circuit. We did not compare to C-FOVE [6] because it cannot perform lifted inference on
this model.
Propositional inference quickly becomes intractable when there are more than 20 people. The lifted
inference algorithms scale much better. The CR1 rules can exploit some regularities in the model.
For example  they eliminate all the smokes(X) atoms from the theory. They do  however  resort
to grounding at a later stage of the compilation process. With the domain recursion rule  there is
no need for grounding. This advantage is clear in the experiments  our approach having an almost
constant inference time in this range of domains sizes. Note that the runtimes for c2d include
compilation and evaluation of the circuit  whereas the WFOMC runtimes only represent evaluation
of the FO d-DNNF. After all  propositional compilation depends on the domain size but ﬁrst-order
compilation does not. First-order compilation takes a constant two seconds for both rule sets.

2 smokes(X) ∧ friends(X  Y )
friends(X  Y ) ⇒ friends(Y  X).

⇒ smokes(Y )

(a) MLN Model

(b) Evaluation Runtime

Figure 4: Symmetric friends and smokers experiment  comparing propositional knowledge compi-
lation (c2d) to WFOMC using compilation rules CR1 and CR2 (which includes domain recursion).

6 Conclusions

We proposed a deﬁnition of complete domain lifted probabilistic inference w.r.t. classes of prob-
abilistic logic models. This deﬁnition considers algorithms to be lifted if they are polynomial in
the size of logical variable domains. Existing ﬁrst-order knowledge compilation turns out not to
admit an intuitive completeness result. Therefore  we generalized the existing Independent Partial
Grounding compilation rule to the domain recursion rule. With this one extra rule  we showed that
ﬁrst-order knowledge compilation is complete for a signiﬁcant class of probabilistic logic models 
where the WFOMC representation has up to two logical variables per clause.

Acknowledgments
The author would like to thank Luc De Raedt  Jesse Davis and the anonymous reviewers for valuable
feedback. This work was supported by the Research Foundation-Flanders (FWO-Vlaanderen).

1http://dtai.cs.kuleuven.be/wfomc/

8

 0.01 0.1 1 10 100 1000 10000 10 20 30 40 50 60 70 80Runtime [s]Number of Peoplec2dWFOMC - CR1WFOMC - CR2References
[1] Lise Getoor and Ben Taskar  editors. An Introduction to Statistical Relational Learning. MIT

Press  2007.

[2] Luc De Raedt  Paolo Frasconi  Kristian Kersting  and Stephen Muggleton  editors. Probabilis-
tic inductive logic programming: theory and applications. Springer-Verlag  Berlin  Heidelberg 
2008.

[3] Daan Fierens  Guy Van den Broeck  Ingo Thon  Bernd Gutmann  and Luc De Raedt. Inference
in probabilistic logic programs using weighted CNF’s. In Proceedings of UAI  pages 256–265 
2011.

[4] David Poole. First-order probabilistic inference.

2003.

In Proceedings of IJCAI  pages 985–991 

[5] Rodrigo de Salvo Braz  Eyal Amir  and Dan Roth. Lifted ﬁrst-order probabilistic inference. In

Proceedings of IJCAI  pages 1319–1325  2005.

[6] Brian Milch  Luke S. Zettlemoyer  Kristian Kersting  Michael Haimes  and Leslie Pack Kael-
bling. Lifted Probabilistic Inference with Counting Formulas. In Proceedings of AAAI  pages
1062–1068  2008.

[7] Vibhav Gogate and Pedro Domingos. Exploiting Logical Structure in Lifted Probabilistic

Inference. In Proceedings of StarAI  2010.

[8] Abhay Jha  Vibhav Gogate  Alexandra Meliou  and Dan Suciu. Lifted Inference Seen from the

Other Side: The Tractable Features. In Proceedings of NIPS  2010.

[9] Vibhav Gogate and Pedro Domingos. Probabilistic theorem proving. In Proceedings of UAI 

pages 256–265  2011.

[10] Guy Van den Broeck  Nima Taghipour  Wannes Meert  Jesse Davis  and Luc De Raedt. Lifted
In Proceedings of IJCAI 

Probabilistic Inference by First-Order Knowledge Compilation.
pages 2178–2185  2011.

[11] Parag Singla and Pedro Domingos. Lifted ﬁrst-order belief propagation. In Proceedings of

AAAI  pages 1094–1099  2008.

[12] Matthew Richardson and Pedro Domingos. Markov logic networks. Machine Learning  62(1):

107–136  2006.

[13] Adnan Darwiche. New advances in compiling CNF to decomposable negation normal form.

In Proceedings of ECAI  pages 328–332  2004.

9

,Aijun Bai
Feng Wu
Xiaoping Chen
Hsiao-Yu Tung
Alexander Smola
Jaya Kawale
Hung Bui
Branislav Kveton
Long Tran-Thanh
Sanjay Chawla
Stephan Rabanser
Stephan Günnemann
Zachary Lipton