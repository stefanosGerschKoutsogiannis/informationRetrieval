2014,Incremental Local Gaussian Regression,Locally weighted regression (LWR) was created as a nonparametric method that can approximate a wide range of functions  is computationally efficient  and can learn continually from very large amounts of incrementally collected data. As an interesting feature  LWR can regress on non-stationary functions  a beneficial property  for instance  in control problems. However  it does not provide a proper generative model for function values  and existing algorithms have a variety of manual tuning parameters that strongly influence bias  variance and learning speed of the results. Gaussian (process) regression  on the other hand  does provide a generative model with rather black-box automatic parameter tuning  but it has higher computational cost  especially for big data sets and if a non-stationary model is required. In this paper  we suggest a path from Gaussian (process) regression to locally weighted regression  where we retain the best of both approaches. Using a localizing function basis and approximate inference techniques  we build a Gaussian (process) regression algorithm of increasingly local nature and similar computational complexity to LWR. Empirical evaluations are performed on several synthetic and real robot datasets of increasing complexity and (big) data scale  and demonstrate that we consistently achieve on par or superior performance compared to current state-of-the-art methods while retaining a principled approach to fast incremental regression with minimal manual tuning parameters.,Incremental Local Gaussian Regression

Franziska Meier1
fmeier@usc.edu

Philipp Hennig2

phennig@tue.mpg.de

Stefan Schaal1 2

sschaal@usc.edu

1University of Southern California

Los Angeles  CA 90089  USA

2Max Planck Institute for Intelligent Systems

Spemannstraße 38  T¨ubingen  Germany

Abstract

Locally weighted regression (LWR) was created as a nonparametric method that
can approximate a wide range of functions  is computationally efﬁcient  and can
learn continually from very large amounts of incrementally collected data. As
an interesting feature  LWR can regress on non-stationary functions  a beneﬁcial
property  for instance  in control problems. However  it does not provide a proper
generative model for function values  and existing algorithms have a variety of
manual tuning parameters that strongly inﬂuence bias  variance and learning speed
of the results. Gaussian (process) regression  on the other hand  does provide
a generative model with rather black-box automatic parameter tuning  but it has
higher computational cost  especially for big data sets and if a non-stationary model
is required. In this paper  we suggest a path from Gaussian (process) regression to
locally weighted regression  where we retain the best of both approaches. Using
a localizing function basis and approximate inference techniques  we build a
Gaussian (process) regression algorithm of increasingly local nature and similar
computational complexity to LWR. Empirical evaluations are performed on several
synthetic and real robot datasets of increasing complexity and (big) data scale  and
demonstrate that we consistently achieve on par or superior performance compared
to current state-of-the-art methods while retaining a principled approach to fast
incremental regression with minimal manual tuning parameters.

1

Introduction

Besides accuracy and sample efﬁciency  computational cost is a crucial design criterion for machine
learning algorithms in real-time settings  such as control problems. An example is the modeling of
robot dynamics: The sensors in a robot can produce thousands of data points per second  quickly
amassing a coverage of the task related workspace  but what really matters is that the learning
algorithm incorporates this data in real time  as a physical system can not necessarily stop and
wait in its control – e.g.  a biped would simply fall over. Thus  a learning method in such settings
should produce a good local model in fractions of a second  and be able to extend this model as the
robot explores new areas of a very high dimensional workspace that can often not be anticipated
by collecting “representative” training data. Ideally  it should rapidly produce a good (local) model
from a large number N of data points by adjusting a small number M of parameters. In robotics 
local learning approaches such as locally weighted regression [1] have thus been favored over global
approaches such as Gaussian process regression [2] in the past.

Local regression models approximate the function in the neighborhood of a query point x∗. Each

local model’s region of validity is deﬁned by a kernel. Learning the shape of that kernel [3] is the
key component of locally weighted learning. Schaal & Atkeson [4] introduced a non-memory-based
version of LWR to compress large amounts of data into a small number of parameters. Instead
of keeping data in memory and constructing local models around query points on demand  their

1

algorithm incrementally compresses data into M local models  where M grows automatically to
cover the experienced input space of the data. Each local model can have its own distance metric 
allowing local adaptation to local characteristics like curvature or noise. Furthermore  each local
model is trained independently  yielding a highly efﬁcient parallelizable algorithm. Both its local

adaptiveness and its low computation cost (linear O(N M)) has made LWR feasible and successful

in control learning. The downside is that LWR requires several tuning parameters  whose optimal
values can be highly data dependent. This is at least partly a result of the strongly localized training 
which does not allow models to ‘coordinate’  or to beneﬁt from other local models in their vicinity.
Gaussian process regression (GPR) [2]  on the other hand  offers principled inference for hyperpa-
rameters  but at high computational cost. Recent progress in sparsifying Gaussian processes [5  6]
has resulted in computationally efﬁcient variants of GPR . Sparsiﬁcation is achieved either through a
subset selection of support points [7  8] or through sparsiﬁcation of the spectrum of the GP [9  10].
Online versions of such sparse GPs [11  12  13] have produced a viable alternative for real-time
model learning problems [14]. However  these sparse approaches typically learn one global distance
metric  making it difﬁcult to ﬁt the non-stationary data encountered in robotics. Moreover  restricting
the resources in a GP also restricts the function space that can be covered  such that with the need to
cover a growing workspace  the accuracy of learning will naturally diminish.
Here we develop a probabilistic alternative to LWR that  like GPR  has a global generative model  but
is locally adaptive and retains LWRs fast incremental training. We start in the batch setting  where
rethinking LWRs localization strategy results in a loss function coupling local models that can be
modeled within the Gaussian regression framework (Section 2). Modifying and approximating the
global model  we arrive at a localized batch learning procedure (Section 3)  which we term Local
Gaussian Regression (LGR). Finally  we develop an incremental version of LGR that processes
streaming data (Section 4). Previous probabilistic formulations of local regression [15  16  17] are
bottom-up constructions—generative models for one local model at a time. Ours is a top-down
approach  approximating a global model to give a localized regression algorithm similar to LWR.

2 Background

L(wm).

Locally weighted regression (LWR) with a ﬁxed set of M local models minimizes the loss function

used  too  but linear models have a favorable bias-variance trade-off [18]. The models are localized

L(w)= NQ
MQ
m=1
n=1
fm(x)= KQ
k=1

ηm(xn)(yn− ξm(xn)T wm)2= MQ
m=1
ξmk(x)wmk= ξm(x)wm

The right hand side decomposesL(w) into independent losses for M models. We assume each
model has K local feature functions ξmk(x)  so that the m-th model’s prediction at x is
K= 2  ξm1(x)= 1  ξm2(x)=(x− cm) gives a linear model around cm. Higher polynomials can be
by a non-negative  symmetric and integrable weighting ηm(x)  typically the radial basis function
for x∈ RD  with center cm and length scale λm or positive deﬁnite metric Λm. ηm(xn) localizes the
The prediction y∗ at a test point x∗ is a normalized weighted average of the local predictions y∗ m:
LWR effectively trains M linear models on M separate datasets ym(xn)=
ηm(xn)yn. These

ηm(x)= exp−(x− cm)2

y∗=∑M

m=1 ηm(x∗)fm(x∗)
m=1 ηm(x∗)
∑M

ηm(x)= exp− 1

(x− cm)Λ−1

m(x− cm)

effect of errors on the least-squares estimate of wm—data points far away from cm have little effect.

(1)

(2)

(3)

(4)

  

or

2λ2
m

2

models differ from the one of Eq. (4)  used at test time. This smoothes discontinuous transitions
between models  but also means that LWR can not be cast probabilistically as one generative model
for training and test data simultaneously. (This holds for any bottom-up construction that learns local

2

βy

w

ηn
m

ξm

φn
m

yn

N

M

βy

βfm

ηn
m

ξn
m

wm

f n
m

yn

N

M

m= φm(xn)= ηn

Figure 1: Left: Bayesian linear regression with M feature functions φn
be a function localizing the effect of the mth input function ξn
variables f n
create M local models connected only through the latent f n
m.

m can
m towards the prediction of yn. Right: Latent
m placed between the features and yn decouple the M regression parameters wm and effectively

m  where ηn

mξn

training point y  similar to how LWR operates during test time (Eq.4). Thus  already during training 

models independently and combines them as above  e.g.  [15  16]). The independence of local models
is key to LWR’s training: changing one local model does not affect the others. While this lowers cost 
we believe it is also partially responsible for LWR’s sensitivity to manually tuned parameters.
Here  we investigate a different strategy to achieve localization  aiming to retain the computational
complexity of LWR  while adding a sense of globality. Instead of using ηm to localize the training

error of data points  we localize a model’s contribution ˆym= ξ(x)T wm towards the global ﬁt of
local models must collaborate to ﬁt a data point ˆy=∑m=1 ηm(x)ξ(x)T wm. Our loss function is
combining the localizer ηm(xn) and the mth input function ξm(xn) to form the feature φm(xn)=
ηm(xn)ξm(xn). This form of localization couples all local models  as in classical radial basis

ηm(xn)ξm(xn)T wm2= NQ
n=1

φm(xn)T wm2

L(w)= NQ
n=1

yn− MQ
m=1

yn− MQ
m=1

(5)

 

function networks [19]. At test time  all local predictions form a joined prediction

y∗= MQ
m=1

y∗m= MQ
m=1

φm(x∗)T wm

(6)

(7)
(8)

This loss can be minimized through a regularized least-square estimator for w (the concatenation of all
wm). We follow the probabilistic interpretation of least-squares estimation as inference on the weights

w  from a Gaussian prior p(w)=N(w; µ0  Σ0) and likelihood p(y φ  w)=N(y; φw  β−1
y I).

The probabilistic formulation has additional value as a generative model for all (training and test)
data points y  which can be used to learn hyperparameters (Figure 1  left). The posterior is

p(w y  φ)=N(w; µN   ΣN) with

0 + βyΦΦ)−1(βyΦy+ Σ−1
0 µ0)

and

µN=(Σ−1

this framework can be extended nonparametrically by a limit that replaces all inner products

(Heteroscedastic data will be addressed below). The prediction for f(x∗) with features φ(x∗)=∶ φ∗
is also Gaussian  with p(f(x∗) y  φ) = N(f(x∗); φ∗µN   φ∗ΣN φ∗). As is widely known 
φ(xi)Σ0φ(xj) with a Mercer (positive semi-deﬁnite) kernel k(xi  xj)  corresponding to a Gaus-
0 + βyΦΦ). In general  this requiresO(F 3) operations.
jointly  by inverting the Gram matrix(Σ−1

sian process prior. The direct connection between Gaussian regression and the elegant theory of
Gaussian processes is a conceptual strength. The main downside  relative to LWR  is computational
cost: Calculating the posterior (7) requires solving the least-squares problem for all F parameters w

Below we propose approximations to lower the computational cost of this operation to a level compa-
rable to LWR  while retaining the probabilistic interpretation  and the modeling robustness of the full
Gaussian model.

ΣN=(Σ−1

0 + βyΦΦ)−1

3 Local Parametric Gaussian Regression

The above shows that Gaussian regression with features φm(x)= ηm(x)ξm(x) can be interpreted
as global regression with M models  where ηm(xn) localizes the contribution of the model ξm(x)

towards the joint prediction of yn. The choice of local parametric model ξm is essentially free. Local

3

correspond to Gaussian regression with RBF features. Generalizing to M local models with K
parameters each  feature function φn

linear regression in a K-dimensional input space takes the form ξm(xn)= xn− cm  and can be
viewed as the analog of locally weighted linear regression. Locally constant models ξm(x)= 1
mk combines the kth component of the local model ξkm(xn) 
localized by the m-th weighting function ηm(xn)
mk∶= φmk(xn)= ηm(xn)ξkm(xn).
Treating mk as indices of a vector∈ RM K  Equation (7) gives localized linear Gaussian regression.
N(wm; 0  A−1

Since it will become necessary to prune the model  we adopt the classic idea of automatic relevance
determination [20  21] using a factorizing prior

m) with Am= diag(αm1  . . .   αmK).

Thus every component k of local model m has its own precision  and can be pruned out by setting

αmk(cid:95)∞. Section 3.1 assumes a ﬁxed number M of local models with ﬁxed centers cm. The
parameters are θ={βy {αmk} {λmd}}  where K is the dimension of local model ξ(x) and D is

p(wA)= MM
m=1

the dimension of input x. We propose an approximation for estimating θ. Section 4 then describes
an incremental algorithm allocating local models as needed  adapting M and cm.

(10)

(9)

φn

3.1 Learning in Local Gaussian Regression

Exact Gaussian regression with localized features still has cubic cost. However  because of the
localization  correlation between distant local models approximately vanishes  and inference is
approximately independent between local models. To use this near-independence for cheap local
approximate inference  similar to LWR  we introduce a latent variable f n
m for each local model m
and datum xn  as in probabilistic backﬁtting [22]. Intuitively  the f form approximate local targets 
against which the local parameters ﬁt (Figure 1  right). Moreover  as formalized below  each f n
m has
its own variance parameter  which re-introduces the ability to model hetereoscedastic data.
This modiﬁed model motivates a factorizing variational bound (Section 3.1.1). Rendering the local
models computationally independent  it allows for fast approximate inference in the local Gaussian
model. Hyperparameters can be learned by approximate maximum likelihood (Section 3.1.2) 

i.e. iterating between constructing a bound q(z θ) on the posterior over hidden variables z (deﬁned

below) given current parameter estimates θ and optimizing q with respect to θ.

3.1.1 Variational Bound

m; φn

The complete data likelihood of the modiﬁed model (Figure 1  right) is

N(yn; f n  β−1
y ) NM
n=1

p(y  f   w Φ  θ)= NM
n=1
Our Gaussian model involves the latent variables w and f  the precisions β={βy  βf 1  . . .   βf M} and
the model parameters λm  cm. We treat w and f as probabilistic variables and estimate θ={β  λ  c}.
On w  f  we construct a variational bound q(w  f) imposing factorization q(w  f)= q(w)q(f).

N(wm; 0  A−1
m)

f m) MM
m=1

mwm  β−1

N(f n

MM
m=1

is maximized

The variational free energy is a lower bound on the log evidence for the observations y:

log p(y θ)≥S q(w  f) log

distributions are Gaussian in both w and f.The approximation on w is

DKL[q(w  f)p(w  f y  θ)]  the distribution for which log q(w) = Ef[log p(y f   w)p(w  f)]
and log q(f) = Ew[log p(y f   w)p(w  f)]. It is relatively easy to show (e.g. [23]) that these
log q(w)= Ef NQ
n=1
Σwm=βf m

log p(f n φn  w)+ log p(w A)= log
T+ Am−1 ∈ RK×K and µwm

N(wm; µwm  Σwm)
E[f n
m]∈ RK×1

p(y  w  f θ)
q(w  f)
q(w  f) minimizing
MM
m=1
= βf mΣwm NQ
n=1

NQ
n=1

entropy

relative

bound

φn

mφn

m

by

the

.

the

where

This

(11)

(12)

(13)

(14)

φn
m

4

where

µf n

m

f m

f m

(15)

(16)

(17)

likelihood under the variational bound

3.1.2 Optimizing Hyperparameters

yn− MQ
m=1

m is the posterior mean of the m-th model’s virtual target for data

f couples the local models  allowing for a form of message passing between local models.

log q(f n)= Ew[log p(yn f n  βy)+ log p(f n φn

The posterior update equations for the weights are local: each of the local models updates its
parameters independently. This comes at the cost of having to update the belief over the variables f n
m 
which achieves a coupling between the local models. The Gaussian variational bound on f is

m  w)]= logN(f n; µf n  Σf) 
Σf= B−1− B−11(β−1
y + 1T B−11)−11T B−1= B−1− B−111T B−1
y + 1T B−11
β−1
Ew[wm]T φn
m
= Ew[wm]T φn
m+
β−1
y +∑M
m=1 β−1
β−1
and B= diag(βf 1  . . .   βf M). µf n
point n. These updates can be performed inO(M K). Note how the posterior over hidden variables
m=1 {αmk}}  we maximize the expected complete log
To set the parameters θ={βy {βf m  λm}M
y 
 logNyn;
Ef  w[log p(y  f   w Φ  θ)]= Ef  w NQ
MQ
m  β−1
m=1
n=1
logN(f n
f m)+ MQ
+ MQ
m  β−1
m=1
m=1
(yn− 1µf n)2+ 1T Σf 1
NQ
n=1
m)2+ φn
(µf nm− µwm φn
NQ
n=1
+ Σw kk
= ∂Ef  w∑N
n=1 logN(f n
∂Ef  w[log p(y  f   w Φ  θ)]

Setting the gradient of this expression to zero leads to the following update equations for the variances

The gradient with respect to the scales of each local model is completely localized

logN(wm; 0  A−1
m).

y = 1
β−1
f m= 1
β−1
mk= µ2
α−1

∂λmd

∂λmd

and  with the exception of the variance 1~βy  all hyper-parameter updates are solved independently

We use gradient ascent to optimize the length scales λmd. All necessary equations are of low cost

for each local model  similar to LWR. In contrast to LWR  however  these local updates do not
cause a potential catastrophic shrinking in the length scales: In LWR  both inputs and outputs are
weighted by the localizing function  thus reducing the length scale improves the ﬁt. The localization
in Equation (22) only affects the inﬂuence of regression model m  but the targets still need to be
ﬁt accordingly. Shrinking of local models only happens if it actually improves the ﬁt against the
unweighted targets fnm such that no complex cross validation procedures are required.

f m)(cid:6)
m  β−1

m+ σ2

T Σwmφn

m

m; wT

mφn

m; wT

mφn

(19)

(20)

(21)

N

N

(18)

(22)

f n

wmk

f m

3.1.3 Prediction

Predictions at a test point x∗ arise from marginalizing over both f and w  using
S S N(y∗; 1T f∗  β−1
y )N(f∗; W T φ(x∗)  B−1)df∗N(w; µw  Σw)dw
=Ny∗;Q
m  σ2(x∗) (23)
mφ∗
f m+∑M
y +∑M
where σ2(x∗)= β−1
m=1 φ∗
m=1 β−1

m  which is linear in M and K.

T Σwm φ∗

wT

m

m

5

4

Incremental Local Gaussian Regression

0) and p(αm)=∏K

the n-th incoming data point. Following this principle we extend the model presented in Section 3

The above approximate posterior updates apply in the batch setting  assuming the number M and
locations c of local models are ﬁxed. This section constructs an online algorithm for incrementally
incoming data  creating new local models when needed. There has been recent interest in variational
online algorithms for efﬁcient learning on large data sets [24  25]. Stochastic variational inference
[24] operates under the assumption that the data set has a ﬁxed size N and optimizes the variational
lower bound for N data points via stochastic gradient descent. Here  we follow algorithms for
streaming datasets of unknown size. Probabilistic methods in this setting typically follow a Bayesian

ﬁltering approach [26  25  27] in which the posterior after n− 1 data points becomes the prior for
and treat precision variables{βf m  αmk} as random variables  assuming Gamma priors p(βf m)=
G(βf m aβ
0). Thus  the factorized approximation on the
posterior q(z) over all random variables z={f   w  α  βf} is changed to
q(z)= q(f   w  βf   α)= q(f)q(w)q(βf)q(α)
p(zx1  . . .   xn)≈ p(xn z)q(z x1  . . . xn−1)
f m and∑n=1(µn

(25)
after n data points.
In essence  this formulates the (approximate) posterior updates in terms
of sufﬁcient statistics  which are updated with each new incoming data point. The batch up-
dates (listed in [28]) can be rewritten such that they depend on the following sufﬁcient statistics

(24)
A batch version of this was introduced in [28]. Given that  the recursive application of Bayes’ theorem
results in the approximate posterior

k=1G(αmk aα

 ∑n=1 φn

mφn

0   bβ

0   bα

mµn



m

are added. Algorithm 1 gives an overview of the entire incremental algorithm.

number M can grow fast initially  before the pruning becomes effective. Thus  we check for each

Finally  we use an extension analogous to incremental training of the relevance vector machine [29] to

each iteration adds one local model in the variational step  and prunes out existing local models

random variables too  here we update them using the noisy (stochastic) gradients produced by each
incoming data point. Due to space limitations  we only summarize these update equations in the

f m)2. Although the length-scales λm could be treated as

∑N
n=1 φn
algorithm below  where we have replaced the expectation operator by⋅.
iteratively add local models at new  greedily selected locations cM+1. Starting with one local model 
for which all components αmk(cid:95)∞. This works well in practice  with the caveat that the model
ηm(cM+1)≥ wgen  where wgen is a parameter between 0 and 1 and regulates how many parameters
selected location cM+1 whether any of the existing local models c1∶M produces a localizing weight
1: M= 0; C={}  aα
2: for all(xn  yn) do
Algorithm 1 Incremental LGR
~~ for each data point
if ηm(xn)< wgen ∀m= 1  . . .   M then cm(cid:94) xn; C(cid:94) C∪{cm}; M= M+ 1 end if
0   aβ
0   ββ
0   bα
m
yn−∑M
Σf= B−1− B
= µT
−1
−111T B
−1
m=1 µT
for m= 1 to M do
y +∑mβfm
m=1β−1
y +∑M
β−1
β−1
if ηm(xn)< 0.01 then continue end if
+ φn
+ φn
+ µ2

m(cid:94) κSφmφ
  Sφmµfm(cid:94) κSφmµfm
fm(cid:94) κSµ2
+Am−1
Σwm=βf mSφmφT
  µwm=βf mΣwm Sφmµfm
Nm= κNm+ 1  aβ
0+ Nm  aα
N m= aβ
0+ 0.5
N m= aα
+ trSφmφ
N m= Sµ2
− 2µ
(Σwm+ µwmµ
wm k+ Σwm kk
N mk= µ2
Nmk)
Nmk~bα
Nm Am= diag(aα
βf m= aβ
Nm~bβ
λm= λm+ ν(∂~∂λmN(f nm;wT
m β−1
f m))
ifαmk> 1e3 ∀k= 1  . . .   K then prune local model m  M(cid:94) M− 1 end if

0   forgetting rate κ  learning rate ν

)(cid:6)+ Nmσ2

8:
9:
10:

Sφmµfm

SφmφT

4:
5:
6:
7:

mφn

mµf n

m

  µf n

m

mφn

φn
m

wm

φn

wm

fm

f n
m

m

m

f n
m

wm

wm

f m

bβ
bα

β

fm

fm

3:

m

  Sµ2

11:
12:
13:
14:
15:
16: end for

end for

m

6

Table 1: Datasets for inverse dynamics tasks: KUKA1  KUKA2 are different splits of the same data. Rightmost
column indicates the overlap in input space coverage between ofﬂine (ISofﬂine) and online training (ISonline) sets.

ISofﬂine∪ ISonline

Nofﬂine train Nonline train

Ntest

4449
17560
17560

-

44484
180360
180360
1984950

-
-
-

large overlap
small overlap
no overlap

20050

-

Dataset
Sarcos [2]
KUKA1
KUKA2
KUKAsim

freq
100
500
500
500

Motion
rhythmic

rhythmic at various speeds
rhythmic at various speeds

rhythmic + discrete

5 Experiments

We evaluate our LGR on inverse dynamics learning tasks  using data from two robotic platforms:
a SARCOS anthropomorphic arm and a KUKA lightweight arm. For both robots  learning the

inverse dynamics involves learning a map from the joint positions q(rad)  velocities ˙q(rad~s) and
accelerations ¨q(rad~s2)  to torques τ(Nm) for each of 7 joints (degrees of freedom). We compare to

two methods previously used for inverse dynamics learning: LWPR1 – an extension of LWR for high
dimensional spaces [31] – and I-SSGPR2 [13] – an incremental version of Sparse Spectrum GPR.
I-SSGPR differs from LGR and LWPR in that it is a global method and does not learn the distance
metric online. Instead  I-SSGPR needs ofﬂine training of hyperparameters before it can be used
online. We mimic the procedure used in [13]: An ofﬂine training set is used to learn an initial model
and hyperparameters  then an online training set is used to evaluate incremental learning. Where
indicated we use initial ofﬂine training for all three methods. I-SSGPR uses typical GPR optimization
procedures for ofﬂine training  and is thus only available in batch mode. For LGR  we use the batch
version for pre-training/hyperparameter learning. For all experiments we initialized the length scales

to λ= 0.3  and used wgen= 0.3 for both LWPR and LGR.

We evaluate on four different data sets  listed in Table 1. These sets vary in scale  types of motion
and how well the ofﬂine training set represents the data encountered during online learning. All
results were averaged over 5 randomly seeded runs  mean-squared error (MSE) and normalized
mean-squared error (nMSE) are reported on the online training dataset. The nMSE is reported as the
mean-squared error normalized by the variance of the outputs.

with 200(400) features  MSE for 400 features is reported in brackets.

Table 2: Predictive performance on online training data of Sarcos after one sweep. I-SSGPR has been trained

I-SSGPR200(400)

Joint
J1
J2
J3
J4
J5
J6
J7

MSE

13.699 (10.832)
6.158 (4.788)
1.803 (1.415)
1.198 (0.857)
0.034 (0.027)
0.129 (0.096)
0.093 (0.063)

nMSE
0.033
0.027
0.018
0.006
0.036
0.044
0.014

MSE
19.180
9.783
3.595
4.807
0.071
0.248
0.231

LWPR
nMSE # of LM
0.046
0.044
0.036
0.025
0.075
0.085
0.034

461.4
495.0
464.6
382.8
431.2
510.2
378.8

LGR

nMSE # of LM
0.027
0.037
0.023
0.027
0.033
0.034
0.025

321.4
287.4
298.0
303.2
344.2
344.2
348.8

MSE
11.434
8.342
2.237
5.079
0.031
0.101
0.170

Sarcos: Table 2 summarizes results on the popular Sarcos benchmark for inverse dynamics learning
tasks [2]. The traditional test set is used as the ofﬂine training data to pre-train all three models.

200 features is the optimal design choice according to[13]. We report the (normalized) mean-squared
I-SSGPR is trained with 200 and 400 sparse spectrum features  indicated as I-SSGPR200(400)  where

error on the online training data  after one sweep through it - i.e. each data point has been used once -
has been performed. All three methods perform well on this data  with I-SSGPR and LGR having a
slight edge over LWPR in terms of accuracy; and LGR uses fewer local models than LWPR. The
Sarcos data ofﬂine training set represents the data encountered during online training very well. Thus 
here online distance metric learning is not necessary to achieve good performance.

1we use the LWPR implementation found in the SL simulation software package [30]
2we use code from the learningMachine library in the RobotCub framework  from http:// eris.liralab.it/iCub

7

Table 3: Predictive performance on online training data of KUKA1 and KUKA2 after one sweep. KUKA2
results are averages across joints. I-SSGPR was trained on 200 and 400 features (results for I-SSGPR400 shown
in brackets).

I-SSGPR200(400)

LWPR

LGR

data

KUKA1

Joint
J1
J2
J3
J4
J5
J6
J7

MSE

7.021 (7.680)
16.385 (18.492)
1.872 (1.824)
3.124 (3.460)
0.095 (0.143)
0.142 (0.296)
0.129 (0.198)

nMSE MSE nMSE # of LM MSE nMSE # of LM
3188.6
0.233
3363.8
0.265
3246.6
0.289
0.256
3333.6
3184.4
0.196
3372.4
0.139
0.174
3232.6

3476.8
3508.6
3477.2
3494.6
3512.4
3561.0
3625.6

2.238
2.738
0.528
0.571
0.017
0.029
0.033

2.362
2.359
0.457
0.503
0.019
0.043
0.023

0.078
0.038
0.071
0.041
0.039
0.042
0.031

0.074
0.044
0.082
0.047
0.036
0.029
0.044

KUKA2

-

9.740 (9.985)

0.507

1.064

0.056

3617.7

1.012

0.054

3290.2

0.06

0.04

0.02

E
S
M
n

LGR
LWPR

5⋅ 105

1⋅ 106

1.5⋅ 106

17 000

16 000

M

15 000

14 000

5⋅ 105

1⋅ 106

1.5⋅ 106

n

n

Figure 2: Right: nMSE on the ﬁrst joint of simulated KUKA arm Left: average number of local models used.
KUKA1 and KUKA2: The two KUKA datasets consist of rhythmic motions at various speeds  and
represent a more realistic setting in robotics: While one can collect some data for ofﬂine training  it is
not feasible to cover the whole state-space. Ofﬂine data of KUKA1 has been chosen to give partial
coverage of the range of available speeds  while KUKA2 consists of motion at only one speed. In this
setting  both LWPR and LGR excel (Table 3). As they can learn local distance metrics on the ﬂy  they
adapt to incoming data in previously unexplored input areas. Performance of I-SSGPR200 degrades
as the ofﬂine training data is less representative  while LGR and LWPR perform almost equally well
on KUKA1 and KUKA2. While there is little difference in accuracy between LGR and LWPR  LGR
consistently uses fewer local models and does not require careful manual meta-parameter tuning.
Since both LGR and LWPR use more local models on this data (compared to the Sarcos data) we
also tried increasing the feature space of I-SSGPR to 400 features. This did not improve I-SSGPRs
performance on the online data (see Table 3). Finally  it is noteworthy that LGR processes both of

these data sets at∼ 500Hz (C++ code  on a 3.4GHz Intel Core i7)  making it a realistic alternative for

real-time inverse dynamics learning tasks.

KUKAsim : Finally  we evaluate LGRs ability to learn from scratch on KUKAsim  a large data set
of 2 million simulated data points  collected using [30]. We randomly drew 1% points as a test
set  on which we evaluate convergence during online training. Figure 2 (left) shows convergence
and number of local models used  averaged over 5 randomly seeded runs for joint 1. After the ﬁrst
1e5 data points  both LWPR and LGR achieve a normalized mean squared error below 0.07  and

eventually converge to a nMSE of∼ 0.01. LGR converges slightly faster  while using fewer local

models (Figure 2  right).

6 Conclusion

We proposed a top-down approach to probabilistic localized regression. Local Gaussian Regression
decouples inference over M local models  resulting in efﬁcient and principled updates for all
parameters  including local distance metrics. These localized updates can be used in batch as well as
incrementally  yielding computationally efﬁcient learning in either case and applicability to big data
sets. Evaluated on a variety of simulated and real robotic inverse dynamics tasks  and compared to
I-SSGPR and LWPR  incremental LGR shows an ability to add resources (local models) and to update
its distance metrics online. This is essential to consistently achieve high accuracy. Compared to
LWPR  LGR matches or improves precision  while consistently using fewer resources (local models)
and having signiﬁcantly fewer manual tuning parameters.

8

References
[1] Christopher G Atkeson  Andrew W Moore  and Stefan Schaal. Locally weighted learning for control.

Artiﬁcial Intelligence Review  (1-5):75–113  1997.

[2] Carl Edward Rasmussen and Christopher KI Williams. Gaussian Processes for Machine Learning. MIT

Press  2006.

[3] Jianqing Fan and Irene Gijbels. Data-driven bandwidth selection in local polynomial ﬁtting: variable

bandwidth and spatial adaptation. Journal of the Royal Statistical Society.  pages 371–394  1995.

[4] Stefan Schaal and Christopher G Atkeson. Constructive incremental learning from only local information.

Neural Computation  10(8):2047–2084  1998.

[5] Joaquin Qui˜nonero Candela and Carl Edward Rasmussen. A unifying view of sparse approximate Gaussian

process regression. JMLR  6:1939–1959  2005.

[6] Krzysztof Chalupka  Christopher KI Williams  and Iain Murray. A framework for evaluating approximation

methods for Gaussian process regression. JMLR  14(1):333–350  2013.

[7] Michalis K Titsias. Variational learning of inducing variables in sparse Gaussian processes. In International

Conference on Artiﬁcial Intelligence and Statistics  pages 567–574  2009.

[8] Edward Snelson and Zoubin Ghahramani. Sparse Gaussian processes using pseudo-inputs. Advances in

neural information processing systems  18:1257  2006.

[9] Ali Rahimi and Benjamin Recht. Random features for large-scale kernel machines. In NIPS  2007.
[10] Miguel L´azaro-Gredilla  Joaquin Qui˜nonero-Candela  Carl Edward Rasmussen  and An´ıbal R Figueiras-

Vidal. Sparse spectrum Gaussian process regression. JMLR  11:1865–1881  2010.

[11] Marco F Huber. Recursive Gaussian process: On-line regression and learning. Pattern Recognition Letters 

45:85–91  2014.

[12] Lehel Csat´o and Manfred Opper. Sparse on-line Gaussian processes. Neural computation  2002.
[13] Arjan Gijsberts and Giorgio Metta. Real-time model learning using incremental sparse spectrum Gaussian

process regression. Neural Networks  41:59–69  2013.

[14] James Hensman  Nicolo Fusi  and Neil D Lawrence. Gaussian processes for big data. UAI  2013.
[15] Jo-Anne Ting  Mrinal Kalakrishnan  Sethu Vijayakumar  and Stefan Schaal. Bayesian kernel shaping for

learning control. Advances in neural information processing systems  6:7  2008.

[16] Duy Nguyen-Tuong  Jan R Peters  and Matthias Seeger. Local Gaussian process regression for real time
online model learning. In Advances in Neural Information Processing Systems  pages 1193–1200  2008.
[17] Edward Snelson and Zoubin Ghahramani. Local and global sparse Gaussian process approximations. In

International Conference on Artiﬁcial Intelligence and Statistics  pages 524–531  2007.

[18] Trevor Hastie and Clive Loader. Local regression: Automatic kernel carpentry. Statistical Science  1993.
[19] J. Moody and C. Darken. Learning with localized receptive ﬁelds. In Proceedings of the 1988 Connectionist

Summer School  pages 133–143. San Mateo  CA  1988.

[20] Radford M Neal. Bayesian Learning for Neural Network  volume 118. Springer  1996.
[21] Michael E Tipping. Sparse Bayesian learning and the relevance vector machine. The Journal of Machine

Learning Research  1:211–244  2001.

[22] Aaron D’Souza  Sethu Vijayakumar  and Stefan Schaal. The Bayesian backﬁtting relevance vector machine.

In ICML  2004.

[23] Martin J Wainwright and Michael I Jordan. Graphical models  exponential families  and variational

inference. Foundations and Trends® in Machine Learning  2008.

[24] Matthew D. Hoffman  David M. Blei  Chong Wang  and John Paisley. Stochastic variational inference. J.

Mach. Learn. Res.  14(1):1303–1347  May 2013.

[25] Tamara Broderick  Nicholas Boyd  Andre Wibisono  Ashia C Wilson  and Michael Jordan. Streaming

variational Bayes. In Advances in Neural Information Processing Systems  pages 1727–1735  2013.

[26] Jan Luts  Tamara Broderick  and Matt Wand. Real-time semiparametric regression. arxiv  2013.
[27] Antti Honkela and Harri Valpola. On-line variational Bayesian learning. In 4th International Symposium

on Independent Component Analysis and Blind Signal Separation  pages 803–808  2003.

[28] Franziska Meier  Philipp Hennig  and Stefan Schaal. Efﬁcient Bayesian local model learning for control.

In Proceedings of the IEEE International Conference on Intelligent Robotics Systems (IROS)  2014.

[29] Joaquin Qui˜nonero-Candela and Ole Winther. Incremental Gaussian processes. In NIPS  2002.
[30] Stefan Schaal. The SL simulation and real-time control software package. Technical report  2009.
[31] Sethu Vijayakumar and Stefan Schaal. Locally weighted projection regression: Incremental real time

learning in high dimensional space. In ICML  pages 1079–1086  2000.

9

,Franziska Meier
Philipp Hennig
Stefan Schaal
George Papamakarios
Iain Murray
Vatsal Sharan
Sham Kakade
Percy Liang
Gregory Valiant