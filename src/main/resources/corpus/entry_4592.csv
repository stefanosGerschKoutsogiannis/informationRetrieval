2015,Recovering Communities in the General Stochastic Block Model Without Knowing the Parameters,The stochastic block model (SBM) has recently gathered significant attention due to new threshold phenomena. However  most developments rely on the knowledge of the model parameters  or at least on the number of communities. This paper introduces efficient algorithms that do not require such knowledge and yet achieve the optimal information-theoretic tradeoffs identified in Abbe-Sandon FOCS15. In the constant degree regime  an algorithm is developed that requires only a lower-bound on the relative sizes of the communities and achieves the optimal accuracy scaling for large degrees. This lower-bound requirement is removed for the regime of arbitrarily slowly diverging degrees  and the model parameters are learned efficiently. For the logarithmic degree regime  this is further enhanced into a fully agnostic algorithm that achieves the CH-limit for exact recovery in quasi-linear time. These provide the first algorithms affording efficiency  universality and information-theoretic optimality for strong and weak consistency in the SBM.,Recovering Communities in the General Stochastic

Block Model Without Knowing the Parameters

Emmanuel Abbe

Colin Sandon

Department of Electrical Engineering and PACM

Department of Mathematics

Princeton University
Princeton  NJ 08540

eabbe@princeton.edu

Princeton University
Princeton  NJ 08540

sandon@princeton.edu

Abstract

The stochastic block model (SBM) has recently gathered signiﬁcant attention due
to new threshold phenomena. However  most developments rely on the knowledge
of the model parameters  or at least on the number of communities. This paper in-
troduces efﬁcient algorithms that do not require such knowledge and yet achieve
the optimal information-theoretic tradeoffs identiﬁed in Abbe-Sandon FOCS15.
In the constant degree regime  an algorithm is developed that requires only a
lower-bound on the relative sizes of the communities and achieves the optimal
accuracy scaling for large degrees. This lower-bound requirement is removed for
the regime of arbitrarily slowly diverging degrees  and the model parameters are
learned efﬁciently. For the logarithmic degree regime  this is further enhanced into
a fully agnostic algorithm that achieves the CH-limit for exact recovery in quasi-
linear time. These provide the ﬁrst algorithms affording efﬁciency  universality
and information-theoretic optimality for strong and weak consistency in the SBM.

1

Introduction

This paper studies the problem of recovering communities in the general stochastic block model
with linear size communities  for constant and logarithmic degree regimes. In contrast to [1]  this
paper does not require knowledge of the parameters. It shows how to learn these from the graph
toplogy. We next provide some motivations on the problem and further background on the model.
Detecting communities (or clusters) in graphs is a fundamental problem in networks  computer
science and machine learning. This applies to a large variety of complex networks (e.g.  social and
biological networks) as well as to data sets engineered as networks via similarly graphs  where one
often attempts to get a ﬁrst impression on the data by trying to identify groups with similar behavior.
In particular  ﬁnding communities allows one to ﬁnd like-minded people in social networks  to
improve recommendation systems  to segment or classify images  to detect protein complexes  to
ﬁnd genetically related sub-populations  or discover new tumor subclasses. See [1] for references.
While a large variety of community detection algorithms have been deployed in the past decades  the
understanding of the fundamental limits of community detection has only appeared more recently 
in particular for the SBM [1–7]. The SBM is a canonical model for community detection. We use
here the notation SBM(n  p  W ) to refer to a random graph ensemble on the vertex-set V = [n] 
where each vertex v ∈ V is assigned independently a hidden (or planted) label σv in [k] under a
probability distribution p = (p1  . . .   pk) on [k]  and each unordered pair of nodes (u  v) ∈ V × V
is connected independently with probability Wσu σv  where W is a symmetric k × k matrix with
entries in [0  1]. Note that G ∼ SBM(n  p  W ) denotes a random graph drawn under this model 
without the hidden (or planted) clusters (i.e.  the labels σv) revealed. The goal is to recover these
labels by observing only the graph.

1

a − √

b| ≥ √

Recently the SBM came back at the center of the attention at both the practical level  due to ex-
tensions allowing overlapping communities that have proved to ﬁt well real data sets in massive
networks [8]  and at the theoretical level due to new phase transition phenomena [2–6]. The latter
works focus exclusively on the SBM with two symmetric communities  i.e.  each community is of
the same size and the connectivity in each community is identical. Denoting by p the intra- and q
the extra-cluster probabilities  most of the results are concerned with two ﬁgure of merits: (i) re-
covery (also called exact recovery or strong consistency)  which investigates the regimes of p and
q for which there exists an algorithm that recovers with high probability the two communities com-
pletely [7  9–19]  (ii) detection  which investigates the regimes for which there exists an algorithm
that recovers with high probability a positively correlated partition [2–4].
The sharp threshold for exact recovery was obtained in [5  6]  showing1 that for p = a log(n)/n 
q = b log(n)/n  a  b > 0  exact recovery is solvable if and only if |√
2  with efﬁcient
algorithms achieving the threshold. In addition  [5] introduces an SDP  proved to achieve the thresh-
old in [20  21]  while [22] shows that a spectral algorithm also achieves the threshold. The sharp
threshold for detection was obtained in [3  4]  showing that detection is solvable (and so efﬁciently)
if and only if (a − b)2 > 2(a + b)  when p = a/n  q = b/n  settling a conjecture from [2].
Besides the detection and the recovery properties  one may ask about the partial recovery of the
communities  studied in [1  19  23–25]. Of particular interest to this paper is the case of strong
recovery (also called weak consistency)  where only a vanishing fraction of the nodes is allowed to
be misclassiﬁed. For two-symmetric communities  [6] shows that strong recovery is possible if and
only if n(p − q)2/(p + q) diverges  extended in [1] for general SBMs.
In the next section  we discuss the results for the general SBM of interest in this paper and the
problem of learning the model parameters. We conclude this section by providing motivations on
the problem of achieving the threshold with an efﬁcient and universal algorithm.
Threshold phenomena have long been studied in ﬁelds such as information theory (e.g.  Shannon’s
capacity) and constrained satisfaction problems (e.g.  the SAT threshold). In particular  the quest of
achieving the threshold has generated major algorithmic developments in these ﬁelds (e.g.  LDPC
codes  polar codes  survey propagation to name a few). Likewise  identifying thresholds in com-
munity detection models is key to benchmark and guide the development of clustering algorithms.
However  it is particularly crucial to develop benchmarks that do not depend sensitively on the
knowledge of the model parameters. A natural question is hence whether one can solve the various
recovery problems in the SBM without having access to the parameters. This paper answers this
question in the afﬁrmative for the exact and strong recovery of the communities.

1.1 Prior results on the general SBM with known parameters

(Recovery requirements.)

Most of the previous works are concerned with the SBM having symmetric communities (mainly
2 or sometimes k)  with the exception of [19] which provides the ﬁrst general achievability results
for the SBM.2 Recently  [1] studied fundamental limits for the general model SBM(n  p  W )  with
p independent of n. The results are summarized below. Recall ﬁrst the recovery requirements:
Deﬁnition 1.
An algorithm recovers or detects communities in
SBM(n  p  W ) with an accuracy of α ∈ [0  1]  if it outputs a labelling of the nodes {σ(cid:48)(v)  v ∈ V } 
which agrees with the true labelling σ on a fraction α of the nodes with probability 1 − on(1).
The agreement is maximized over relabellings of the communities. Strong recovery refers to
α = 1 − on(1) and exact recovery refers to α = 1.
The problem is solvable information-theoretically if there exists an algorithm that solves it  and
efﬁciently if the algorithm runs in polynomial-time in n. Note that exact recovery in SBM(n  p  W )
requires the graph not to have vertices of degree 0 in multiple communities with high probability.
Therefore  for exact recovery  we focus on W = ln(n)Q/n where Q is ﬁxed.
I. Partial and strong recovery in the general SBM. The ﬁrst result of [1] concerns the regime
where the connectivity matrix W scales as Q/n for a positive symmetric matrix Q (i.e.  the node

1 [6] generalizes this to a  b = Θ(1).
2 [24] also study variations of the k-symmetric model.

2

average degree is constant). The following notion of SNR is ﬁrst introduced

SNR = |λmin|2/λmax

(1)
where λmin and λmax are respectively the smallest3 and largest eigenvalues of diag(p)Q. The algo-
rithm Sphere-comparison is proposed that solves partial recovery with exponential accuracy
and quasi-linear complexity when the SNR diverges.
[1] Given any k ∈ Z  p ∈ (0  1)k with |p| = 1  and symmetric matrix Q with no
Theorem 1.
two rows equal  let λ be the largest eigenvalue of P Q  and λ(cid:48) be the eigenvalue of P Q with the
smallest nonzero magnitude.
λ > 4  λ7 < (λ(cid:48))8  and 4λ3 < (λ(cid:48))4  for some
ε = ε(λ  λ(cid:48)) and C = C(p  Q) > 0  Sphere-comparison detects communities in graphs
drawn from SBM(n  p  Q/n) with accuracy 1 − 4ke− Cρ
))  provided
that the above is larger than 1 − mini pi
2 ln(4k)   and runs in O(n1+) time. Moreover  ε can be made
arbitrarily small with 8 ln(λ

2/|λ(cid:48)|)/ ln(λ)  and C(p  αQ) is independent of α.

(cid:16) (λ(cid:48))4
λ3 − 1

16k /(1 − exp(− Cρ

If SNR := |λ(cid:48)|2

(cid:17)

√

16k

(a−b)2

Note that for k symmetric clusters  SNR reduces to
k(a+(k−1)b)  which is the quantity of inter-
est for detection [2  26]. Moreover  the SNR must diverge to ensure strong recovery in the sym-
metric case [1]. The following is an important consequence of the previous theorem  stating that
Sphere-comparison solves strong recovery when the entries of Q are ampliﬁed.
Corollary 1. [1] For any k ∈ Z  p ∈ (0  1)a with |p| = 1  and symmetric matrix Q with no two rows
equal  there exist (c) = O(1/ ln(c)) such that for all sufﬁciently large c  Sphere-comparison
detects communities in SBM(n  p  cQ/n) with accuracy 1 − e−Ω(c) and complexity On(n1+(c)).
The above gives the optimal scaling both in accuracy and complexity.
II. Exact recovery in the general SBM. The second result in [1] is for the regime where the con-
nectivity matrix scales as ln(n)Q/n  Q independent of n  where it is shown that exact recovery has
a sharp threshold characterized by the divergence function

(cid:0)tf (x) + (1 − t)g(x) − f (x)tg(x)1−t(cid:1)  

(cid:88)

D+(f  g) = max
t∈[0 1]

x∈[k]

named the CH-divergence in [1]. Speciﬁcally  if all pairs of columns in diag(p)Q are at D+-distance
at least 1 from each other  then exact recovery is solvable in the general SBM. We refer to Section
2.3 in [1] for discussion on the connection with Shannon’s channel coding theorem (and CH vs.
KL divergence). An algorithm (Degree-profiling) is also developed in [1] that solves exact
recovery down to the D+ limit in quasi-linear time  showing that exact recovery has no informational
to computational gap.
Theorem 2. [1] (i) Exact recovery is solvable in SBM(n  p  ln(n)Q/n) if and only if

D+((P Q)i||(P Q)j) ≥ 1.

min

i j∈[k] i(cid:54)=j

(ii) The Degree-profiling algorithm (see [1]) solves exact recovery whenever it
information-theoretically solvable and runs in o(n1+) time for all  > 0.

is

Exact and strong recovery are thus solved for the general SBM with linear-size communities  when
the parameters are known. We next remove the latter assumption.

1.2 Estimating the parameters

For the estimation of the parameters  some results are known for two-symmetric communities. In
the logarithmic degree regime  since the SDP is agnostic to the parameters (it is a relaxation of the
min-bisection)  the parameters can be estimated by recovering the communities [5  20  21]. For the
constant-degree regime  [26] shows that the parameters can be estimated above the threshold by
counting cycles (which is efﬁciently approximated by counting non-backtracking walks). These are 
however  for 2 communities. We also became aware of a parallel work [27]  which considers private
graphon estimation (including SBMs). In particular  for the logarithmic degree regime  [27] obtains
a (non-efﬁcient) procedure to estimate parameters of graphons in an appropriate version of the L2
norm. For the general SBM  learning the model was to date mainly open.

3The smallest eigenvalue of diag(p)Q is the one with least magnitude.

3

2 Results

Agnostic algorithms are developed for the constant and diverging node degrees (with p  k indepen-
dent of n). These afford optimal accuracy and complexity scaling for large node degrees and achieve
the CH-divergence limit for logarithmic node degrees. In particular  the SBM can be learned efﬁ-
ciently for any diverging degrees.
Note that the assumptions on p and k being independent of n could be slightly relaxed  for example
to slowly growing k  but we leave this for future work.

2.1 Partial recovery

Our main result for partial recovery holds in the constant degree regime and requires a lower bound
δ on the least relative size of the communities. This requirement is removed when working with
diverging degrees  as stated in the corollary below.

Theorem 3. Given δ > 0 and for any k ∈ Z  p ∈ (0  1)k with(cid:80) pi = 1 and 0 < δ ≤ min pi 

and any symmetric matrix Q with no two rows equal such that every entry in Qk is positive (in other
words  Q such that there is a nonzero probability of a path between vertices in any two communities
in a graph drawn from SBM(n  p  Q/n))  there exist (c) = O(1/ ln(c)) such that for all sufﬁ-
ciently large α  Agnostic-sphere-comparison detects communities in graphs drawn from
SBM(n  p  αQ/n) with accuracy at least 1 − e−Ω(α) in On(n1+(α)) time.
Note that a vertex in community i has degree 0 with probability exponential in c  and there is no
way to differentiate between vertices of degree 0 from different communities. So  an error rate
that decreases exponentially with c is optimal. In [28]  we provide a more detailed version of this
theorem  which yields a quantitate statement on the accuracy of the algorithm in terms of the SNR
(λ(cid:48))2/λ for general SBM(n  p  Q/n).
Corollary 2. If α = ω(1) in Theorem 3  the knowledge requirement on δ can be removed.

2.2 Exact recovery

Recall that from [1]  exact recovery is information-theoretically and computationally solvable in
SBM(n  p  ln(n)Q/n) if and only if 

D+((P Q)i  (P Q)j) ≥ 1.

min
i<j

(2)

this can be achieved without any knowledge on the parameters for

We next show that
SBM(n  p  ln(n)Q/n).
Theorem 4. The Agnostic-degree-profiling algorithm (see Section 3.2) solves exact re-
covery in any SBM(n  p  ln(n)Q/n) for which exact recovery is solvable  using no input except the
graph in question  and runs in o(n1+) time for all  > 0. In particular  exact recovery is efﬁciently
and universally solvable whenever it is information-theoretically solvable.

3 Proof Techniques and Algorithms

3.1 Partial recovery and the Agnostic-sphere-comparison algorithm

3.1.1 Simpliﬁed version of the algorithm for the symmetric case

To ease the presentation of the algorithm  we focus ﬁrst on the symmetric case  i.e.  the SBM with
k communities of relative size 1/k  probability of connecting a
n across
communities. Let d = (a + (k − 1)b)/k be the average degree.
Deﬁnition 2. For any vertex v  let Nr[G](v) be the set of all vertices with shortest path in G to v of
length r. We often drop the subscript G if the graph in question is the original SBM. We also refer
to ¯Nr(v) as the vector whose i-th entry is the number of vertices in Nr(v) that are in community i.

n inside communities and b

For an arbitrary vertex v and reasonably small r  there will be typically about dr vertices in Nr(v) 
k )r more of them will be in v’s community than in each other community. Of course 
and about ( a−b

4

this only holds when r < log n/ log d because there are not enough vertices in the graph otherwise.
The obvious way to try to determine whether or not two vertices v and v(cid:48) are in the same community
is to guess that they are in the same community if |Nr(v) ∩ Nr(v(cid:48))| > d2r/n and different commu-
nities otherwise. Unfortunately  whether or not a vertex is in Nr(v) is not independent of whether
or not it is in Nr(v(cid:48))  which compromises this plan. Instead  we propose to rely on the following
graph-splitting step: Randomly assign every edge in G to some set E with a ﬁxed probability c and
then count the number of edges in E that connect Nr[G\E] and Nr(cid:48)[G\E]. Formally:
Deﬁnition 3. For any v  v(cid:48) ∈ G  r  r(cid:48) ∈ Z  and subset of G’s edges E  let Nr r(cid:48)[E](v · v(cid:48)) be the
number of pairs (v1  v2) such that v1 ∈ Nr[G\E](v)  v2 ∈ Nr(cid:48)[G\E](v(cid:48))  and (v1  v2) ∈ E.
Note that E and G\E are disjoint. However  in SBM(n  p  Q/n)  G is sparse enough that even if
the two graphs were generated independently  a given pair of vertices would have an edge in both
graphs with probability O( 1
Thus  given v  r  and denoting by λ1 = (a + (k − 1)b)/k and λ2 = (a − b)/k the two eigvenvalues
of P Q in the symmetric case  the expected number of intra-community neighbors at depth r from v
1 + (k − 1)λr
2)  whereas the expected number of extra-community neighbors
is approximately 1
2) for each of the other (k − 1) communities. All of
at depth r from v is approximately 1
k (λr
these are scaled by 1 − c if we do the computations in G\E. Using now the emulated independence
between E and G\E  and assuming v and v(cid:48) to be in the same community  the expected number
of edges in E connecting Nr[G\E](v) to Nr(cid:48)[G\E](v(cid:48)) is approximately given by the inner product
1 − λr
ut(c · P Q)u  where u = 1
2) and (P Q) is the matrix with a
(cid:19)r+r(cid:48)+1
on the diagonal and b elsewhere. When v and v(cid:48) are in different communities  the inner product is
between u and a permutation of u. After simpliﬁcations  this gives

n2 ). So  E is approximately independent of G\E.

1 + (k − 1)λr
(cid:34)

(3)
is 1 if v and v(cid:48) are in the same community and 0 otherwise. In order for Nr r(cid:48)[E](v·v(cid:48))
where δσv σv(cid:48)
to depend on the relative communities of v and v(cid:48)  it must be that c(1 − c)r+r(cid:48)| a−b
k |r+r(cid:48)+1k is large
enough  i.e.  more than n  so r + r(cid:48) needs to be at least log n/ log | a−b
k |. A difﬁculty is that for a
speciﬁc pair of vertices  the dr+r(cid:48)+1 term will be multiplied by a random factor dependent on the
degrees of v  v(cid:48)  and the nearby vertices. So  in order to stop the variation in the dr+r(cid:48)+1 term from
− 1) term  it is necessary to cancel out the dominant term.

drowning out the(cid:0) a−b

(cid:1)r+r(cid:48)+1

Nr r(cid:48)[E](v · v(cid:48)) ≈ c(1 − c)r+r(cid:48)

(cid:18) a − b

dr+r(cid:48)+1 +

1 − λr

(kδσv σv(cid:48)

1 − λr

2  λr

2  . . .   λr

− 1)

k (λr

k (λr

(cid:35)

n

k

(kδσv σv(cid:48)

k

This brings us to introduce the following sign-invariant statistics:
Ir r(cid:48)[E](v · v(cid:48)) := Nr+2 r(cid:48)[E](v · v(cid:48)) · Nr r(cid:48)[E](v · v(cid:48)) − N 2
≈ c2(1 − c)2r+2r(cid:48)+2

(cid:19)2 · dr+r(cid:48)+1

(cid:18) a − b

d − a − b

(cid:18)

·

(cid:19)r+r(cid:48)+1
r+1 r(cid:48)[E](v · v(cid:48))

n2

k

k

(kδσv σv(cid:48)

− 1)

In particular  for r + r(cid:48) odd  Ir r(cid:48)[E](v · v(cid:48)) will tend to be positive if v and v(cid:48) are in the same
community and negative otherwise  irrespective of the speciﬁc values of a  b  k. That suggests the
following algorithm for partial recovery  it requires knowledge of δ < 1/k in the constant degree
regime  but not in the regime where a  b scale with n.

4 log n/ log d and put each of the graph’s edges in E with probability 1/10.

1. Set r = r(cid:48) = 3
2. Set kmax = 1/δ and select kmax ln(4kmax) random vertices  v1  ...  vkmax ln(4kmax).
3. Compute Ir r(cid:48)[E](vi · vj) for each i and j.
4. If there is a possible assignment of these vertices to communities such that Ir r(cid:48)[E](vi·vj) >
0 if and only if vi and vj are in the same community  then randomly select one vertex from
each apparent community  v[1]  v[2]  ...v[k(cid:48)]. Otherwise  fail.
the value of Ir r(cid:48)[E](v[i] · v(cid:48)).

5. For every v(cid:48) in the graph  guess that v(cid:48) is in the same community as the v[i] that maximizes

This algorithm succeeds as long as |a − b|/k > (10/9)1/6((a + (k − 1)b)/k)5/6  to ensure that
the above estimates on Nr r(cid:48)[E](v · v(cid:48)) are reliable. Further  if a  b are scaled by α = ω(1)  setting

5

δ = 1/ log log α allows removal of the knowledge requirement on δ. In addition  playing with r  r(cid:48)
to take different allows us to reduce the complexity of the algorithm.
One alternative to our approach could be to count the non-backtracking walks of a given length
between v and v(cid:48)  like in [4 29]  instead of using Nr r(cid:48)[E](v · v(cid:48)). However  proving that the number
of non-backtracking walks is close to its expected value is difﬁcult. Proving that Nr r(cid:48)[E](v · v(cid:48))
is within a desired range is substantially easier because for any v1 and v2  whether or not there is
an edge between v1 and v2 directly effects Nr(v) for at most one value of r. Algorithms based on
shortest path have also been studied in [30].

3.1.2 The general case
In the general case  deﬁne Nr(v)  ¯Nr(v) and Nr r(cid:48)[E](v · v(cid:48)) as in the previous section. Now  for
any v1 ∈ Nr[G/E](v) and v2 ∈ Nr(cid:48)[G/E](v(cid:48))  (v1  v2) ∈ E with a probability of approximately
cQσv1  σv2 /n. As a result 
Nr r(cid:48)[E](v · v(cid:48)) ≈ ¯Nr[G\E](v) · cQ

¯Nr(cid:48)[G\E](v(cid:48)) ≈ ((1 − c)P Q)reσv · cQ

((1 − c)P Q)r(cid:48)eσv(cid:48)

n

n

= c(1 − c)r+r(cid:48)eσv · Q(P Q)r+r(cid:48)eσv(cid:48) /n.

Figure 1: The purple edges represent the edges counted by Nr r(cid:48)[E](v · v(cid:48)).

Let λ1  ...  λh be the distinct eigenvalues of P Q  ordered so that |λ1| ≥ |λ2| ≥ ... ≥ |λh| ≥ 0.
Also deﬁne h(cid:48) so that h(cid:48) = h if λh (cid:54)= 0 and h(cid:48) = h − 1 if λh = 0. If Wi is the eigenspace of P Q
corresponding to the eigenvalue λi  and PWi is the projection operator on to Wi  then

Nr r(cid:48)[E](v · v(cid:48)) ≈ c(1 − c)r+r(cid:48)eσv · Q(P Q)r+r(cid:48)eσv(cid:48) /n

c(1 − c)r+r(cid:48)

=

n

(cid:88)

i

λr+r(cid:48)+1
i

PWi(eσv ) · P −1PWi(eσv(cid:48) )

(4)

(5)

where the ﬁnal equality holds because for all i (cid:54)= j 

λiPWi(eσv ) · P −1PWj (eσv(cid:48) ) = PWi(eσv ) · QPWj (eσv(cid:48) ) = PWi(eσv ) · P −1λjPWj (eσv(cid:48) ) 

and since λi (cid:54)= λj  this implies that PWi (eσv ) · P −1PWj (eσv(cid:48) ) = 0.
Deﬁnition 4. Let ζi(v · v(cid:48)) = PWi(eσv ) · P −1PWi(eσv(cid:48) ) for all i  v  and v(cid:48).
Equation (5) is dominated by the λr+r(cid:48)+1
λr+r(cid:48)+1
h(cid:48)

terms requires cancelling it out somehow. As a start  if λ1 > λ2 > λ3 then
Nr+2 r(cid:48)[E](v · v(cid:48)) · Nr r(cid:48)[E](v · v(cid:48)) − N 2
≈ c2(1 − c)2r+2r(cid:48)+2

r+1 r(cid:48)[E](v · v(cid:48))

2 − 2λ1λ2)λr+r(cid:48)+1

(λ2

1 + λ2

1

1

n2

term  so getting good estimate of the λr+r(cid:48)+1

through

2

λr+r(cid:48)+1
2

ζ1(v · v(cid:48))ζ2(v · v(cid:48))

(cid:12)(cid:12)(cid:12)(cid:12).
(cid:12)(cid:12)(cid:12)(cid:12) Nr r(cid:48)[E](v · v(cid:48)) Nr+1 r(cid:48)[E](v · v(cid:48))

Nr+1 r(cid:48)[E](v · v(cid:48)) Nr+2 r(cid:48)[E](v · v(cid:48))
Note that the left hand side of this expression is equal to det
Deﬁnition 5. Let Mm r r(cid:48)[E](v · v(cid:48)) be the m × m matrix such that Mm r r(cid:48)[E](v · v(cid:48))i j =
Nr+i+j r(cid:48)[E](v · v(cid:48)) for each i and j.

6

ENr[G\E](v)Nr0[G\E](v0)......vv0As shown in [28]  there exists constant γ(λ1  ...  λm) such that

det(Mm r r(cid:48)[E](v · v(cid:48))) ≈ cm(1 − c)m(r+r(cid:48))

nm

γ(λ1  ...  λm)

m(cid:89)

λr+r(cid:48)+1
i

ζi(v · v(cid:48))

(6)

i=1

where we assumed that |λm| > |λm+1| above to simplify the discussion (the case |λm| = |λm+1| is
similar). This suggests the following plan for estimating the eigenvalues corresponding to a graph.
First  pick several vertices at random. Then  use the fact that |Nr[G\E](v)| ≈ ((1 − c)λ1)r for any
good vertex v to estimate λ1. Next  take ratios of (6) for m and m − 1 (with r = r(cid:48))  and look for
the smallest m making that ratio small enough (this will use the estimate on λ1)  estimating h(cid:48) by
this value minus one. Then estimate consecutively all of P Q’s eigenvalues for each selected vertex
using ratios of (6). Finally  take the median of these estimates.
In general  whether |λm| > |λm+1| or |λm| = |λm+1| 
det(Mm r+1 r(cid:48)[E](v · v(cid:48))) − (1 − c)mλm+1
det(Mm−1 r+1 r(cid:48)[E](v · v(cid:48))) − (1 − c)m−1λm
≈ c
n

(cid:81)m−1
(cid:81)m−2
i=1 λi det(Mm r r(cid:48)[E](v · v(cid:48)))
i=1 λi det(Mm−1 r r(cid:48)[E](v · v(cid:48)))

((1 − c)λm)r+r(cid:48)+2ζm(v · v(cid:48)).

λm−1(λm − λm+1)
λm(λm−1 − λm)

γ(λ1  ...  λm)
γ(λ1  ...  λm−1)

n

λr+r(cid:48)+1
i

This fact can be used to approximate ζi(v · v(cid:48)) for arbitrary v  v(cid:48)  and i. Of course  this requires r
ζi(v · v(cid:48)) is large relative to the error terms for all
and r(cid:48) to be large enough that c(1−c)r+r(cid:48)
i ≤ h(cid:48). This requires at least |(1 − c)λi|r+r(cid:48)+1 = ω(n) for all i ≤ h(cid:48). Moreover  for any v and v(cid:48) 
0 ≤ PWi(eσv − eσv(cid:48) ) · P −1PWi(eσv − eσv(cid:48) ) = ζi(v · v) − 2ζi(v · v(cid:48)) + ζi(v(cid:48) · v(cid:48)) with equality for
all i if and only if σv = σv(cid:48)  so sufﬁciently good approximations of ζi(v · v)  ζi(v · v(cid:48)) and ζi(v(cid:48) · v(cid:48))
can be used to determine which pairs of vertices are in the same community.
One could generate a reasonable classiﬁcation based solely on this method of comparing vertices
(with an appropriate choice of the parameters  as later detailed). However  that would require com-
puting Nr r(cid:48)[E](v · v) for every vertex in the graph with fairly large r + r(cid:48)  which would be slow.
Instead  we use the fact that for any vertices v  v(cid:48)  and v(cid:48)(cid:48) with σv = σv(cid:48) (cid:54)= σv(cid:48)(cid:48) 

ζi(v(cid:48) · v(cid:48)) − 2ζi(v · v(cid:48)) + ζi(v · v) = 0 ≤ ζi(v(cid:48)(cid:48) · v(cid:48)(cid:48)) − 2ζi(v · v(cid:48)(cid:48)) + ζi(v · v)

for all i  and the inequality is strict for at least one i. So  subtracting ζi(v · v) from both sides  we
have ζi(v(cid:48) · v(cid:48))− 2ζi(v · v(cid:48)) ≤ ζi(v(cid:48)(cid:48) · v(cid:48)(cid:48))− 2ζi(v · v(cid:48)(cid:48)) for all i  and the inequality is still strict for at
least one i. So  given a representative vertex in each community  we can determine which of them a
given vertex  v  is in the same community as without needing to know the value of ζi(v · v).
This runs fairly quickly if r is large and r(cid:48) is small because the algorithm only requires focusing
on |Nr(cid:48)(v(cid:48))| vertices. This leads to the following plan for partial recovery. First  randomly select
a set of vertices that is large enough to contain at least one vertex from each community with high
probability. Next  compare all of the selected vertices in an attempt to determine which of them are
in the same communities. Then  pick one in each community. Call these anchor nodes. After that 
use the algorithm referred to above to determine which community each of the remaining vertices
is in. As long as there actually was at least one vertex from each community in the initial set and
none of the approximations were particularly bad  this should give a reasonable classiﬁcation. The
risk that this randomly gives a bad classiﬁcation due to a bad set of initial vertices can be mitigated
by repeating the previous classiﬁcation procedure several times as discussed in [28]. This completes
the Agnostic-sphere-comparison algorithm. We refer to [28] for the details.

3.2 Exact recovery and the Agnostic-degree-profiling algorithm

The exact recovery part is similar to [1] and uses the fact that once a good enough clustering has been
obtained from Agnostic-sphere-comparison  the classiﬁcation can be ﬁnished by making
local improvements based on the node’s neighborhoods. Similar techniques have been used in [5 
11  19  31  32]. However  we establish here a sharp characterization of the local procedure error.
The key result is that  when testing between two multivariate Poisson distributions of means
log(n)λ1 and log(n)λ2 respectively  where λ1  λ2 ∈ Zk
+  the probability of error (of maximum

7

a posteriori decoding) is

n−D+(λ1 λ2)+o(1).

(7)
This is proved in [1]. In the case of unknown parameters  the algorithmic approach is largely un-
changed  adding a step where the best known classiﬁcation is used to estimate p and Q prior to any
local improvement step. The analysis of the algorithm requires however some careful handling.
√
First  it is necessary to prove that given a labelling of the graph’s vertices with an error rate of x 
one can compute approximations of p and Q that are within O(x + log(n)/
n) of their true values
with probability 1 − o(1). Secondly  one needs to modify the above hypothesis testing estimates to
control the error probability. In attempting to determine vertices’ communities based on estimates of
p and Q that are off by at most δ  say p(cid:48) and Q(cid:48)  one must show that a classiﬁcation of its neighbors
that has an error rate of δ classiﬁes the vertices with an error rate only eO(δ log n) times higher than
it would be if the parameter really were p(cid:48) and Q(cid:48) and the vertices’ neighbors were all classiﬁed
correctly. Thirdly  one needs to show that since D+((P Q)i  (P Q)j) is differentiable with respect
to any element of P Q  the error rate if the parameters really were p(cid:48) and Q(cid:48) is at worst eO(δ log n)
as high as the error rate with the actual parameters. Combining these yields the conclusion that any
errors in the estimates of the SBM’s parameters do not disrupt vertex classiﬁcation any worse than
the errors in the preliminary classiﬁcations already were.
The Agnostic-degree-profiling algorithm. The inputs are (G  γ)  where G is a graph 
and γ ∈ [0  1] (see [28] for how to set γ speciﬁcally). The algorithm outputs each node’s label.
(1) Deﬁne the graph g(cid:48) on the vertex set [n] by selecting each edge in g independently with proba-
bility γ  and deﬁne the graph g(cid:48)(cid:48) that contains the edges in g that are not in g(cid:48).
(2) Run Agnostic-sphere-comparison on g(cid:48) with δ = 1/ log log(n) to obtain the classiﬁ-
cation σ(cid:48) ∈ [k]n.
(3) Determine the size of all alleged communities  and estimate the edge density among these.
(4) For each node v ∈ [n]  determine the most likely community label of node v based on its degree
proﬁle ¯N1(v) computed from the preliminary classiﬁcation σ(cid:48)  and call it σ(cid:48)(cid:48)v .
(5) Use σ(cid:48)(cid:48)v to get new estimates of p and Q.
(6) For each node v ∈ [n]  determine the most likely community label of node v based on its degree
proﬁle ¯N1(v) computed from σ(cid:48)(cid:48). Output this labelling.
In step (3) and (6)  the most likely label is the one that maximizes the probability that the degree
proﬁle comes from a multivariate distribution of mean ln(n)(P Q)i for i ∈ [k]. Note that this
algorithm does not require a lower bound on min pi because setting δ to a slowly decreasing function
of n results in δ being within an acceptable range for all sufﬁciently large n.

4 Data implementation and open problems

We tested a simpliﬁed version of our algorithm on real data (see [28])  for the blog network of
Adamic and Glance ’05. We obtained an error rate of about 60/1222 (best trial was 57  worst 67) 
achieving the state-of-the-art (as described in [32]). Our extend quite directly to a slowly growing
number of communities (e.g.  up to logarithmic).
It would be interesting to extend the current
approach to smaller sized  watching the complexity scaling  as well as to corrected-degrees  labeled-
edges  or overlapping communities (though our approach already applies to linear-sized overlaps).

Acknowledgments

This research was partly supported by NSF grant CCF-1319299 and the Bell Labs Prize.

References
[1] E. Abbe and C. Sandon. Community detection in general stochastic block models: fundamental limits

and efﬁcient recovery algorithms. arXiv:1503.00609. To appear in FOCS15.  March 2015.

[2] A. Decelle  F. Krzakala  C. Moore  and L. Zdeborov´a. Asymptotic analysis of the stochastic block model

for modular networks and its algorithmic applications. Phys. Rev. E  84:066106  December 2011.

[3] L. Massouli´e. Community detection thresholds and the weak Ramanujan property. In STOC 2014: 46th

Annual Symposium on the Theory of Computing  pages 1–10  New York  United States  June 2014.

8

[4] E. Mossel  J. Neeman  and A. Sly. A proof of the block model threshold conjecture. Available online at

arXiv:1311.4115 [math.PR]  January 2014.

[5] E. Abbe  A. S. Bandeira  and G. Hall. Exact recovery in the stochastic block model. To appear in IEEE

Transactions on Information Theory. Available at ArXiv:1405.3267  May 2014.

[6] E. Mossel  J. Neeman  and A. Sly. Consistency thresholds for binary symmetric block models.

Arxiv:arXiv:1407.1591. To appear in STOC15.  July 2014.

[7] J. Xu Y. Chen. Statistical-computational tradeoffs in planted problems and submatrix localization with a

growing number of clusters and submatrices. arXiv:1402.1267  February 2014.

[8] P. K. Gopalan and D. M. Blei. Efﬁcient discovery of overlapping communities in massive networks.

Proceedings of the National Academy of Sciences  2013.

[9] P. W. Holland  K. Laskey  and S. Leinhardt. Stochastic blockmodels: First steps. Social Networks 

5(2):109–137  1983.

[10] T.N. Bui  S. Chaudhuri  F.T. Leighton  and M. Sipser. Graph bisection algorithms with good average case

behavior. Combinatorica  7(2):171–191  1987.

[11] M.E. Dyer and A.M. Frieze. The solution of some random NP-hard problems in polynomial expected

time. Journal of Algorithms  10(4):451 – 489  1989.

[12] Mark Jerrum and Gregory B. Sorkin. The metropolis algorithm for graph bisection. Discrete Applied

Mathematics  82(13):155 – 175  1998.

[13] A. Condon and R. M. Karp. Algorithms for graph partitioning on the planted partition model. Lecture

Notes in Computer Science  1671:221–232  1999.

[14] T. A. B. Snijders and K. Nowicki. Estimation and Prediction for Stochastic Blockmodels for Graphs with

Latent Block Structure. Journal of Classiﬁcation  14(1):75–100  January 1997.

[15] F. McSherry. Spectral partitioning of random graphs. In Foundations of Computer Science  2001. Pro-

ceedings. 42nd IEEE Symposium on  pages 529–537  2001.

[16] P. J. Bickel and A. Chen. A nonparametric view of network models and newmangirvan and other modu-

larities. Proceedings of the National Academy of Sciences  2009.

[17] K. Rohe  S. Chatterjee  and B. Yu. Spectral clustering and the high-dimensional stochastic blockmodel.

The Annals of Statistics  39(4):1878–1915  08 2011.

[18] D. S. Choi  P. J. Wolfe  and E. M. Airoldi. Stochastic blockmodels with a growing number of classes.

Biometrika  pages 1–12  2012.

[19] V. Vu. A simple svd algorithm for ﬁnding hidden partitions. Available online at arXiv:1404.3918  2014.
[20] J. Xu B. Hajek  Y. Wu. Achieving exact cluster recovery threshold via semideﬁnite programming.

arXiv:1412.6156  November 2014.

[21] A. S. Bandeira. Random laplacian matrices and convex relaxations. arXiv:1504.03987  2015.
[22] S. Yun and A. Proutiere. Accurate community detection in the stochastic block model via spectral algo-

rithms. arXiv:1412.7335  December 2014.

[23] E. Mossel  J. Neeman  and A. Sly. Belief propagation  robust reconstruction  and optimal recovery of

block models. Arxiv:arXiv:1309.1380  2013.

[24] O. Gu´edon and R. Vershynin. Community detection in sparse networks via Grothendieck’s inequality.

ArXiv:1411.4686  November 2014.

[25] P. Chin  A. Rao  and V. Vu. Stochastic block model and community detection in the sparse graphs: A

spectral algorithm with optimal rate of recovery. arXiv:1501.05021  January 2015.

[26] E. Mossel  J. Neeman  and A. Sly. Stochastic block models and reconstruction. Available online at

arXiv:1202.1499 [math.PR]  2012.

[27] C. Borgs  J. Chayes  and A. Smith. Private graphon estimation for sparse graphs. In preparation  2015.
[28] E. Abbe and C. Sandon. Recovering communities in the general stochastic block model without knowing

the parameters. arXiv:1506.03729  June 2015.

[29] C. Bordenave  M. Lelarge  and L. Massouli´e. Non-backtracking spectrum of random graphs: community

detection and non-regular ramanujan graphs. Available at arXiv:1501.06087  2015.

[30] S. Bhattacharyya and P. J. Bickel. Community Detection in Networks using Graph Distance. ArXiv

e-prints  January 2014.

[31] N. Alon and N. Kahale. A spectral technique for coloring random 3-colorable graphs. In SIAM Journal

on Computing  pages 346–355  1994.

[32] A. Y. Zhang H. H. Zhou C. Gao  Z. Ma. Achieving optimal misclassiﬁcation proportion in stochastic

block model. arXiv:1505.03772  2015.

9

,Emmanuel Abbe
Colin Sandon
Xiangyu Wang
David Dunson
Chenlei Leng
Lijun Zhang
Tianbao Yang
Jinfeng Yi
Rong Jin
Zhi-Hua Zhou