2014,Generative Adversarial Nets,We propose a new framework for estimating generative models via adversarial nets  in which we simultaneously train two models: a generative model G that captures the data distribution  and a discriminative model D that estimates the probability that a sample came from the training data rather than G. The training procedure for G is to maximize the probability of D making a mistake. This framework corresponds to a minimax two-player game. In the space of arbitrary functions G and D  a unique solution exists  with G recovering the training data distribution and D equal to 1/2 everywhere. In the case where G and D are defined by multilayer perceptrons  the entire system can be trained with backpropagation. There is no need for any Markov chains or unrolled approximate inference networks during either training or generation of samples. Experiments demonstrate the potential of the framework through qualitative and quantitatively evaluation of the generated samples.,Generative Adversarial Nets

Ian J. Goodfellow∗  Jean Pouget-Abadie†  Mehdi Mirza  Bing Xu  David Warde-Farley 

Universit´e de Montr´eal
Montr´eal  QC H3C 3J7

Sherjil Ozair‡  Aaron Courville  Yoshua Bengio§

D´epartement d’informatique et de recherche op´erationnelle

Abstract

We propose a new framework for estimating generative models via an adversar-
ial process  in which we simultaneously train two models: a generative model G
that captures the data distribution  and a discriminative model D that estimates
the probability that a sample came from the training data rather than G. The train-
ing procedure for G is to maximize the probability of D making a mistake. This
framework corresponds to a minimax two-player game. In the space of arbitrary
functions G and D  a unique solution exists  with G recovering the training data
distribution and D equal to 1
2 everywhere. In the case where G and D are deﬁned
by multilayer perceptrons  the entire system can be trained with backpropagation.
There is no need for any Markov chains or unrolled approximate inference net-
works during either training or generation of samples. Experiments demonstrate
the potential of the framework through qualitative and quantitative evaluation of
the generated samples.

1

Introduction

The promise of deep learning is to discover rich  hierarchical models [2] that represent probability
distributions over the kinds of data encountered in artiﬁcial intelligence applications  such as natural
images  audio waveforms containing speech  and symbols in natural language corpora. So far  the
most striking successes in deep learning have involved discriminative models  usually those that
map a high-dimensional  rich sensory input to a class label [14  20]. These striking successes have
primarily been based on the backpropagation and dropout algorithms  using piecewise linear units
[17  8  9] which have a particularly well-behaved gradient . Deep generative models have had less
of an impact  due to the difﬁculty of approximating many intractable probabilistic computations that
arise in maximum likelihood estimation and related strategies  and due to difﬁculty of leveraging
the beneﬁts of piecewise linear units in the generative context. We propose a new generative model
estimation procedure that sidesteps these difﬁculties. 1
In the proposed adversarial nets framework  the generative model is pitted against an adversary: a
discriminative model that learns to determine whether a sample is from the model distribution or the
data distribution. The generative model can be thought of as analogous to a team of counterfeiters 
trying to produce fake currency and use it without detection  while the discriminative model is
analogous to the police  trying to detect the counterfeit currency. Competition in this game drives
both teams to improve their methods until the counterfeits are indistiguishable from the genuine
articles.

∗Ian Goodfellow is now a research scientist at Google  but did this work earlier as a UdeM student
†Jean Pouget-Abadie did this work while visiting Universit´e de Montr´eal from Ecole Polytechnique.
‡Sherjil Ozair is visiting Universit´e de Montr´eal from Indian Institute of Technology Delhi
§Yoshua Bengio is a CIFAR Senior Fellow.
1All code and hyperparameters available at http://www.github.com/goodfeli/adversarial

1

This framework can yield speciﬁc training algorithms for many kinds of model and optimization
algorithm. In this article  we explore the special case when the generative model generates samples
by passing random noise through a multilayer perceptron  and the discriminative model is also a
multilayer perceptron. We refer to this special case as adversarial nets. In this case  we can train
both models using only the highly successful backpropagation and dropout algorithms [16] and
sample from the generative model using only forward propagation. No approximate inference or
Markov chains are necessary.

2 Related work

Until recently  most work on deep generative models focused on models that provided a parametric
speciﬁcation of a probability distribution function. The model can then be trained by maximiz-
ing the log likelihood. In this family of model  perhaps the most succesful is the deep Boltzmann
machine [25]. Such models generally have intractable likelihood functions and therefore require
numerous approximations to the likelihood gradient. These difﬁculties motivated the development
of “generative machines”–models that do not explicitly represent the likelihood  yet are able to gen-
erate samples from the desired distribution. Generative stochastic networks [4] are an example of
a generative machine that can be trained with exact backpropagation rather than the numerous ap-
proximations required for Boltzmann machines. This work extends the idea of a generative machine
by eliminating the Markov chains used in generative stochastic networks.
Our work backpropagates derivatives through generative processes by using the observation that

∇xE∼N (0 σ2I)f (x + ) = ∇xf (x).

lim
σ→0

We were unaware at the time we developed this work that Kingma and Welling [18] and Rezende
et al. [23] had developed more general stochastic backpropagation rules  allowing one to backprop-
agate through Gaussian distributions with ﬁnite variance  and to backpropagate to the covariance
parameter as well as the mean. These backpropagation rules could allow one to learn the condi-
tional variance of the generator  which we treated as a hyperparameter in this work. Kingma and
Welling [18] and Rezende et al. [23] use stochastic backpropagation to train variational autoen-
coders (VAEs). Like generative adversarial networks  variational autoencoders pair a differentiable
generator network with a second neural network. Unlike generative adversarial networks  the sec-
ond network in a VAE is a recognition model that performs approximate inference. GANs require
differentiation through the visible units  and thus cannot model discrete data  while VAEs require
differentiation through the hidden units  and thus cannot have discrete latent variables. Other VAE-
like approaches exist [12  22] but are less closely related to our method.
Previous work has also taken the approach of using a discriminative criterion to train a generative
model [29  13]. These approaches use criteria that are intractable for deep generative models. These
methods are difﬁcult even to approximate for deep models because they involve ratios of probabili-
ties which cannot be approximated using variational approximations that lower bound the probabil-
ity. Noise-contrastive estimation (NCE) [13] involves training a generative model by learning the
weights that make the model useful for discriminating data from a ﬁxed noise distribution. Using a
previously trained model as the noise distribution allows training a sequence of models of increasing
quality. This can be seen as an informal competition mechanism similar in spirit to the formal com-
petition used in the adversarial networks game. The key limitation of NCE is that its “discriminator”
is deﬁned by the ratio of the probability densities of the noise distribution and the model distribution 
and thus requires the ability to evaluate and backpropagate through both densities.
Some previous work has used the general concept of having two neural networks compete. The most
relevant work is predictability minimization [26]. In predictability minimization  each hidden unit
in a neural network is trained to be different from the output of a second network  which predicts
the value of that hidden unit given the value of all of the other hidden units. This work differs from
predictability minimization in three important ways: 1) in this work  the competition between the
networks is the sole training criterion  and is sufﬁcient on its own to train the network. Predictability
minimization is only a regularizer that encourages the hidden units of a neural network to be sta-
tistically independent while they accomplish some other task; it is not a primary training criterion.
2) The nature of the competition is different. In predictability minimization  two networks’ outputs
are compared  with one network trying to make the outputs similar and the other trying to make the

2

outputs different. The output in question is a single scalar. In GANs  one network produces a rich 
high dimensional vector that is used as the input to another network  and attempts to choose an input
that the other network does not know how to process. 3) The speciﬁcation of the learning process
is different. Predictability minimization is described as an optimization problem with an objective
function to be minimized  and learning approaches the minimum of the objective function. GANs
are based on a minimax game rather than an optimization problem  and have a value function that
one agent seeks to maximize and the other seeks to minimize. The game terminates at a saddle point
that is a minimum with respect to one player’s strategy and a maximum with respect to the other
player’s strategy.
Generative adversarial networks has been sometimes confused with the related concept of “adversar-
ial examples” [28]. Adversarial examples are examples found by using gradient-based optimization
directly on the input to a classiﬁcation network  in order to ﬁnd examples that are similar to the
data yet misclassiﬁed. This is different from the present work because adversarial examples are
not a mechanism for training a generative model. Instead  adversarial examples are primarily an
analysis tool for showing that neural networks behave in intriguing ways  often conﬁdently clas-
sifying two images differently with high conﬁdence even though the difference between them is
imperceptible to a human observer. The existence of such adversarial examples does suggest that
generative adversarial network training could be inefﬁcient  because they show that it is possible to
make modern discriminative networks conﬁdently recognize a class without emulating any of the
human-perceptible attributes of that class.

3 Adversarial nets

The adversarial modeling framework is most straightforward to apply when the models are both
multilayer perceptrons. To learn the generator’s distribution pg over data x  we deﬁne a prior on
input noise variables pz(z)  then represent a mapping to data space as G(z; θg)  where G is a
differentiable function represented by a multilayer perceptron with parameters θg. We also deﬁne a
second multilayer perceptron D(x; θd) that outputs a single scalar. D(x) represents the probability
that x came from the data rather than pg. We train D to maximize the probability of assigning the
correct label to both training examples and samples from G. We simultaneously train G to minimize
log(1 − D(G(z))). In other words  D and G play the following two-player minimax game with
value function V (G  D):

min

G

max

D

V (D  G) = Ex∼pdata(x)[log D(x)] + Ez∼pz(z)[log(1 − D(G(z)))].

(1)

In the next section  we present a theoretical analysis of adversarial nets  essentially showing that
the training criterion allows one to recover the data generating distribution as G and D are given
enough capacity  i.e.  in the non-parametric limit. See Figure 1 for a less formal  more pedagogical
explanation of the approach. In practice  we must implement the game using an iterative  numerical
approach. Optimizing D to completion in the inner loop of training is computationally prohibitive 
and on ﬁnite datasets would result in overﬁtting. Instead  we alternate between k steps of optimizing
D and one step of optimizing G. This results in D being maintained near its optimal solution  so
long as G changes slowly enough. The procedure is formally presented in Algorithm 1.
In practice  equation 1 may not provide sufﬁcient gradient for G to learn well. Early in learning 
when G is poor  D can reject samples with high conﬁdence because they are clearly different from
the training data. In this case  log(1 − D(G(z))) saturates. Rather than training G to minimize
log(1 − D(G(z))) we can train G to maximize log D(G(z)). This objective function results in the
same ﬁxed point of the dynamics of G and D but provides much stronger gradients early in learning.
4 Theoretical Results

The generator G implicitly deﬁnes a probability distribution pg as the distribution of the samples
G(z) obtained when z ∼ pz. Therefore  we would like Algorithm 1 to converge to a good estimator
of pdata  if given enough capacity and training time. The results of this section are done in a non-
parametric setting  e.g. we represent a model with inﬁnite capacity by studying convergence in the
space of probability density functions.
We will show in section 4.1 that this minimax game has a global optimum for pg = pdata. We will
then show in section 4.2 that Algorithm 1 optimizes Eq 1  thus obtaining the desired result.

3

. . .

(a)

(b)

(c)

(d)

Figure 1: Generative adversarial nets are trained by simultaneously updating the discriminative distribution
(D  blue  dashed line) so that it discriminates between samples from the data generating distribution (black 
dotted line) px from those of the generative distribution pg (G) (green  solid line). The lower horizontal line is
the domain from which z is sampled  in this case uniformly. The horizontal line above is part of the domain
of x. The upward arrows show how the mapping x = G(z) imposes the non-uniform distribution pg on
transformed samples. G contracts in regions of high density and expands in regions of low density of pg. (a)
Consider an adversarial pair near convergence: pg is similar to pdata and D is a partially accurate classiﬁer.
(b) In the inner loop of the algorithm D is trained to discriminate samples from data  converging to D∗(x) =
pdata(x)+pg (x) . (c) After an update to G  gradient of D has guided G(z) to ﬂow to regions that are more likely
to be classiﬁed as data. (d) After several steps of training  if G and D have enough capacity  they will reach a
point at which both cannot improve because pg = pdata. The discriminator is unable to differentiate between
2 .
the two distributions  i.e. D(x) = 1

pdata(x)

Algorithm 1 Minibatch stochastic gradient descent training of generative adversarial nets. The number of
steps to apply to the discriminator  k  is a hyperparameter. We used k = 1  the least expensive option  in our
experiments.

for number of training iterations do

for k steps do

• Sample minibatch of m noise samples {z(1)  . . .   z(m)} from noise prior pg(z).
• Sample minibatch of m examples {x(1)  . . .   x(m)} from data generating distribution
pdata(x).
• Update the discriminator by ascending its stochastic gradient:

m(cid:88)

(cid:104)

i=1

∇θd

1
m

(cid:16)

x(i)(cid:17)

(cid:16)

log D

+ log

1 − D

G

(cid:16)

(cid:16)

z(i)(cid:17)(cid:17)(cid:17)(cid:105)

.

end for
• Sample minibatch of m noise samples {z(1)  . . .   z(m)} from noise prior pg(z).
• Update the generator by descending its stochastic gradient:

(cid:16)

m(cid:88)

i=1

∇θg

1
m

1 − D

G

log

(cid:16)

(cid:16)

z(i)(cid:17)(cid:17)(cid:17)

.

end for
The gradient-based updates can use any standard gradient-based learning rule. We used momen-
tum in our experiments.

4.1 Global Optimality of pg = pdata

We ﬁrst consider the optimal discriminator D for any given generator G.
Proposition 1. For G ﬁxed  the optimal discriminator D is

D∗
G(x) =

pdata(x)

pdata(x) + pg(x)

(2)

4

xzXZXZXZ(cid:90)

(cid:90)
(cid:90)

Proof. The training criterion for the discriminator D  given any generator G  is to maximize the
quantity V (G  D)

V (G  D) =

x

pdata(x) log(D(x))dx +
pdata(x) log(D(x)) + pg(x) log(1 − D(x))dx

z

pz(z) log(1 − D(g(z)))dz

=

(3)
For any (a  b) ∈ R2 \ {0  0}  the function y → a log(y) + b log(1 − y) achieves its maximum in
a+b. The discriminator does not need to be deﬁned outside of Supp(pdata) ∪ Supp(pg) 
[0  1] at
concluding the proof.

x

a

Note that the training objective for D can be interpreted as maximizing the log-likelihood for es-
timating the conditional probability P (Y = y|x)  where Y indicates whether x comes from pdata
(with y = 1) or from pg (with y = 0). The minimax game in Eq. 1 can now be reformulated as:

C(G) = max

D

V (G  D)
=Ex∼pdata[log D∗
=Ex∼pdata[log D∗
=Ex∼pdata

(cid:20)

log

G(x)] + Ez∼pz [log(1 − D∗
G(x)] + Ex∼pg [log(1 − D∗
+ Ex∼pg

pdata(x)

(cid:21)

Pdata(x) + pg(x)

(cid:20)

G(G(z)))]
G(x))]

log

pdata(x) + pg(x)

(4)

(cid:21)

pg(x)

Theorem 1. The global minimum of the virtual training criterion C(G) is achieved if and only if
pg = pdata. At that point  C(G) achieves the value − log 4.
Proof. For pg = pdata  D∗
ﬁnd C(G) = log 1
2 + log 1
only for pg = pdata  observe that

2  we
G(x) = 1
2 = − log 4. To see that this is the best possible value of C(G)  reached
Ex∼pdata [− log 2] + Ex∼pg [− log 2] = − log 4
(cid:18)

2  (consider Eq. 2). Hence  by inspecting Eq. 4 at D∗

and that by subtracting this expression from C(G) = V (D∗

G  G)  we obtain:

G(x) = 1

(cid:19)

(cid:18)

(cid:19)

C(G) = − log(4) + KL

pdata

+ KL

pg

(5)

(cid:13)(cid:13)(cid:13)(cid:13) pdata + pg

2

(cid:13)(cid:13)(cid:13)(cid:13) pdata + pg

2

where KL is the Kullback–Leibler divergence. We recognize in the previous expression the Jensen–
Shannon divergence between the model’s distribution and the data generating process:

C(G) = − log(4) + 2 · JSD (pdata (cid:107)pg )

(6)
Since the Jensen–Shannon divergence between two distributions is always non-negative  and zero
iff they are equal  we have shown that C∗ = − log(4) is the global minimum of C(G) and that the
only solution is pg = pdata  i.e.  the generative model perfectly replicating the data distribution.

4.2 Convergence of Algorithm 1

Proposition 2. If G and D have enough capacity  and at each step of Algorithm 1  the discriminator
is allowed to reach its optimum given G  and pg is updated so as to improve the criterion

Ex∼pdata[log D∗

G(x)] + Ex∼pg [log(1 − D∗

G(x))]

then pg converges to pdata

Proof. Consider V (G  D) = U (pg  D) as a function of pg as done in the above criterion. Note
that U (pg  D) is convex in pg. The subderivatives of a supremum of convex functions include the
derivative of the function at the point where the maximum is attained. In other words  if f (x) =
supα∈A fα(x) and fα(x) is convex in x for every α  then ∂fβ(x) ∈ ∂f if β = arg supα∈A fα(x).
This is equivalent to computing a gradient descent update for pg at the optimal D given the cor-
responding G. supD U (pg  D) is convex in pg with a unique global optima as proven in Thm 1 
therefore with sufﬁciently small updates of pg  pg converges to px  concluding the proof.
In practice  adversarial nets represent a limited family of pg distributions via the function G(z; θg) 
and we optimize θg rather than pg itself  so the proofs do not apply. However  the excellent perfor-
mance of multilayer perceptrons in practice suggests that they are a reasonable model to use despite
their lack of theoretical guarantees.

5

Model
DBN [3]

Stacked CAE [3]
Deep GSN [5]
Adversarial nets

MNIST
138 ± 2
121 ± 1.6
214 ± 1.1
225 ± 2

TFD

1909 ± 66
2110 ± 50
1890 ± 29
2057 ± 26

Table 1: Parzen window-based log-likelihood estimates. The reported numbers on MNIST are the mean log-
likelihood of samples on test set  with the standard error of the mean computed across examples. On TFD  we
computed the standard error across folds of the dataset  with a different σ chosen using the validation set of
each fold. On TFD  σ was cross validated on each fold and mean log-likelihood on each fold were computed.
For MNIST we compare against other models of the real-valued (rather than binary) version of dataset.

5 Experiments

We trained adversarial nets an a range of datasets including MNIST[21]  the Toronto Face Database
(TFD) [27]  and CIFAR-10 [19]. The generator nets used a mixture of rectiﬁer linear activations [17 
8] and sigmoid activations  while the discriminator net used maxout [9] activations. Dropout [16]
was applied in training the discriminator net. While our theoretical framework permits the use of
dropout and other noise at intermediate layers of the generator  we used noise as the input to only
the bottommost layer of the generator network.
We estimate probability of the test set data under pg by ﬁtting a Gaussian Parzen window to the
samples generated with G and reporting the log-likelihood under this distribution. The σ parameter
of the Gaussians was obtained by cross validation on the validation set. This procedure was intro-
duced in Breuleux et al. [7] and used for various generative models for which the exact likelihood
is not tractable [24  3  4]. Results are reported in Table 1. This method of estimating the likelihood
has somewhat high variance and does not perform well in high dimensional spaces but it is the best
method available to our knowledge. Advances in generative models that can sample but not estimate
likelihood directly motivate further research into how to evaluate such models. In Figures 2 and 3
we show samples drawn from the generator net after training. While we make no claim that these
samples are better than samples generated by existing methods  we believe that these samples are at
least competitive with the better generative models in the literature and highlight the potential of the
adversarial framework.

6 Advantages and disadvantages

This new framework comes with advantages and disadvantages relative to previous modeling frame-
works. The disadvantages are primarily that there is no explicit representation of pg(x)  and that D
must be synchronized well with G during training (in particular  G must not be trained too much
without updating D  in order to avoid “the Helvetica scenario” in which G collapses too many values
of z to the same value of x to have enough diversity to model pdata)  much as the negative chains of a
Boltzmann machine must be kept up to date between learning steps. The advantages are that Markov
chains are never needed  only backprop is used to obtain gradients  no inference is needed during
learning  and a wide variety of functions can be incorporated into the model. Table 2 summarizes
the comparison of generative adversarial nets with other generative modeling approaches.
The aforementioned advantages are primarily computational. Adversarial models may also gain
some statistical advantage from the generator network not being updated directly with data exam-
ples  but only with gradients ﬂowing through the discriminator. This means that components of the
input are not copied directly into the generator’s parameters. Another advantage of adversarial net-
works is that they can represent very sharp  even degenerate distributions  while methods based on
Markov chains require that the distribution be somewhat blurry in order for the chains to be able to
mix between modes.

7 Conclusions and future work

This framework admits many straightforward extensions:

6

a)

c)

b)

d)

Figure 2: Visualization of samples from the model. Rightmost column shows the nearest training example of
the neighboring sample  in order to demonstrate that the model has not memorized the training set. Samples
are fair random draws  not cherry-picked. Unlike most other visualizations of deep generative models  these
images show actual samples from the model distributions  not conditional means given samples of hidden units.
Moreover  these samples are uncorrelated because the sampling process does not depend on Markov chain
mixing. a) MNIST b) TFD c) CIFAR-10 (fully connected model) d) CIFAR-10 (convolutional discriminator
and “deconvolutional” generator)

Figure 3: Digits obtained by linearly interpolating between coordinates in z space of the full model.

1. A conditional generative model p(x | c) can be obtained by adding c as input to both G and D.
2. Learned approximate inference can be performed by training an auxiliary network to predict z
given x. This is similar to the inference net trained by the wake-sleep algorithm [15] but with
the advantage that the inference net may be trained for a ﬁxed generator net after the generator
net has ﬁnished training.
3. One can approximately model all conditionals p(xS | x(cid:54)S) where S is a subset of the indices
of x by training a family of conditional models that share parameters. Essentially  one can use
adversarial nets to implement a stochastic extension of the deterministic MP-DBM [10].

4. Semi-supervised learning: features from the discriminator or inference net could improve perfor-

mance of classiﬁers when limited labeled data is available.

5. Efﬁciency improvements: training could be accelerated greatly by devising better methods for

coordinating G and D or determining better distributions to sample z from during training.

This paper has demonstrated the viability of the adversarial modeling framework  suggesting that
these research directions could prove useful.

7

Deep directed
graphical models

Training

Inference needed
during training.

Inference

Sampling

Learned
approximate
inference
No difﬁculties

Deep undirected
graphical models
Inference needed
during training.
MCMC needed to
approximate
partition function
gradient.
Variational
inference
Requires Markov
chain

Evaluating p(x)

Intractable  may be
approximated with
AIS

Intractable  may be
approximated with
AIS

Generative
autoencoders
Enforced tradeoff
between mixing
and power of
reconstruction
generation

MCMC-based
inference
Requires Markov
chain
Not explicitly
represented  may be
approximated with
Parzen density
estimation

Adversarial models

Synchronizing the
discriminator with
the generator.
Helvetica.

Learned
approximate
inference
No difﬁculties
Not explicitly
represented  may be
approximated with
Parzen density
estimation

Model design

Models need to be
designed to work
with the desired
inference scheme
— some inference
schemes support
similar model
families as GANs

Careful design
needed to ensure
multiple properties

Any differentiable
function is
theoretically
permitted

Any differentiable
function is
theoretically
permitted

Table 2: Challenges in generative modeling: a summary of the difﬁculties encountered by different approaches
to deep generative modeling for each of the major operations involving a model.

Acknowledgments

We would like to acknowledge Patrice Marcotte  Olivier Delalleau  Kyunghyun Cho  Guillaume
Alain and Jason Yosinski for helpful discussions. Yann Dauphin shared his Parzen window eval-
uation code with us. We would like to thank the developers of Pylearn2 [11] and Theano [6  1] 
particularly Fr´ed´eric Bastien who rushed a Theano feature speciﬁcally to beneﬁt this project. Ar-
naud Bergeron provided much-needed support with LATEX typesetting. We would also like to thank
CIFAR  and Canada Research Chairs for funding  and Compute Canada  and Calcul Qu´ebec for
providing computational resources. Ian Goodfellow is supported by the 2013 Google Fellowship in
Deep Learning. Finally  we would like to thank Les Trois Brasseurs for stimulating our creativity.

References
[1] Bastien  F.  Lamblin  P.  Pascanu  R.  Bergstra  J.  Goodfellow  I. J.  Bergeron  A.  Bouchard  N.  and
Bengio  Y. (2012). Theano: new features and speed improvements. Deep Learning and Unsupervised
Feature Learning NIPS 2012 Workshop.

[2] Bengio  Y. (2009). Learning deep architectures for AI. Now Publishers.
[3] Bengio  Y.  Mesnil  G.  Dauphin  Y.  and Rifai  S. (2013). Better mixing via deep representations.

ICML’13.

In

[4] Bengio  Y.  Thibodeau-Laufer  E.  and Yosinski  J. (2014a). Deep generative stochastic networks trainable

by backprop. In ICML’14.

[5] Bengio  Y.  Thibodeau-Laufer  E.  Alain  G.  and Yosinski  J. (2014b). Deep generative stochastic net-
works trainable by backprop. In Proceedings of the 30th International Conference on Machine Learning
(ICML’14).

[6] Bergstra  J.  Breuleux  O.  Bastien  F.  Lamblin  P.  Pascanu  R.  Desjardins  G.  Turian  J.  Warde-Farley 
In Proceedings of the

D.  and Bengio  Y. (2010). Theano: a CPU and GPU math expression compiler.
Python for Scientiﬁc Computing Conference (SciPy). Oral Presentation.

[7] Breuleux  O.  Bengio  Y.  and Vincent  P. (2011). Quickly generating representative samples from an

RBM-derived process. Neural Computation  23(8)  2053–2073.

[8] Glorot  X.  Bordes  A.  and Bengio  Y. (2011). Deep sparse rectiﬁer neural networks. In AISTATS’2011.

8

[9] Goodfellow  I. J.  Warde-Farley  D.  Mirza  M.  Courville  A.  and Bengio  Y. (2013a). Maxout networks.

In ICML’2013.

[10] Goodfellow  I. J.  Mirza  M.  Courville  A.  and Bengio  Y. (2013b). Multi-prediction deep Boltzmann

machines. In NIPS’2013.

[11] Goodfellow  I. J.  Warde-Farley  D.  Lamblin  P.  Dumoulin  V.  Mirza  M.  Pascanu  R.  Bergstra 
J.  Bastien  F.  and Bengio  Y. (2013c). Pylearn2: a machine learning research library. arXiv preprint
arXiv:1308.4214.

[12] Gregor  K.  Danihelka  I.  Mnih  A.  Blundell  C.  and Wierstra  D. (2014). Deep autoregressive networks.

In ICML’2014.

[13] Gutmann  M. and Hyvarinen  A. (2010). Noise-contrastive estimation: A new estimation principle for
unnormalized statistical models. In Proceedings of The Thirteenth International Conference on Artiﬁcial
Intelligence and Statistics (AISTATS’10).

[14] Hinton  G.  Deng  L.  Dahl  G. E.  Mohamed  A.  Jaitly  N.  Senior  A.  Vanhoucke  V.  Nguyen  P. 
Sainath  T.  and Kingsbury  B. (2012a). Deep neural networks for acoustic modeling in speech recognition.
IEEE Signal Processing Magazine  29(6)  82–97.

[15] Hinton  G. E.  Dayan  P.  Frey  B. J.  and Neal  R. M. (1995). The wake-sleep algorithm for unsupervised

neural networks. Science  268  1558–1161.

[16] Hinton  G. E.  Srivastava  N.  Krizhevsky  A.  Sutskever  I.  and Salakhutdinov  R. (2012b). Improving

neural networks by preventing co-adaptation of feature detectors. Technical report  arXiv:1207.0580.

[17] Jarrett  K.  Kavukcuoglu  K.  Ranzato  M.  and LeCun  Y. (2009). What is the best multi-stage architecture
for object recognition? In Proc. International Conference on Computer Vision (ICCV’09)  pages 2146–2153.
IEEE.

[18] Kingma  D. P. and Welling  M. (2014). Auto-encoding variational bayes. In Proceedings of the Interna-

tional Conference on Learning Representations (ICLR).

[19] Krizhevsky  A. and Hinton  G. (2009). Learning multiple layers of features from tiny images. Technical

report  University of Toronto.

[20] Krizhevsky  A.  Sutskever  I.  and Hinton  G. (2012). ImageNet classiﬁcation with deep convolutional

neural networks. In NIPS’2012.

[21] LeCun  Y.  Bottou  L.  Bengio  Y.  and Haffner  P. (1998). Gradient-based learning applied to document

recognition. Proceedings of the IEEE  86(11)  2278–2324.

[22] Mnih  A. and Gregor  K. (2014). Neural variational inference and learning in belief networks. Technical

report  arXiv preprint arXiv:1402.0030.

[23] Rezende  D. J.  Mohamed  S.  and Wierstra  D. (2014). Stochastic backpropagation and approximate

inference in deep generative models. Technical report  arXiv:1401.4082.

[24] Rifai  S.  Bengio  Y.  Dauphin  Y.  and Vincent  P. (2012). A generative process for sampling contractive

auto-encoders. In ICML’12.

[25] Salakhutdinov  R. and Hinton  G. E. (2009). Deep Boltzmann machines. In AISTATS’2009  pages 448–

455.

[26] Schmidhuber  J. (1992). Learning factorial codes by predictability minimization. Neural Computation 

4(6)  863–879.

[27] Susskind  J.  Anderson  A.  and Hinton  G. E. (2010). The Toronto face dataset. Technical Report UTML

TR 2010-001  U. Toronto.

[28] Szegedy  C.  Zaremba  W.  Sutskever  I.  Bruna  J.  Erhan  D.  Goodfellow  I. J.  and Fergus  R. (2014).

Intriguing properties of neural networks. ICLR  abs/1312.6199.

[29] Tu  Z. (2007). Learning generative models via discriminative approaches. In Computer Vision and Pattern

Recognition  2007. CVPR’07. IEEE Conference on  pages 1–8. IEEE.

9

,Ian Goodfellow
Jean Pouget-Abadie
Mehdi Mirza
Bing Xu
David Warde-Farley
Sherjil Ozair
Aaron Courville
Yoshua Bengio
Adrian Rivera Cardoso
He Wang
Huan Xu