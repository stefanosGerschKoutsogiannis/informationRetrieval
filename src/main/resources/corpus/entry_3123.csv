2017,Learning to Inpaint for Image Compression,We study the design of deep architectures for lossy image compression. We present two architectural recipes in the context of multi-stage progressive encoders  and empirically demonstrate their importance on compression performance. Specifically  we show that: 1) predicting the original image data from residuals in a multi-stage progressive architecture facilitates learning and leads to improved performance at approximating the original content and 2) learning to inpaint (from neighboring image pixels) before performing compression reduces the amount of information that must be stored to achieve a high-quality approximation. Incorporating these design choices in a baseline progressive encoder yields an average reduction of over 60% in file size with similar quality compared to the original residual encoder.,Learning to Inpaint for Image Compression

Mohammad Haris Baig∗

Department of Computer Science

Dartmouth College

Hanover  NH

Vladlen Koltun

Intel Labs

Santa Clara  CA

Lorenzo Torresani
Dartmouth College

Hanover  NH

Abstract

We study the design of deep architectures for lossy image compression. We present
two architectural recipes in the context of multi-stage progressive encoders and em-
pirically demonstrate their importance on compression performance. Speciﬁcally 
we show that: (a) predicting the original image data from residuals in a multi-stage
progressive architecture facilitates learning and leads to improved performance at
approximating the original content and (b) learning to inpaint (from neighboring
image pixels) before performing compression reduces the amount of information
that must be stored to achieve a high-quality approximation. Incorporating these
design choices in a baseline progressive encoder yields an average reduction of over
60% in ﬁle size with similar quality compared to the original residual encoder.

1

Introduction

Visual data constitutes most of the total information created and shared on the Web every day and it
forms a bulk of the demand for storage and network bandwidth [13]. It is customary to compress
image data as much as possible as long as there is no perceptible loss in content. In recent years
deep learning has made it possible to design deep models for learning compact representations for
image data [2  16  18  19  20]. Deep learning based approaches  such as the work of Rippel and
Bourdev [16]  signiﬁcantly outperform traditional methods of lossy image compression. In this paper 
we show how to improve the performance of deep models trained for lossy image compression.
We focus on the design of models that produce progressive codes. Progressive codes are a sequence
of representations that can be transmitted to improve the quality of an existing estimate (from a
previously sent code) by adding missing detail. This is in contrast to non-progressive codes whereby
the entire data for a certain quality approximation must be transmitted before the image can be viewed.
Progressive codes improve the user’s browsing experience by reducing loading time of pages that are
rich in images. Our main contributions in this paper are two-fold.

1. While traditional progressive encoders are optimized to compress residual errors in each
stage of their architecture (residual-in  residual-out)  instead we propose a model that is
trained to predict at each stage the original image data from the residual of the previous
stage (residual-in  image-out). We demonstrate that this leads to an easier optimization
resulting in better image compression. The resulting architecture reduces the amount of
information that must be stored for reproducing images at similar quality by 18% compared
to a traditional residual encoder.

2. Existing deep architectures do not exploit the high degree of spatial coherence exhibited by
neighboring patches. We show how to design and train a model that can exploit dependences
between adjacent regions by learning to inpaint from the available content. We introduce
multi-scale convolutions that sample content at multiple scales to assist with inpainting.

∗http://www.cs.dartmouth.edu/ haris/compression

31st Conference on Neural Information Processing Systems (NIPS 2017)  Long Beach  CA  USA.

We jointly train our proposed inpainting and compression models and show that inpainting
reduces the amount of information that must be stored by an additional 42%.

2 Approach

We begin by reviewing the architecture and the learning objective of a progressive multi-stage encoder-
decoder with S stages. We adopt the convolutional-deconvolutional residual encoder proposed by
Toderici et al. [19] as our reference model. The model extracts a compact binary representation B
from an image patch P . This binary representation  used to reconstruct an approximation of the
original patch  consists of the sequence of representations extracted by the S stages of the model 
B = [B1  B2  . . . BS].
The ﬁrst stage of the model extracts a binary code B1 from the input patch P . Each of the subse-
quent stages learns to extract representations Bs  to model the compressions residuals Rs−1 from
the previous stage. The compression residuals Rs are deﬁned as Rs = Rs−1 − Ms(Rs−1|Θs) 
where Ms(Rs−1|Θs) represents the reconstruction obtained by the stage s when modelling the
residuals Rs−1. The model at each stage is split into an encoder Bs = Es(Rs−1|ΘE
s ) and a decoder
Ds(Bs|ΘD
s ) and Θs = {ΘE
s }. The param-
s   ΘD
eters for the sth stage of the model are denoted by Θs. The residual encoder-decoder is trained on a
dataset P  consisting of N image patches  according to the following objective:

s ) such that Ms(Rs−1|Θs) = Ds(Es(Rs−1|ΘE

s )|ΘD

ˆL(P; Θ1:S) =

(cid:107)R(i)

s−1 − Ms(R(i)

s−1|Θs)(cid:107)2

2.

(1)

s=1

i=1

represents the compression residual for the ith patch P (i) after stage s and R(i)

R(i)
s
Residual encoders are difﬁcult to optimize as gradients have to traverse long paths from later stages to
affect change in the previous stages. When moving along longer paths  gradients tend to decrease in
magnitude as they get to earlier stages. We address this shortcoming of residual encoders by studying
a class of architectures we refer to as “Residual-to-Image” (R2I).

0 = P (i).

2.1 Residual-to-Image (R2I)

To address the issue of vanishing gradients we add connections between subsequent stages and restate
the loss to predict the original data at the end of each stage  thus performing residual-to-image
prediction. This leads to the new objective shown below:

S(cid:88)

N(cid:88)

S(cid:88)

N(cid:88)

L(P; Θ1:S) =

(cid:107)P (i) − Ms(R(i)

s−1|Θs)(cid:107)2

2.

(2)

s=1

i=1

Stage s of this model takes as input the compression residuals Rs−1 computed with respect to the
original data  Rs−1 = P − Ms−1(Rs−2|Θs−1)  and Ms−1(Rs−2|Θs−1) now approximates the
reconstruction of the original data P at stage s − 1. To allow complete image reconstructions to
be produced at each stage while only feeding in residuals  we introduce connections between the
layers of adjacent stages. These connections allow for later stages to incorporate information that has
been recovered by earlier stages into their estimate of the original image data. Consequently  these
connections (between subsequent stages) allow for better optimization of the model.
In addition to assisting with modeling the original image  these connections play two key roles. Firstly 
these connections create residual blocks [10] which encourage explicit learning of how to reproduce
information which could not be generated by the previous stage. Secondly  these connections reduce
the length of the path along which information has to travel from later stages to impact the earlier
stages  leading to a better joint optimization.
This leads us to the question of where should such connections be introduced and how should
information be propagated? We consider two types of connections to propagate information between
successive stages. 1) Prediction connections are analogous to the identity shortcuts introduced by
He et al. [10] for residual learning. They act as parameter-free additive connections: the output of

2

Figure 1: Multiple approaches for introducing connections between successive stages. These designs
for progressive architectures allow for varying degrees of information to be shared. Architecture
(b-d) do not reconstruct residuals  but the original data at every stage. We call these architectures
“residual-to-image” (R2I).

each stage is produced by simply adding together the residual predictions of the current stage and all
preceding stages (see Figure 1(b)) before applying a ﬁnal non-linearity.2) Parametric connections
are referred to as projection shortcuts by He et al. [10]. Here we use them to connect corresponding
layers in two consecutive stages of the compression model. The features of each layer from the
previous stage are convolved with learned ﬁlters before being added to the features of the same
layer in the current stage. A non-linearity is then applied on top. The prediction connections only
yield the beneﬁt of creating residual blocks  albeit very large and thus difﬁcult to optimize. In
contrast  parametric connections allow for the intermediate representations from previous stages to
be passed to the subsequent stages. They also create a denser connectivity pattern with gradients
now moving along corresponding layers in adjacent stages. We consider two variants of parametric
connections: “full” which use parametric connections between all the layers in two successive stages
(see Figure 1(c))  and “decoding” connections which link only corresponding decoding layers (i.e. 
there are no connections between encoding layers of adjacent stages). We note that the LSTM-based
model of Toderici et al. [20] represents a particular instance of R2I network with full connections.
In Section 3 we demonstrate that R2I models with decoding connections outperform those with full
connections and provide an intuitive explanation for this result.

2.2

Inpainting Network

Image compression architectures learn to encode and decode an image patch-by-patch. Encoding all
patches independently assumes that the regions contain truly independent content. This assumption
generally does not hold true when the patches being encoded are contiguous. We observe that the
content of adjacent image patches is not independent. We propose a new module for the compression
model designed to exploit the spatial coherence between neighboring patches. We achieve this goal
by training a model with the objective of predicting the content of each patch from information
available in the neighboring regions.
Deep models for inpainting  such as the one proposed by Pathak et al. [14]  are trained to predict
the values of pixels in the region ˆW from a context region ˆC (as shown in Figure 2). As there
is data present all around the region to be inpainted this imposes strong constraints on what the
inpainted region should look like. We consider the scenario where images are encoded and decoded
block-by-block moving from left to right and going from top to bottom (similar to how traditional
codecs process images [1  21]). Now  at decoding time only content above and to the left of each
patch will have been reconstructed (see Figure 2(a)). This gives rise to the problem of “partial-context
inpainting”. We propose a model that  given an input region C  attempts to predict the content of
the current patch P . We denote by ˆP the dataset which contains all the patches from the dataset P

3

ResidualsDecoder layerEncoder layerResidual PredictionParametrized connectionAdditive connection10BinarizerInformation ﬂowa) Residual encoder 1010100010101001Data01010001d) Decoding connections1010100001010001c) Full connections1010100001010001b) Prediction connections10101000+Residual to Image (R2I) ModelsData PredictionFigure 2: (a) The two kinds of inpainting problems. (b) A multi-scale convolutional layer with 3
dilation factors. The colored boxes represent pixels from which the content is sampled.

and the respective context regions C for each patch. The loss function used to train our inpainting
network is:

Linp( ˆP; ΘI ) =

N(cid:88)

i=1

(cid:107)P (i) − MI (C (i)|ΘI )(cid:107)2

2.

(3)

The output of the inpainting network is denoted by MI (C (i)|ΘI )  where ΘI refers to the parameters
of the inpainting network.

2.2.1 Architecture of the Partial-Context Inpainting Network

Our inpainting network has a feed-forward architecture which propagates information from the
context region C to the region being inpainted  P . To improve the ability of our model at predicting
content  we use a multi-scale convolutional layer as the basic building block of our inpainting network.
We make use of the dilated convolutions described by Yu and Koltun [23] to allow for sampling
at various scales. Each multi-scale convolutional layer is composed of k ﬁlters for each dilation
factor being considered. Varying the dilation factor of ﬁlters gives us the ability to analyze content
at various scales. This structure of ﬁlters provides two beneﬁts. First  it allows for a substantially
denser and more diverse sampling of data from context and second it allows for better propagation of
content at different spatial scales. A similarly designed layer was also used by Chen et al. [5] for
sampling content at multiple scales for semantic segmentation. Figure 2(b) shows the structure of a
multi-scale convolutional layer.
The multi-scale convolutional layer also gives us the freedom to propagate content at full resolution
(no striding or pooling) as only a few multi-scale layers sufﬁce to cover the entire region. This allows
us to train a relatively shallow yet highly expressive architecture which can propagate ﬁne-grained
information that might otherwise be lost due to sub-sampling. This light-weight and efﬁcient design
is needed to allow for joint training with a multi-stage compression model.

2.2.2 Connecting the Inpainting Network with the R2I Compression model

Next  we describe how to use the prediction of the inpainting network for assisting with compression.
Whereas the inpainting network learns to predict the data as accurately as possible  we note that
this is not sufﬁcient to achieve good performance on compression  where it is also necessary that
the “inpainting residuals” be easy to compress. We describe the inpainting residuals as R0 =
P − MI (C|ΘI )  where MI (C|ΘI ) denotes the inpainting estimate. As we wanted to train our
model to always predict the data  we add the inpainting estimate to the ﬁnal prediction of each stage
of our compression model. This allows us to (a) produce the original content at each stage and (b) to

4

(a) Variations of the inpainting problemPartial-context InpaintingCFull-context InpaintingˆCContent available for inpaintingRegion to inpaintˆPP(b) Multi-scale convolutional layerdiscover an inpainting that is beneﬁcial for all stages of the model because of joint training. We now
train our complete model as

LC( ˆP; ΘI   Θ1:S) = Linp( ˆP; ΘI ) +

N(cid:88)

S(cid:88)

i=1

s=1

(cid:107)P (i) − [Ms(R(i)

s−1|Θs) + MI (C (i)|ΘI )] (cid:107)2

2.

(4)

In this new objective LC  the ﬁrst term Linp corresponds to the original inpainting loss  R(i)
0
corresponds to the inpainting residual for example i. We note that each stage of this inpainting-based
progressive coder directly affects what is learned by the inpainting network. We refer to the model
trained with this joint objective as “Inpainting for Residual-to-Image Compression” (IR2I).
Whereas we train our model to perform inpainting from the original image content  we use a lossy
approximation of the context region C when encoding images with IR2I. This is done because at
decoding time our model does not have access to the original image data. We use the approximation
from stage 2 of our model for performing inpainting at encoding and decoding time  and transmit
the binary codes for the ﬁrst two stages as a larger ﬁrst code. This strategy allows us to leverage
inpainting while performing progressive image compression.

2.3

Implementation Details

Our models were trained on 6 507 images from the ImageNet dataset [7]  as proposed by Ballé et
al. [2] to train their single-stage encoder-decoder architectures. A full description of the R2I models
and the inpainting network is provided in the supplementary material. We use the Caffe library [11]
to train our models. The residual encoder and R2I models were trained for 60 000 iterations whereas
the joint inpainting network was trained for 110 000 iterations. We used the Adam optimizer [12]
for training our models and the MSRA initialization [9] for initializing all stages. We used initial
learning rates of 0.001 and the learning rate was dropped after 30K and 45K for the R2I models.
For the IR2I model  the learning rate was dropped after 30K  65K  and 90K iterations by a factor of
10 each time. All of our models were trained to reproduce the content of 32 × 32 image patches.
Each of our models has 8 stages  with each stage contributing 0.125 bits-per-pixel (bpp) to the total
representation of a patch. Our models handle binary optimization by employing the biased estimators
approach proposed by Raiko et al. [15] as was done by Toderici et al. [19  20].
Our inpainting network has 8 multi-scale convolutional layers for content propagation and one
standard convolutional layer for performing the ﬁnal prediction. Each multi-scale convolutional
layer consists of 24 ﬁlters each for dilation factors 1  2  4  8. Our inpainting network takes as input a
context region C of size 64 × 64  where the bottom right 32 × 32 region is zeroed out and represents
the region to be inpainted.

3 Results

We investigate the improvement brought about by the presented techniques. We are interested in
studying the reduction in bit-rate  for varying quality of reconstruction  achieved after adaptation
from the residual encoder proposed by Toderici et al. [19]. To evaluate performance  we perform
compression with our models on images from the Kodak dataset [8]. The dataset consists of 24
uncompressed color images of size 512 × 768. The quality is measured according to the MS-
SSIM [22] metric (higher values indicate better quality). We use the Bjontegaard-Delta metric [4] to
compute the average reduction in bit-rate across all quality settings.

3.1 R2I - Design and Performance

The table in Figure 3(a) shows the percentage reduction in bit-rate achieved by the three variations of
the Residual-to-Image models. As can be seen  adding side-connections and training for the more
desirable objective (i.e.  approximating the original data) at each stage helps each of our models.
That said  having connections in the decoder only helps more compared to using a “full” connection
approach or only sharing the ﬁnal prediction.

5

Approach
R2I Prediction
R2I Full
R2I Decoding

Rate Savings (%)
SSIM MS-SSIM

5.177
7.652
17.951

4.483
10.015
20.002

(a)

Figure 3: (a) Average rate savings for each of the three R2I variants compared to the residual encoder
proposed by Toderici et al. [19]. (b) Figure shows the quality of images produced by each of the three
R2I variants across a range of bit-rates.

(b)

Figure 4: The R2I training loss from 3 different stages (start  middle  end) viewed as a function
of iterations for the “full” and the “decoding” connections models. We note that the decoding
connections model converges faster  to a lower value  and shows less variance.

The model which shares only the prediction between stages performs poorly in comparison to the
other two designs as it does not allow for features from earlier stages to be altered as efﬁciently as
done by the full or decoding connections architectures.
The model with decoding connections does better than the architecture with full connections because
for the model with connections at decoding only the binarization layer in each stage extracts a
representation from the relevant information only (the residuals with respect to the data). In contrast 
when connections are established in both the encoder and the decoder  the binary representation may
include information that has been captured by a previous stage  thereby adding burden on each stage
in identifying information pertinent to improving reconstruction  leading to a tougher optimization.
Figure 4 shows that the model with full connections struggles to minimize the training error compared
to the model with decoding connections. This difference in training error points to the fact that
connections in the encoder make it harder for the model to do well at training time. This difﬁculty of
optimization ampliﬁes with the increase in stages as can be seen by the difference between the full
and decoding architecture performance (shown in Figure 3(b)) because the residuals become harder
to compress.
We note that R2I models signiﬁcantly improve the quality of reconstruction at higher bit rates but do
not improve the estimates at lower bit-rates as much (see Figure 3(b)). This tells us that the overall
performance can be improved by focusing on approaches that yield a signiﬁcant improvement at
lower bit-rates  such as inpainting  which is analyzed next.

6

0.10.20.30.40.50.60.70.80.91681012141618BitRateMS−SSIM (dB) Residual EncoderR2I Prediction connectionR2I Full connectionsR2I Decoding connections0.511.522.533.544.555.5601020304050IterationsTraining Loss (MSE) Enc−DecDec−only0.511.522.533.544.555.56050100150200IterationsTraining Loss (MSE) Enc−DecDec−only0.511.522.533.544.555.5601020304050IterationsTraining Loss (MSE) Enc−DecDec−onlyIterationsIterations (x104)Iterationsa) Stage 1b) Stage 4c) Stage 8R2I full connections R2I decoding connectionsApproach
R2I Decoding
R2I Decoding Sep-Inp
R2I Decoding Joint-Inp

Rate Savings (%)
SSIM MS-SSIM

20.002
27.379
63.353

17.951
27.794
60.446

(a) Impact of inpainting on the performance
at compression. All bit-rate savings are re-
ported with respect to the residual encoder
by Toderici et al. [19]

Figure 5: (a) Average rate savings with varying forms of inpainting. (b) The quality of images with
each of our proposed approaches at varying bit-rates.

(b)

3.2

Impact of Inpainting

We begin analyzing the performance of the inpainting network and other approaches on partial-context
inpainting. We compare the performance of the inpainting network with both traditional approaches
as well as a learning-based baseline. Table 1 shows the average SSIM achieved by each approach for
inpainting all non-overlapping patches in the Kodak dataset.

Approach

PDE-based

Exemplar-based

Learning-based

SSIM

[3]

0.4574

[6]

0.4611

Vanilla network

Inpainting network

0.4545

0.5165

Table 1: Average SSIM for partial-context inpainting on the Kodak dataset [8]. The vanilla model is
a feed-forward CNN with no multi-scale convolutions.

The vanilla network corresponds to a 32-layer (4 times as deep as the inpainting network) model that
does not use multi-scale convolutions (all ﬁlters have a dilation factor of 1)  has the same number of
parameters  and also operates at full resolution (as our inpainting network). This points to the fact that
the improvement in performance of the inpainting network over the vanilla model is a consequence of
using multi-scale convolutions. The inpainting network improves over traditional approaches because
our model learns the best strategy for propagating content as opposed to using hand-engineered
principles of content propagation. The low performance of the vanilla network shows that learning
by itself is not superior to traditional approaches and multi-scale convolutions play a key role in
achieving better performance.
Whereas inpainting provides an initial estimate of the content within the region it by no means
generates a perfect reconstruction. This leads us to the question of whether this initial estimate
is better than not having an estimate? The table in Figure 5(a) shows the performance on the
compression task with and without inpainting. These results show that the greatest reduction in ﬁle
size is achieved when the inpainting network is jointly trained with the R2I model. We note (from
Figure 5(b)) that inpainting greatly improves the quality of results obtained at lower and at higher bit
rates.
The baseline where the inpainting network is trained separately from the compression network
is presented here to emphasize the role of joint training. Traditional codecs [1] use simple non
learning-based inpainting approaches and their predeﬁned methods of representing data are unable to
compactly encode the inpainting residuals. Learning to inpaint separately improves the performance

7

0.20.30.40.50.60.70.80.919101112131415161718BitRateMS−SSIM (dB) Residual EncoderR2I−Decoding Sep−InpR2I−Decoding Joint−Inpas the inpainted estimate is better than not having any estimate. But given that the compression model
has not been trained to optimize the compression residuals the reduction in bit-rate for achieving high
quality levels is low. We show that with joint training  we can not only train a model that does better
inpainting but also ensure that the inpainting residuals can be represented compactly.

3.3 Comparison with Existing Approaches

Table 2 shows a comparison of the performance of various approaches compared to JPEG [21] in the
0.125 to 1 bits-per-pixel (bpp) range. We select this range as images from our models towards the
end of this range show no perceptible artifacts of compression.
The ﬁrst part of the table evaluates the performance of learning-based progressive approaches. We
note that our proposed model outperforms the multi-stage residual encoder proposed by Toderici
et al. [19] (trained on the same 6.5K dataset) by 17.9% and IR2I outperforms the residual encoder
by reducing ﬁle-sizes by 60.4%. The residual-GRU  while similar in architecture to our “full”
connections model  does not do better even when trained on a dataset that is 1000 times bigger and
for 10 times more training time. The results shown here do not make use of entropy coding as the
goal of this work is to study how to improve the performance of deep networks for progressive image
compression and entropy coding makes it harder to understand where the performance improvements
are coming from. As various approaches use different entropy coding methods  this further obfuscates
the source of the improvements.
The second part of the table shows the performance of existing codecs. Existing codecs use entropy
coding and rate-distortion optimization. We note that even without using either of these powerful
post processing techniques  our ﬁnal “IR2I” model is competitive with traditional methods for
compression  which use both of these techniques. A comparison with recent non-progressive
approaches [2  18]  which also use these post-processing techniques for image compression  is
provided in the supplementary material.

Approach

Number of

Training Images

Progressive Rate Savings

(%)

Residual Encoder [19]
Residual-GRU [20]
R2I (Decoding connections)
IR2I
JPEG-2000 [17]
WebP [1]

6.5K
6M
6.5K
6.5K
N/A
N/A

Yes
Yes
Yes
Yes
No
No

2.56
33.26
18.53
51.25
63.01
64.98

Table 2: Average rate savings compared to JPEG [21]. The savings are computed on the Kodak [8]
dataset with rate-distortion proﬁles measuring MS-SSIM in the 0-1 bpp range.

We observe that a naive implementation of IR2I creates a linear dependence in content (as all regions
used as context have to be decoded before being used for inpainting) and thus may be substantially
slower. In practice  this slowdown would be negligible as one can use a diagonal scan pattern (similar
to traditional codecs) for ensuring high parallelism thereby reducing run times. Furthermore  we
perform inpainting using predictions from the ﬁrst step only. Therefore  the dependence only exists
when generating the ﬁrst progressive code. For all subsequent stages  there is no dependence in
content  and our approach is comparable in run time to similar approaches.

4 Conclusion and Future Work

We study a class of “Residual to Image” models and show that within this class  architectures which
have decoding connections perform better at approximating image data compared to designs with
other forms of connectivity. We observe that our R2I decoding connections model struggles at low
bit-rates and we show how to exploit spatial coherence between content of adjacent patches via
inpainting to improve performance at approximating image content at low bit-rates. We design a new

8

model for partial-context inpainting using multi-scale convolutions and show that the best way to
leverage inpainting is by jointly training the inpainting network with our R2I Decoding model.
One interesting extension of this work would be to incorporate entropy coding within our progressive
compression framework to train models that produce binary codes which have low-entropy and can
be represented even more compactly. Another possible direction would be to extend our proposed
framework to video data  where the gains from our discovery of recipes for improving compression
may be even greater.

5 Acknowledgements

This work was funded in part by Intel Labs and NSF award CNS-120552. We gratefully acknowledge
NVIDIA and Facebook for the donation of GPUs used for portions of this work. We would like to
thank George Toderici  Nick Johnston  Johannes Balle for providing us with information needed for
accurate assessment. We are grateful to members of the Visual Computing Lab at Intel Labs  and
members of the Visual Learning Group at Dartmouth College for their feedback.

References
[1] WebP a new image format for the web. https://developers.google.com/speed/webp/.

Accessed: 2017-04-29.

[2] Johannes Ballé  Valero Laparra  and Eero P Simoncelli. End-to-end optimized image compres-

sion. In ICLR  2017.

[3] Marcelo Bertalmio  Guillermo Sapiro  Vincent Caselles  and Coloma Ballester. Image inpainting.
In Proceedings of the 27th annual conference on Computer graphics and interactive techniques 
pages 417–424. ACM Press/Addison-Wesley Publishing Co.  2000.

[4] Gisle Bjontegaard. Improvements of the bd-psnr model. In ITU-T SC16/Q6  35th VCEG

Meeting  Berlin  Germany  July 2008  2008.

[5] Liang-Chieh Chen  George Papandreou  Iasonas Kokkinos  Kevin Murphy  and Alan L Yuille.
Deeplab: Semantic image segmentation with deep convolutional nets  atrous convolution  and
fully connected crfs. arXiv preprint arXiv:1606.00915  2016.

[6] Antonio Criminisi  Patrick Pérez  and Kentaro Toyama. Region ﬁlling and object removal by
exemplar-based image inpainting. IEEE Transactions on image processing  13(9):1200–1212 
2004.

[7] Jia Deng  Wei Dong  Richard Socher  Li-Jia Li  Kai Li  and Li Fei-Fei. Imagenet: A large-scale
hierarchical image database. In Computer Vision and Pattern Recognition  2009. CVPR 2009.
IEEE Conference on  pages 248–255. IEEE  2009.

[8] Eastman Kodak Company. Kodak lossless true color image suite  1999. http://r0k.us/

graphics/kodak/.

[9] Kaiming He  Xiangyu Zhang  Shaoqing Ren  and Jian Sun. Delving deep into rectiﬁers:
Surpassing human-level performance on imagenet classiﬁcation. In Proceedings of the IEEE
international conference on computer vision  pages 1026–1034  2015.

[10] Kaiming He  Xiangyu Zhang  Shaoqing Ren  and Jian Sun. Deep residual learning for im-
age recognition. In Proceedings of the IEEE Conference on Computer Vision and Pattern
Recognition  pages 770–778  2016.

[11] Yangqing Jia  Evan Shelhamer  Jeff Donahue  Sergey Karayev  Jonathan Long  Ross Girshick 
Sergio Guadarrama  and Trevor Darrell. Caffe: Convolutional architecture for fast feature
embedding. arXiv preprint arXiv:1408.5093  2014.

[12] Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR 

2014.

9

[13] Mary Meeker. Internet Trends Report 2016. KPCB  2016.

[14] Deepak Pathak  Philipp Krahenbuhl  Jeff Donahue  Trevor Darrell  and Alexei A Efros. Context
encoders: Feature learning by inpainting. In Proceedings of the IEEE Conference on Computer
Vision and Pattern Recognition  pages 2536–2544  2016.

[15] Tapani Raiko  Mathias Berglund  Guillaume Alain  and Laurent Dinh. Techniques for learning

binary stochastic feedforward neural networks. In ICLR  2015.

[16] Oren Rippel and Lubomir Bourdev. Real-time adaptive image compression. In International

Conference on Machine Learning  2017.

[17] Athanassios Skodras  Charilaos Christopoulos  and Touradj Ebrahimi. The jpeg 2000 still image

compression standard. IEEE Signal processing magazine  18(5):36–58  2001.

[18] L. Theis  W. Shi  A. Cunningham  and F. Huszár. Lossy image compression with compressive

autoencoders. In ICLR  2017.

[19] George Toderici  Sean M. O’Malley  Sung Jin Hwang  Damien Vincent  David Minnen  Shumeet
Baluja  Michele Covell  and Rahul Sukthankar. Variable rate image compression with recurrent
neural networks. In ICLR  2016.

[20] George Toderici  Damien Vincent  Nick Johnston  Sung Jin Hwang  David Minnen  Joel Shor 
and Michele Covell. Full resolution image compression with recurrent neural networks. arXiv
preprint arXiv:1608.05148  2016.

[21] Gregory K. Wallace. The JPEG still picture compression standard. Communications of the

ACM  34(4)  1991.

[22] Zhou Wang  Eero P Simoncelli  and Alan C Bovik. Multiscale structural similarity for image
In Signals  Systems and Computers  2004. Conference Record of the

quality assessment.
Thirty-Seventh Asilomar Conference on  volume 2  pages 1398–1402. IEEE  2003.

[23] Fisher Yu and Vladlen Koltun. Multi-scale context aggregation by dilated convolutions. In

ICLR  2016.

10

,Mohammad Haris Baig
Vladlen Koltun
Lorenzo Torresani