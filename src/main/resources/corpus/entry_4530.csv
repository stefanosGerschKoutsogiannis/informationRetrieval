2019,REM: From Structural Entropy to Community Structure Deception,This paper focuses on the privacy risks of disclosing the community structure in an online social network. By exploiting the community affiliations of user accounts  an attacker may infer sensitive user attributes. This raises the problem of community structure deception (CSD)  which asks for ways to minimally modify the network so that a given community structure maximally hides itself from community detection algorithms. We investigate CSD through an information-theoretic lens. To this end  we propose a community-based structural entropy to express the amount of information revealed by a community structure. This notion allows us to devise residual entropy minimization (REM) as an efficient procedure to solve CSD. Experimental results over 9 real-world networks and 6 community detection algorithms show that REM is very effective in obfuscating the community structure as compared to other benchmark methods.,REM: From Structural Entropy To Community

Structure Deception

Yiwei Liu1 2  Jiamou Liu3  Zijian Zhang1 3  Liehuang Zhu1∗  Angsheng Li4

1School of Computer Science & Technology  Beijing Institute of Technology  Beijing 100081  China

2Institute of Cyberspace Research  Zhejiang University  Zhejiang 310027  China

3School of Computer Science  The University of Auckland  Auckland 1142  New Zealand

4School of Computer Science  Beihang University  Beijing 100083  China

{yiweiliu  zhangzijian  liehuangz}@bit.edu.cn  jiamou.liu@auckland.ac.nz  angsheng@buaa.edu.cn

Abstract

This paper focuses on the privacy risks of disclosing the community structure
in an online social network. By exploiting the community afﬁliations of user
accounts  an attacker may infer sensitive user attributes. This raises the problem of
community structure deception (CSD)  which asks for ways to minimally modify
the network so that a given community structure maximally hides itself from
community detection algorithms. We investigate CSD through an information-
theoretic lens. To this end  we propose a community-based structural entropy to
express the amount of information revealed by a community structure. This notion
allows us to devise residual entropy minimization (REM) as an efﬁcient procedure
to solve CSD. Experimental results over 9 real-world networks and 6 community
detection algorithms show that REM is very effective in obfuscating the community
structure as compared to other benchmark methods.

1

Introduction

Social networking sites facilitate effective communication through the means of Web feeds  discussion
groups  timelines and more. Such a platform is characterized by a structure that consists of user
accounts and their links. Discovering hidden patterns in this network structure is a compelling
application of graph data mining algorithms. In particular  community detection stands out as one of
the most important graph mining methods [11  16  23  26]. Communities emerge as people naturally
bond with those within the same working environment  family  or those who share similar tastes 
interests and political viewpoints. By exploiting users’ community afﬁliations  an attacker may infer
certain personal – and sometimes sensitive – features of the users in a social network. For example 
when the attacker has some background information asserting that several members of a community
all work for the same organization. It is easy in this case to infer that other members of the same
community also have ties with the organization. [29] showed that information about the community
memberships of a user (i.e.  the groups of a social network to which a user belongs) is sufﬁcient to
uniquely identify this person  or  at least  to signiﬁcantly reduce the set of possible candidates. In
[25]  communities are used to re-identify multiple addresses belonging to a same user in Bitcoin
trading networks. Therefore  there is a need to hide the community afﬁliations in order to preserve
the privacy of online users.
This paper addresses the privacy risks due to community detection. Our goal is to minimally modify
the network structure so that the community afﬁliations maximally hide themselves from community
∗is a professor in the School of Computer Science and Technology  Beijing Institute of Technology. He is
selected into the Program for New Century Excellent Talents in University from Ministry of Education  China.
His research interests include Internet of things  cloud computing security  and blockchain.

33rd Conference on Neural Information Processing Systems (NeurIPS 2019)  Vancouver  Canada.

detection algorithms. Despite growing interests on the privacy issues of social networks  very few
works exist that target for community-level anonymization over a social network. Developing effective
means for this problem faces numerous challenges: The ﬁrst is the lack of a formal and universally-
agreeable deﬁnition of communities. It is thus difﬁcult to propose notions such as k-anonymity that
are based on counting substructures and are independent from the community detection algorithms
[32]. The second is the diversity of techniques used for community detection. An attacker may use
many methods to identify communities in a network which makes it impossible to pinpoint a single
objective metric that guides the deception of communities. The third is the desire to obfuscate not
just a single community  but rather multiple communities or even all communities in the network. As
opposed to existing work e.g. [28  10] which focus on the deception of a single targeted community 
we are interested in nullifying the community detection algorithms so that they are ineffective to
identify any original communities in the obfuscated network.
This paper studies the community structure deception problem (CSD) that seeks a way to obfuscate
a given community structure of a network through adding a ﬁxed number of edges. (1) To solve
this problem  we propose an information-theoretic perspective to this problem. This involves
deﬁning community-based structural entropy that captures the amount of information revealed by the
community structure of a social network. (2) We propose a method to effectively nullify community
detection algorithms based on the principle of residual entropy minimization (REM). REM clearly
outperforms other schemes with the same goal which include a benchmark based on modularity
minimization. (3) Our work derives new insights regarding structural entropy of a graph. These
insights enable highly efﬁcient implementation of our algorithm. (4) We experimentally validate the
performance of our algorithm over 9 real-world networks and 6 community detection algorithms.

Related work. [2] showed that simply removing user identity is not sufﬁcient to protect their
privacy in an online social network. [31] systematically examined privacy threats in the online
space. Efforts have been made to mitigate such risks on an individual level  i.e.  identity leak
[18  13  21  33  30  7  19]  user attribute leak [5]  social link disclosure [18  13  21  33  5]  etc.
Common structural obfuscation techniques include adding/removing edges  adding random noise 
and contracting edges/nodes.
Community structure represents a way to partition vertices of a complex network into dense subgraphs
that are sparsely connected among each other [11]. Many community detection algorithms exist  e.g. 
Louvain method that utilizes modularity is commonly used [3]. Recent years  several works that
address the problem of hiding a given community in a network have emerged. E.g. [20] aimed to
hide a community by adding edges. They only considered a modularity-based community detection
algorithm. [28  10] studied this problem by rewiring edges.
Quantifying structural information is an important challenge in information theory. [24] proposed
the ﬁrst entropy measure for graphs. This is followed by several other notions such as parametric
graph entropy [8]  Gibbs entropy [1]  Shannon entropy and Von Neumann entropy [4]. All of these
measures are simply the Shannon entropy applied to different types of distributions. Based on the
idea of random walks  the entropy deﬁned in [26] determines the average number of bits per step by
using the ergodic node visit frequencies on a network. After that  [17] deﬁned the structure entropy
of a graph as the minimum numbers of bits to encode the vertex that is accessible from a step of
random walk. In this paper  we follow these ideas and utilize similar notions for community structure
deception.

2 Problem Formulation

We model a social network as an undirected connected graph G = (V  E)  where V is a set of
vertices which represent user accounts and E is a set of edges of the form {u  v}⊆ V (u (cid:54)= v) which
represent social ties. The volume of any U ⊆ V is the sum of the degrees dv of all v ∈ U. The
community structure of G refers to a partition P of V . More formally  P is an equivalence relation
over the set of vertices V whose equivalence classes are called communities. If i and j in the same
community  we write (i  j) ∈ P. We assume that the input to our problem consists of a social network
G and a community structure P to be obfuscated. This community structure P is characterized by
high internal density and low external density. For convenience  we sometimes abuse the notation
representing P also as the collection of its equivalence classes {X1  X2  . . .   XL} where L ∈ N
and each Xi is a community; νi denotes the volume of Xi and gi denotes the number of edges with

2

exactly one end point in Xi. The following hypothesis lays down the fundamental assumption of the
community deception problem:
Hypothesis 1 (Community deception hypothesis). The disclosure of the community structure P of a
graph G = (V  E) leads to privacy leak and should be avoided.

Given G = (V  E)  a community detector F is a procedure that reveals an equivalence relation F (G)
over V to resemble the ground truth community structure P. Hypothesis 1 asserts the necessity of
distorting the network data G  so that no community detector F will truthfully report the original
community structure P. In this paper  we focus on network distortions as a result of adding a number
of “dummy edges” between unconnected vertices in the network.
Deﬁnition 1. For G = (V  E) and a set E(cid:48)  an edge expansion is a graph G⊕E(cid:48) := (V  E∪E(cid:48)).2
Given G = (V  E) and a community structure P on G  a community structure deceptor produces an
edge expansion G(cid:48) of G so that any community detection algorithm F is nulliﬁed on G(cid:48). The precise
deﬁnition relies on what it means for the algorithm F to be “nulliﬁed on G(cid:48)”. Several narratives
exist for this phrase. Suppose P(cid:48) is the community structure F (G(cid:48)) output by F . The ﬁrst narrative
asserts that P(cid:48) is dissimilar with P. The second asserts that very little information is revealed about
P from P(cid:48). The third states that F is ineffective in answering same-community queries.
Narrative 1: Partition similarity. One may apply a standard set-based metric  Jaccard index  to
compare P and P(cid:48): Set J(P P(cid:48)) := |P ∩ P(cid:48)|/|P ∪ P(cid:48)| (treating P and P(cid:48) as relations); We adopt
J(P P(cid:48)) for its simplicity and correlation with other measures  e.g.  transfer distance of P & P(cid:48) [9].
A good community structure deceptor should return P(cid:48) with small J(P P(cid:48)).
Narrative 2: Mutual information. Normalized mutual information (NMI) measures the amount of
common information between two random variables. Take community structures P = {X1  . . .   Xp}
and P(cid:48) = {X(cid:48)

H(P) = − p(cid:88)

q}. Deﬁne
1  . . .   X(cid:48)
|Xi|
|Xi|
|V | log

|V |   and H(P|P(cid:48)) = − p(cid:88)

q(cid:88)

i=1

j=1

i=1

|Xi ∩ X(cid:48)
j|

|V |

log

|Xi ∩ X(cid:48)

j|/|V |

|X(cid:48)

j|/|V |

.

I(P P(cid:48))

Mutual information is then deﬁned as I(P P(cid:48)) := H(P)− H(P|P(cid:48)). NMI is thus D(P P(cid:48)) =
max{H(P) H(P(cid:48))} [14]. D satisﬁes both the normalization and the metric properties  and utilizes the
range [0  1] well [27]. A community structure deceptor should return P(cid:48) with small D(P P(cid:48)).
Narrative 3: Query accuracy. One may imagine that the community detection algorithm F
facilitates an adversary who aims to perform same-community queries about user accounts. This
query returns true for any distinct i  j ∈ V if (i  j) ∈ P(cid:48) and false otherwise. The recall of this query
is

R(P P(cid:48)) =

|{(i  j) ∈ P | i (cid:54)= j  (i  j) ∈ P(cid:48)}|

|{(i  j) ∈ P | i (cid:54)= j}|

.

A procedure that returns true for any pair of vertices (i  j) with probability 1/2 has an expected recall
of 50%. Hence F can be considered nulliﬁed when R(P P(cid:48)) ≤ 50%.
The community structure deception (CSD) problem is deﬁned as demanding a community structure
deceptor for a given network G with its community structure P. Furthermore  the deceptor should
add a bounded budget k ∈ N of edges to G in the hope to get the best deception effect. One initial
idea to solve CSD is to ﬁx a community detector F and S ∈ {J  D  R}  and to solve the problem

minimize S(P  F (G ⊕ E(cid:48)))

subject to |E(cid:48)| ≤ k.

There are several reasons why this would not be a good approach: (1) The functions J  D and R all
depend on the output of the algorithm F ; however the CSD problem demands the obfuscation of the
community structure P regardless of how communities are detected. (2) Choosing any one of J  D
and R leads only to optimizing a single criterion. (3) Solving the optimization problem may require
examining all k-tuples of potential edges which leads to prohibitive time cost.
A more reasonable approach is to identify a uniform criterion which is independent of how communi-
ties are detected. One natural candidate for such a metric is modularity. Modularity of P measures

2If E(cid:48) is {e}  we abuse the notation writing G ⊕ e for G ⊕ {e}.

3

the difference between the density of its communities and the expected density of a null model [22]:

MP (G) =

.

(1)

Modularity maximization has been a widely-used principle for community detection. In general  a
large max MP (G) implies the existence of a prominent community structure in G. To obfuscate the
community structure  it thus makes sense – at least in principle – to minimize the modularity MP (G).
Deﬁnition 2. A modularity minimizing (MOM) deceptor is an algorithm that outputs an edge e such
that the modularity MP (G ⊕ e) is minimized.
In actual fact  however  MOM deceptor is not a good choice for CSD : Firstly  it is not hard to prove
that  the MOM deceptor will always try to create edges between two communities Xi  Xj in P with
the largest combined volume νi + νj. Therefore k edges created by iterations of MOM will most
likely affect only two communities  and the obfuscated network will not hide P effectively. Secondly 
modularity’s signiﬁcance primarily lies in identifying the most prominent community structure  i.e. 
the one that maximizes modularity. The MOM deceptor  on the other hand  concerns with modularity
of a given partition P which may not be modularity maximizing. Thirdly  modularity sometimes fails
for its purpose since a random graph – a structure that does not exhibit a clear community structure –
may also have partitions with large modularity [12]. These limitations calls for a new method for
CSD.

3 REM: Residual Entropy-based CSD

To derive a solution for CSD that is independent of the community detector  it makes sense to inquire
the information content of a community structure P in G. Imagine G as a network where vertices
are able to pass messages through edges. The delivery of a message from a sender u to a receiver v 
where {u  v} ∈ E  is named a call. Intuitively  a call is one directed ﬂow of message. Therefore an
undirected edge {u  v} allows messages to be passed in both directions. Now imagine  to explore G 
an exogenous process continuously collects such calls uniformly at random. This differs from the
random walk in [26] where the receiver of a call is the sender of the next call. Hence  at any moment 
the probability that v is a call’s receiver is dv/(2|E|). We are interested in an encoding of vertices of
the network based on this probability distribution [17].
Deﬁnition 3. Structural entropy H(G) captures the average number of bits needed to encode
the receivers of the calls in a lossless way: H(G) equals Shannon’s entropy of the distribution
(di/2|E|)i∈V   i.e. 

(cid:34)

L(cid:88)

i=1

(cid:19)2(cid:35)

(cid:18) νi

2|E|

νi − gi
2|E| −

|V |(cid:88)

i=1

H(G) := −

di
2|E| log2

di
2|E| .

(2)

di
νj

− log2

2|E| = − log2

di

H(G) merely expresses the average information of a call in G without assuming any community
structure. Now assume the presence of P = {X1  X2  . . .   XL}. The structural information of a
community Xj consists of two levels: (a) looking from a vertex level  the information of any vertex
i ∈ Xj as a receiver of messages  and (b) looking from a community level  the information of the
entire community Xj as a receiver of messages. These two levels of meanings can be reﬂected in
(2) through the equation − log2
νj
2|E|. The ﬁrst term above is the average
numbers of bits necessary to describe i in Xj and the second term is the average numbers of bits
to describe the community Xj. We once again assume an exogenous process that continuously
collects calls between vertices in G u.a.r.  but with the following difference: Since we are given
the community structure P = {X1  X2  . . .   XL}  we can omit the community level codeword if
the sender u and receiver v belong to the same community. Thus  when encoding a vertex i ∈ Xj 
just like above  we encode i at the vertex level as − log2
and then encode Xj at the community
level as − log2
2|E|. For (a)  the information for all vertices in Xj as receivers is H(G (cid:22)Xj ) with
the probability νj
. For (b)  the information for Xj as
i∈Xj
a receiver is − log2
2|E| since in this case we only consider calls whose
senders are not in Xj. The expected information gives us the following structural entropy measure
[17]:

2|E|  where H(G (cid:22)Xj ) := −(cid:80)

|2E| with the probability gj

di
νj

log2

di
νj

di
νj

νj

νi

4

Deﬁnition 4. The structural entropy of G relative to P is

(cid:20) νj
2|E|H(cid:0)G (cid:22)Xj

L(cid:88)

j=1

(cid:1) − gj

2|E| log2

(cid:21)

νj
2|E|

(3)

HP (G) :=

Note that H(G) = HP (G) when P is either the trivial partition that puts all vertices in the same
community  or the partition where each community is a singleton. We thus view both H(G) and
HP (G) as expressing states of the community structure. H(G) expresses the entropy of G in a basic
“reference partition”  and HP reﬂects the effect of enforcing partition P on G. Their difference thus
measures the gained amount of certainty as the communities in P take shape.
Deﬁnition 5. The normalized residual entropy of P is

ρP (G) := (H(G) − HP (G))/H(G).

(4)
In principle  a smaller ρP (G) means that P contains less information about G and thus is harder to
detect. To hide the communities in P  it thus makes sense to reduce the residual entropy through
modifying the network structure.
Deﬁnition 6. A residual entropy minimizing (REM) deceptor is an algorithm that outputs an edge e
such that the normalized residual entropy ρP (G ⊕ e) is minimized.
A crude implementation of an REM deceptor examines each potential edge e that is missing from the
current graph and compares ρP (G ⊕ e). This implementation runs in Ω(|V |2) time  rendering itself
inapplicable for large graphs. We instead present an O(L|V |)-implementation where L is the number
of communities X1  . . .   XL in P. This is a much more efﬁcient implementation assuming L (cid:28) |V |.
Take s  t ∈ {1  . . .   L}. A non-edge is a pair {u  v} /∈ E with (u  v) ∈ Xs×Xt; the volume of this
non-edge is du +dv. Assume Xs×Xt contains a non-edge. Let δs t be the smallest degree of any
vertex v∈ Xs∪Xt that is in a non-edge. Let βs t be the smallest volume of any non-edge {u  v} with
min{du  dv} = δs t. A non-edge {u  v} is called critical if its volume d ≤ βs t and min{du  dv} is
the smallest among all non-edges with volume d. Algorithm 1 presents our REM deceptor from the
following lemmas.

Algorithm 1: An efﬁcient REM deceptor
Input: Graph G = (V  E)  P = {X1  X2  . . .   XL}
Output: A non-edge {u∗  v∗}
1 Initialize ρ∗ ← 1;
2 for s ← 1 to L and t ← s to L do
3
4

if Xs×Xt contains no non-edge then
for all critical non-edge {u  v} in Xs × Xt do

Set ρ∗ ← ρu v   u∗ ← u   and v∗ ← v;

continue;
Set ρu v ← (H(G ⊕ {u  v}) − HP (G ⊕ {u  v}))/H(G ⊕ {u  v});
if ρu v < ρ∗ then

5
6
7
8
9 return {u∗  v∗};
Lemma 1. For non-edges {u  v} {x  y}  min{du  dv} ≤ min{dx  dy} and du + dv ≤ dx + dy
implies that H(G ⊕ {u  v}) ≥ H(G ⊕ {x  y}).
Proof. Deﬁne the function F : R → R by F (x) = (x+1) log2(x+1)−x log2(x)
function F is monotonic  as F (cid:48)(x) = log2(x+1)−log2(x)
−
2 ln 2·(|E|+1)(x+1)x < 0. Moreover  the following hold:

. We remark that the
> 0  and is convex for x > 0  as F (cid:48)(cid:48)(x) =

2(|E|+1)

2(|E|+1)

1

∀u  v  w ∈ V : H(G ⊕ {u  v}) − H(G ⊕ {u  w}) = F (dw) − F (dv) 
∀u  v  x  y ∈ V : H(G ⊕ {u  v})−H(G ⊕ {x  y})

= (H(G ⊕ {u  v})−H(G ⊕ {v  y})) +(H(G ⊕ {v  y})−H(G ⊕ {x  y}))
= (F (dy) − F (dv)) + (F (dx) − F (du))

and thus

(5)

5

Assume w.l.o.g. dv ≤ du  dy ≤ dx and dv ≤ dy. If du ≤ dx  then by (5) and monotonicity of F  
we have H(G ⊕ {u  v}) ≥ H(G ⊕ {x  y}). Now suppose dx < du. Then dv < dy ≤ dx < du. By
Lagrange’s mean value theorem  there exist dx < ξ < du and dv < ζ < dy such that

F (du)−F (dx)

F (dy)−F (dv)

 

= F (cid:48)(ξ) < F (cid:48)(ζ) =

dy−dv

du−dx

(6)
where the inequality is due to convexity of F . Since du − dx ≤ dy − dv  we have F (du) − F (dx) <
F (dy) − F (dv). The lemma then follows from (5).
Lemma 2. For any two communities Xi  Xj in P  any non-edges e1  e2 whose endpoints link Xi
and Xj  we have H(G ⊕ e1) − HP (G ⊕ e1) = H(G ⊕ e2) − HP (G ⊕ e2).
Proof. Deﬁne distributions Y ∼ ( ν1
  . . .   c1 L
ci j = di if i∈ Xj  and ci j = 0 otherwise. The entropy of the joint probability is
νL

2|E| ) and Z ∼ ( c1 1

2|E|   . . .   νL

  . . .   cn L
νL

  . . .   cn 1
ν1

) where

ν1

H(Y  Z) = − n(cid:88)

di
2|E| log2

di

2|E| = H(G)

By (7) and the chain rule (see e.g.[6]) 

i=1

H(Y  Z) = H(Z|Y ) + H(Y ) =

=

(cid:20) νj
L(cid:88)
2|E|H(cid:0)G (cid:22)Xj
H(G) − HP (G) = − L(cid:88)

j=1

The following can then be obtained from (3):

νj

L(cid:88)
2|E| H(Z|Y = j) + H(Y )
(cid:1) − νj

(cid:21)

j=1

2|E| log2

νj
2|E|

νj − gj
2|E|

log2

νj
2|E|

j=1

(7)

(8)

The lemma follows from (8) as G ⊕ e1 and G ⊕ e2 have the same values of νj and gj.
A non-edge e is RE-minimizing if ρP (G ⊕ e) is the smallest among all non-edges. The next lemma
states that  to ﬁnd an RE-minimizing non-edge  an REM deceptor only needs to consider critical
non-edges.
Lemma 3. There exists a critical non-edge {u  v} ∈ Xi × Xj for some i  j that is RE-minimizing.
Proof. Take an RE-minimizing non-edge e1 = {x  y} and say x ∈ Xs  y ∈ Xt. Suppose e1 is not
critical. There are two cases: Firstly  if dx + dy > βs t  let e2 ={u  v} be the critical non-edge with
(u  v) ∈ Xs × Xt and min{du  dv} = δs t ≤ min{dx  dy}. By Lem. 1  H(G ⊕ e2) ≥ H(G ⊕ e1).
Secondly  if dx +dy ≤ βs t  then min{du  dv} < min{dx  dy} for some critical non-edge e2 = {u  v}
between Xs and Xt with the same volume dx +dy. In this case  we still have H(G⊕e2) ≥ H(G⊕e1).
In either case  Lem. 2 asserts that H(G ⊕ e1) − HP (G ⊕ e1) = H(G ⊕ e2) − HP (G ⊕ e2). Thus
by (4)  ρP (G ⊕ e2) ≤ ρP (G ⊕ e1) and e2 is critical.
Theorem 2. Alg.1 implements REM deceptor in O(L|V |).
Proof. The Alg. 1 goes over all s  t∈{1  . . .   L} and critical non-edges e ={u  v} in Xs × Xt to
ﬁnd a critical non-edge {u  v} that minimizes ρP (G ⊕ e). By Lemma 3  {u  v} is RE-minimizing.
For communities Xs and Xt  suppose a data structure is used that assigns to each node x ∈ Xs
and the node x(cid:48) ∈ Xt where no edge exists between x and x(cid:48)  and x(cid:48) is such a node with minimum
degree. To ﬁnd the desired critical edge  the algorithm may scan over all such pairs (x  x(cid:48))  where
x ∈ Xs. This takes O(|Xs|). Similarly  the algorithm examines over all pairs (y  y(cid:48)) where y ∈ Xt
and y(cid:48) ∈ Xs is deﬁned analogously as x(cid:48). This takes O(|Xt|). Hence  for Xs and Xt the algorithm
takes O(|Xs + Xt|). Thus  for any Xs  the algorithm will take O(L|Xs| + |X1| + ··· + |XL|) =
O(L|Xs| + |V |). The overall time takes O(L|X1| + ··· + L|XL| + L|V |) = O(L|V |). The

6

implementation of the required data structure would store for each node x ∈ Xs  collections of nodes
Yd  Yd+1  . . .   Yg ⊂ Xj where Yd contains all nodes y ∈ Xt such that {x  y} is a non-edge and y has
degree d  where d  g are least and greatest integers where Yd  Yg are non-empty. This makes sure that
the data structure can be built and updated in the required time complexity.

In real-world networks  the links between two communities are sparse and usually vertices with
the smallest degree in each community are not linked. In this case  any critical non-edge {u  v} in
Xs × Xt satisﬁes du = minx∈Xs dx and dv = miny∈Xt dy. The algorithm takes only O(L2) when
the vertices with the smallest degree in each community are given.

4 Experiments
Dataset. We evaluate the performance of our algorithm over 9 real-world networks from [http:
//konect.uni-koblenz.de/]. The networks are chosen from a range of domains  including human
contacts: jazz (Jaz); animal network: dolphin (Dol); communication network: email (Eml)  pretty
good privacy (PGP); infrastructure network: powergrid (Pow); computer network: CAIDA (CAI);
and online networks: Facebook (Fbk)  Brightkite (Bri)  Livemocha (Liv). Due to the limitations
of the efﬁciency of some community detectors F   we do not select a particularly large dataset. In
fact  our REM deceptor can handle large datasets according to the complexity analysis in Theorem 2.
To validate the efﬁciency of REM  we list the running time of applying Alg. 1 for one edge. This
is compared with a ‘crude’ implementation of REM deceptor which resembles Alg. 1  instead of
examining only the critical non-edges  goes over all non-edges in G to look for the RE-minimizing
one3. See details in Table 1.

Table 1: Speciﬁcs of the datasets   the number of communities and running time.

Dataset
Dol
Jaz
Eml
Fbk
Pow
PGP
CAI
Bri
Liv

|V |
62
198
1 133
2 888
4 941
10 680
26 475
58 228
104 103

|E|
159
2 741
5 451
2 981
6 594
24 316
53 381
214 078
2 193 083

btw
4
12
11
8
45
-
-
-
-

Number of communities
spi
gre
5
4
4
4
13
16
8
11
25
43
25
189
-
44
-
1682
189
-

inf
5
7
70
11
486
1066
1382
4813

lou
5
4
10
8
43
96
38
687
14

-

wal
4
11
49
6
364
1574
667
6892

-

‘crude’ (ms)

REM (ms)

13.7
74.2
3960
26  300
66  300
5mins
4hrs
5.5hrs
> 1day

0.305
0.296
2.40
5.67
8.67
29.8
28.6
1010
179

Community detectors. An adversary attacks by applying a community detector F . For this we use
six well-known algorithms [11]: (cid:66) Edge-Betweeness(btw) is a hierarchical decomposition process
where edges are removed in decreasing order of their edge betweenness scores and runs in O(|E|2|V |).
(cid:66) Greedy(gre) is a greedy modularity maximization strategy and runs in O(|V | log2 |V |). (cid:66) In-
foMap(inf) detects communities that have the shortest description length for a random walk in O(|E|).
(cid:66) Louvain(lou) is a multi-level modularity optimization algorithm which runs in O(|V | log |V |). (cid:66)
SpinGlass(spi) ﬁnds communities by searching for the ground state of an inﬁnite spin glass and runs
in O(|V |3). (cid:66) WalkTrap(wal) detects communities using random walks and runs in O(|V |2 log |V |).
Table 1 shows the number of communities found by each algorithm. If the algorithm does not
terminate in 2 hours on a dataset  a ‘-’ is written in the table.
Community structure deceptors. We compare REM with two other CS deceptors  including MOM
and a benchmark RAN that adds randomly chosen non-edges. The experiments aim to: (1) check
if the normalized residual entropy correlates with the indices J  D  R (in Sec. 2); (2) compare the
effectiveness of the deceptors in hiding community structures; (3) discuss the preservation of data’s
key indicators after applying REM. To this end  we ran the experiments in the worst-case scenario
that the initial community structure P is fully detected by community detector F . We then apply
the deceptors MOM  REM and RAN to obfuscate the network G and apply F on the obfuscated

3Trials are conducted on a Server Xeon(skylake) platnum 8163 cpu 2.5GHz (12 cores  non-parallel computing)

and 16GBs RAM

7

network G ⊕ E(cid:48). The indices {J  D  R} are calculated for P and the new structure P(cid:48)  where
P(cid:48) = F (G ⊕ E(cid:48)). Each value in the ﬁgures and tables is the average of 30 runs.

Figure 1: The trend of J  D and R with the community normalized residual entropy in our datasets.

Table 2: The J  D and R indices based on different deceptors for 6 kinds of community detectors.

Figure 2: Compare the deception effect of REM  MOM and RAN for dataset Eml.

Result set 1. Fig. 1 plots the the values of scores J  D  R (for communities detected by Louvain) as
the normalized residual entropy increases. The three scores unanimously increase with ρP  validating
our intuition that ρP can be used to obfuscate P. Moreover  the correlations are almost linear for
Fbk  Pow and PGP.

Result set 2. We then examine the performance of the three deceptors over 9 data sets when adding
a budget k edges. Due to varying graph sizes  we set k = 20 for Dol; k = 1000 for Jaz  Eml  Fbk 

8

Pow; k = 2000 for PGP; k = 10000 for CAI  Bri; and k = 20000 for Liv. Table 2 compares the
J  D  R scores for different algorithms. Clearly  REM performs better than MOM and RAN in almost
all scenarios. For Louvain & SpinGlass  REM gives the unanimous best results across all datasets
and scores. The recall R for most cases are less than or close to 0.5 for REM which is not true
for the other two deceptors. On the other hand  with a small budget percentage k/|E| for larger
graphs  REM can achieve better community deception  which means that the advantage of REM
becomes more prominent for larger graphs. Fig. 2 shows the trend of J  D  R scores as the number of
added edges increases for 6 community detectors over the data set Eml. Among the three deceptors
{MOM  REM  RAN}  MOM has the worst performance. The only case that MOM performs better
is for the detector gre  which is based on a greedy modularity maximization strategy. Overall 
REM achieves the best anonymity in all the six detectors. In particular  under the three algorithms
{inf lou spi}  the J  D  R scores consistently decrease. These results validate REM’s effectiveness in
hiding community structures.

Result set 3. Finally  we check the preservation of the data after applying REM. First  by imple-
menting the REM algorithm  we reduce the Jaccard index to below 0.5 for CSD. We then check the
changes of some key indicators  i.e.  clustering coefﬁcient (CC)  mean shortest path length (MSPL) 
and the percentage of nodes with the top-10% Pagerank and Betweenness after applying REM. As
shown in Table 3  these indicators has no signiﬁcant change due to applying REM. In general  a
larger network leads to less change. Among them  for Fbk  10%-PageRank and 10%-betweenness
change greatly. This is because the vertices in this data set tend to have very similar PageRank
and betweenness scores; Since Pow represents a large-scale power grid  it naturally has a large
mean shortest path length. This value will shift greatly when more links are created between the
communities.

Table 3: The changes of some key indicators after applying REM.

Data
Dol
Jaz
Eml
Fbk
Pow
PGP
CAI
Bri

|E(cid:48)|
10
250
100
550
200
400
1000
1000

Jaccard
1 → 0.44
1 → 0.48
1 → 0.39
1 → 0.48
1 → 0.49
1 → 0.45
1 → 0.49
1 → 0.44

CC

0.308 → 0.298
0.520 → 0.498
0.166 → 0.166
0.0004 → 0.0004
0.103 → 0.101
0.378 → 0.377
0.007 → 0.007
0.111 → 0.111

MSPL

3.357 → 2.996
2.230 → 2.070
3.606 → 3.577
3.867 → 3.539
18.99 → 13.70
7.485 → 7.279
3.875 → 3.869
4.858 → 4.854

10%− Pagerank

1 → 0.833
1 → 0.895
1 → 0.991
1 → 0.243
1 → 0.953
1 → 0.979
1 → 0.983
1 → 0.993

10%− Betweenness

1 → 0.833
1 → 0.842
1 → 0.982
1 → 0.118
1 → 0.644
1 → 0.930
1 → 0.977
1 → 0.971

5 Conclusions and Future Work

In this paper  we introduce the community structure deception (CSD) problem  utilize community
based structural entropy to the CSD problem  and propose a residual minimization (REM) algorithm.
We reduce search space to critical edges to optimize REM  which allows our community structure
deceptor to run very efﬁciently. Experiments show that our algorithm REM performs better than
RAN and MOM in almost all attack scenarios.
Some potential directions of future work include (1) extending the method to hide communities
in weighted and directed graphs; (2) investigating the problem of hiding overlapping community
structures; (3) hiding other structural properties  e.g.  inﬂuential nodes  hierarchies  etc. and (4)
explore the connection between structural entropy and community detection.

Acknowledgments

This work is supported by Provincial Key Research and Development Program of Zhejiang (Grant No.
2019C03133) and Major Scientiﬁc Research Project of Zhejiang Lab (Grant No. 2018FD0ZX01). The
co-authors Angsheng Li and Jiamou Liu are supported by the National Natural Science Foundation
of China (No. 61932002). We also thank our anonymous reviewers for their constructive comments.

9

References
[1] Kartik Anand and Ginestra Bianconi. Entropy measures for networks: Toward an information

theory of complex topologies. Phys. Rev. E  80(4):045102  2009.

[2] Lars Backstrom  Cynthia Dwork  and Jon Kleinberg. Wherefore art thou r3579x?: anonymized
social networks  hidden patterns  and structural steganography. In WWW  pages 181–190  2007.

[3] Vincent D Blondel  Jean-Loup Guillaume  Renaud Lambiotte  and Etienne Lefebvre. Fast

unfolding of communities in large networks. J. Stat. Mech.  2008(10):P10008  2008.

[4] Samuel L Braunstein  Sibasish Ghosh  and Simone Severini. The laplacian of a graph as a density
matrix: a basic combinatorial approach to separability of mixed states. Ann. Combinatorics 
10(3):291–317  2006.

[5] Alina Campan and Traian Marius Truta. Data and structural k-anonymity in social networks. In

PinKDD2009  pages 33–54. Springer  2009.

[6] Thomas M Cover and Joy A Thomas. Elements of information theory. John Wiley & Sons 

2012.

[7] Sudipto Das  Ömer E˘gecio˘glu  and Amr El Abbadi. Anonymizing weighted social network

graphs. In ICDE2010  pages 904–907. IEEE  2010.

[8] Matthias Dehmer. Information processing in complex networks: Graph entropy and information

functionals. Appl. Math. Comput.  201(1-2):82–94  2008.

[9] Lucile Denœud and Alain Guénoche. Comparison of distance indices between partitions. In

Data Science and Classiﬁcation  pages 21–28. Springer  2006.

[10] Valeria Fionda and Giuseppe Pirro. Community deception or: How to stop fearing community

detection algorithms. IEEE Trans. Knowl. Data Eng.  30(4):660–673  2018.

[11] Santo Fortunato. Community detection in graphs. Phys. Rep.  486(3-5):75–174  2010.

[12] Roger Guimera  Marta Sales-Pardo  and Luís A Nunes Amaral. Modularity from ﬂuctuations in

random graphs and complex networks. Phys. Rev. E  70(2):025101  2004.

[13] Michael Hay  Gerome Miklau  David Jensen  Don Towsley  and Philipp Weis. Resisting

structural re-identiﬁcation in anonymized social networks. VLDB2008  1(1):102–114  2008.

[14] Tarald O Kvalseth. Entropy and correlation: Some comments. IEEE Trans. Syst. Man Cybern. 

17(3):517–519  1987.

[15] Angsheng Li  Qifu Hu  Jun Liu  and Yicheng Pan. Resistance and security index of networks:

Structural information perspective of network security. Scientiﬁc reports  6:26810  2016.

[16] Angsheng Li  Jiankou Li  and Yicheng Pan. Discovering natural communities in networks.

Physica A: Statistical Mechanics and its Applications  436:878–896  2015.

[17] Angsheng Li and Yicheng Pan. Structural information and dynamical complexity of networks.

IEEE Trans. Inf. Theory  62(6):3290–3339  2016.

[18] Kun Liu and Evimaria Terzi. Towards identity anonymization on graphs. In SIGMOD2008 

pages 93–106. ACM  2008.

[19] Lian Liu  Jie Wang  Jinze Liu  and Jun Zhang. Privacy preservation in social networks with

sensitive edge weights. In SDM  pages 954–965  2009.

[20] Shishir Nagaraja. The impact of unlinkability on adversarial community detection: effects and

countermeasures. In PETS  pages 253–272  2010.

[21] Arvind Narayanan and Vitaly Shmatikov. De-anonymizing social networks. In IEEE Security

& Privacy’09  pages 173–187. IEEE  2009.

10

[22] Mark EJ Newman and Michelle Girvan. Finding and evaluating community structure in

networks. Phys. Rev. E  69(2):026113  2004.

[23] Yulong Pei  Nilanjan Chakraborty  and Katia Sycara. Nonnegative matrix tri-factorization
with graph regularization for community detection in social networks. In IJCAI2015  pages
2083–2089. AAAI Press  2015.

[24] Nicolas Rashevsky. Life  information theory  and topology. Bull. Math. Biophys.  17(3):229–235 

1955.

[25] Cazabet Remy  Baccour Rym  and Latapy Matthieu. Tracking bitcoin users activity using
community detection on a network of weak signals. In International conference on complex
networks and their applications  pages 166–177. Springer  2017.

[26] Martin Rosvall and Carl T Bergstrom. Maps of random walks on complex networks reveal

community structure. Proc. Natl. Acad. Sci. USA  105(4):1118–1123  2008.

[27] Nguyen Xuan Vinh  Julien Epps  and James Bailey. Information theoretic measures for cluster-
ings comparison: Variants  properties  normalization and correction for chance. J. Mach. Learn
Res.  11(Oct):2837–2854  2010.

[28] Marcin Waniek  Tomasz P Michalak  Michael J Wooldridge  and Talal Rahwan. Hiding
individuals and communities in a social network. Nature Human Behaviour  2(2):139  2018.

[29] Gilbert Wondracek  Thorsten Holz  Engin Kirda  and Christopher Kruegel. A practical attack to
de-anonymize social network users. In 2010 IEEE Symposium on Security and Privacy  pages
223–238. IEEE  2010.

[30] Elena Zheleva and Lise Getoor. Preserving the privacy of sensitive relationships in graph data.

In PinKDD2008  pages 153–171. Springer  2008.

[31] Elena Zheleva  Evimaria Terzi  and Lise Getoor. Privacy in social networks. Synth. Lect. Data

Mining Knowl. Discovery  3(1):1–85  2012.

[32] Bin Zhou and Jian Pei. The k-anonymity and l-diversity approaches for privacy preservation in

social networks against neighborhood attacks. Knowl. Inf. Syst.  28(1):47–77  2011.

[33] Lei Zou  Lei Chen  and M Tamer Özsu. K-automorphism: A general framework for privacy

preserving network publication. PVLDB  2(1):946–957  2009.

11

,Yiwei Liu
Jiamou Liu
Zijian Zhang
Liehuang Zhu
Angsheng Li