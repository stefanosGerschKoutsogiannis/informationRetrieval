2013,Adaptive Market Making via Online Learning,We consider the design of strategies for \emph{market making} in a market like a stock  commodity  or currency exchange. In order to obtain profit guarantees for a market maker one typically requires very particular stochastic assumptions on the sequence of price fluctuations of the asset in question. We propose a class of spread-based market making strategies whose performance can be controlled even under worst-case (adversarial) settings. We prove structural properties of these strategies which allows us to design a master algorithm which obtains low regret relative to the best such strategy in hindsight. We run a set of experiments showing favorable performance on real-world price data.,Adaptive Market Making via Online Learning

Jacob Abernethy⇤

Computer Science and Engineering

University of Michigan

jabernet@umich.edu

Satyen Kale

IBM T. J. Watson Research Center

sckale@us.ibm.com

Abstract

We consider the design of strategies for market making in an exchange. A market
maker generally seeks to proﬁt from the difference between the buy and sell price
of an asset  yet the market maker also takes exposure risk in the event of large price
movements. Proﬁt guarantees for market making strategies have typically required
certain stochastic assumptions on the price ﬂuctuations of the asset in question;
for example  assuming a model in which the price process is mean reverting. We
propose a class of “spread-based” market making strategies whose performance
can be controlled even under worst-case (adversarial) settings. We prove structural
properties of these strategies which allows us to design a master algorithm which
obtains low regret relative to the best such strategy in hindsight. We run a set of
experiments showing favorable performance on recent real-world stock price data.

1

Introduction

When a trader enters a market  say a stock or commodity market  with the desire to buy or sell a
certain quantity of an asset  how is this trader guaranteed to ﬁnd a counterparty to agree to transact
at a reasonable price? This is not a problem in a liquid market  with a deep pool of traders ready to
buy or sell at any time  but in a thin market the lack of counterparties can be troublesome. A rushed
trader may even be willing to transact at a worse price in exchange for immediate execution.
This is where a market maker (MM) can be quite useful. A MM is any agent that participates in a
market by offering to both buy and sell the underlying asset at any time. To put it simply  a MM
consistently guarantees liquidity to the marketplace by promising to be a counterparty to any trader.
The act of market making has both potential beneﬁts and risks. For one  the MM bears the risk
of transacting with better-informed traders that may know much more about the movement of the
asset’s price  and in such scenarios the MM can take on a large inventory of shares that it may have
to ofﬂoad at a worse price. On the positive side  the MM can proﬁt as a result of the bid-ask spread 
the difference between the MM’s buy price and sell price. In other words  if the MM buys 100 shares
of a stock from one trader at a price of p  and then immediately sells 100 shares of stock to another
trader at a price of p +   the MM records a proﬁt of 100.
This describes the central goal of a proﬁtable market making strategy: minimize the inventory risk
of large movements in the price while simultaneously aiming to beneﬁt from the bid-ask spread.
The MM strategy has a state  which is the current inventory or holdings  receives as input order and
price data  and must decide what quantities and at what prices to offer in the market. In the present
paper we assume that the MM interacts with a continuous double auction via an order book  and the
MM can place both market and limit orders to the order book.
A number of MM strategies have been proposed  and in many cases certain proﬁt/loss guarantees
have been given. But to the best of our knowledge all such guarantees (aside from [4]) have required
⇤Work performed while the author was in the CIS Department at the University of Pennsylvania and funded

by a Simons Postdoctoral Fellowship

1

stochastic assumptions on the traders or the sequence of price ﬂuctuations. Often  e.g.  one needs to
assume that the underlying price process exhibits a mean reverting behavior to guarantee proﬁt.
In this paper we focus on constructing MM strategies that achieve non-stochastic guarantees on
proﬁt and loss. We begin by proposing a class of market making strategies  parameterized by the
choice of bid-ask spread and liquidity  and we establish a data-dependent expression for the proﬁt
and loss of each strategy at the end of a sequence of price ﬂuctuations. The model we consider  as
well as the aforementioned class of strategies  builds off of the work of Chakraborty and Kearns [4].
In particular  we assume the MM is given an exogenously-speciﬁed price time series that is revealed
online. We also assume that the MM is able to make and cancel orders after every price ﬂuctuation.
We extend the prior work [4] by considering the problem of online learning among this parameter-
ized class of strategies. Performance is measured in terms of regret  which is the difference between
the total value of the learner’s algorithm and that of the best strategy in hindsight. While this prob-
lem is related to the problem of learning from expert advice  standard algorithms assume that the
experts have no state; i.e. in each round  the cost of following any given expert’s advice is the same
as the cost to that expert. This is not the case for online learning of the bid-ask spread  where the
state  represented by the inventory of each strategy  affects the payoffs. We can prove however that
due to the combinatorial structure of these strategies  one can afford to switch state with bounded
cost. Using these structural properties we prove the following main result of this paper:

Theorem 1 There is an online learning algorithm  that  under a bounded price volatility assumption
(see Deﬁntion 1) has O(pT ) regret after T trading periods to the best spread-based strategy.
Experimental simulations of our online learning algorithms with real-world price data suggest that
this approach is quite promising; our algorithm frequently performs nearly as well as the best strat-
egy  and is often superior. Such empirical results provides some evidence that regret minimization
techniques are well-suited for adaptively setting the bid-ask spread.

Related Work Perhaps the most popular model to study market making has been the Glosten-
Milgrom model [11]. In this setting the market is facilitated by a specialist  a monopolistic market
maker that acts as the middle man for all trades. There has been some work in the Computer Science
literature that has considered the sequential decision problem of the specialist [8  10]  and this work
was extended to look at the more modern order book mechanism [9]. In our model traders interact
directly with an order book  not via a specialist  and the prices are set exogenously as in [4].
Over the past ten years that has been a burst of research within the AI and EconCS community on
the design of prediction markets in which traders can bet on the likelihood of future uncertain events
(like horse races  or elections). Much of this started with a couple of key results of Robin Hanson
[12  13] who described how to design subsidized prediction markets via the use of proper scoring
rules. The key technique was a method to design an automated market maker  and there has been
much work on facilitating this using mechanisms based on shares (i.e. Arrow-Debreu securities).
There is a medium-sized literature on this topic by now [6  5  1  2] and we mention only a selection.
The key difference between the present paper and the work on designing prediction markets is that
our techniques are solely focused on proﬁt and risk  and not on other issues like price discovery or
information aggregation. Recent work by Della Penna and Reid [19] considered market making as
a the multi-armed bandit problem  and this is a notable exception where proﬁt was the focus.
This “non-stochastic” approach we take to the market making problem echos many of the ideas
of Cover’s results on Universal Portfolio algorithms [20]  an area that has received much followup
work [16  15  14  3  7] given its robustness to adversarially-chosen price ﬂuctuations. But these
algorithms are of the “market taking” variety  that is they actively rebalance their portfolio on a
daily basis. Moreover  the goal of the Universal Portfolio is to get low regret with respect to the best
ﬁxed mixture of investments  rather than the best bid-ask spread which is aim of the present work.

2 The Market Execution Framework

We now present our market model formally. We will consider the buying and selling of a single
security  say the stock of Microsoft  over the course of some time interval. We assume that all
events in the market take place at discrete points in time throughout this day. At each time period t a

2

market price pt is announced to the world. In a typical stock exchange this price will be rounded to a
discrete value; historically stock prices were quoted in 1
8’s of a dollar  although now they are quoted
in pennies. We let  be the discretization parameter of the exchange  and for simplicity assume
 = 1/m for some positive integer m. Now let ⇧ be the set of discrete prices within some feasible
range  ⇧:= {  2  3  . . .   ( M
  1)  M}  where M is some reasonable bound on the largest price.
A trading strategy maintains two state variables at the beginning of every time period t: (a) the
holdings or inventory Ht 2 R  representing the amount of stock that the strategy is long or short
at the beginning of time period t (Ht will be negative if the strategy is short); (b) the cash Ct 2 R
of the strategy  representing the money earned or lost by the investor at that time. Initially we have
C1 = H1 = 0. Note that when Ct < 0 this is not necessarily bad  it simply means the investor has
borrowed money to purchase holdings  often referred to as “trading on margin”.
Let us now consider the trading mechanism at time t. For simplicity we assume there are two types
of trades that can be executed  and each will change the cash and holdings at the following time
period. By default  set Ht+1 Ht and Ct+1 Ct. Then the trading strategy can execute any
subset of the following two actions:

• Market Order: At time t the posted price is pt and the trader executes a trade of X shares 
with X 2 R. In this case we update the cash as Ct+1 Ct+1  ptX and Ht+1 
Ht+1 + X. Note that if X < 0 then this is a short sale in which case the trader’s cash
increases1

• Limit Order: Before time period t  the trader submits a demand schedule Lt :⇧ ! R+ 
where it is assumed that Lt(pt1) = 0. For every price p 2 ⇧ with p < pt1  the value
Lt(p) is the number of shares the trader would like to buy at a price of p. For every p > pt1
the value Lt(p) is the number of shares the trader would like to sell at a price of p. One
should interpret a limit order in terms of “posting shares to the order book”: these shares
are up for sale (and/or purchase) but the order will only be executed if the price moves.
In round t the posted price becomes pt and it is assumed that all shares offered at any price
between pt1 and pt are transacted. More speciﬁcally  we have two cases:

– If pt > pt1 then for each p 2 ⇧ with pt1 < p  pt we update Ct+1 Ct+1 +
– Else if pt < pt1 then for each p 2 ⇧ with pt  p < pt1 we update Ct+1 

pLt(p) and Ht+1 Ht+1  Lt(p);
Ct+1  pLt(p) and Ht+1 Ht+1 + Lt(p).

It is worth noting market orders are quite different from limit orders. A limit order is a passive action
in the market  the trader simply states that he would be willing to trade a number of shares at a range
of different prices. But if the market does not move then no transactions occur. The market order is a
much more direct action to take  the transaction is guaranteed to execute at the current market price.
The market order has the downside that the trader does not get to specify the price at which he would
like to trade  contrary to the limit order. Roughly speaking  an MM strategy will generally interact
with the market via limit orders  since the MM is simply hoping to proﬁt from liquidity provision.
But the MM may at times have to place market orders to balance inventory to control risk.
We include one more piece of notation  the value of the strategy’s portfolio Vt+1 at the end of time
period t  which can be deﬁned explicitly in terms of the cash  holdings  and current market price:
Vt+1 := Ct+1 + ptHt+1. In other words  Vt+1 is the amount of cash the strategy would have if it
liquidated all holdings at the current market price.

In the described framework we make several simplifying assumptions

Assumptions of our model.
on the trading execution mechanism  which we note here.
(1) The trader pays neither transaction fees nor borrowing costs when his cash balance is negative.
(2) Market orders are executed at exactly the posted market price  without “slippage” of any kind.
This suggests that the market is very liquid relative to the actions of the MM.
(3) The market allows the buying and selling of fractional shares.

1Technically speaking  a brokerage ﬁrm won’t give the short-seller the cash to spend since this money will
be used to backup losses when the short position is closed. But for the purpose of accounting it is perfectly
reasonably to record cash in this way  assuming that the strategy ends up holdings at 0.

3

(4) The price sequence is “exogenously” determined  meaning that the trades we make do not affect
the current and future prices. This assumption has been made in previous results [4] and it is perhaps
quite strong  especially if the MM is providing the bulk of the liquidity. We leave it for future work
to consider the setting with a non-exogenous price process.
(5) Unexecuted limited orders are cancelled before the next period. That is  for any p not lying
between pt1 to pt it is assumed that the Lt(p) untransacted shares at price p are removed from the
order book. This is just notational convenience: the MM can resubmit these shares via Lt+1.

3 Spread-based Strategies

In this section we present a class of simple market making strategies which we refer to as spread-
based strategies since they maintain a ﬁxed bid-ask spread throughout. We then prove some struc-
tural properties on this class of strategies. We only give proof sketches for lack of space; all proofs
can be found in an appendix in the supplementary material.

3.1 Spread-based strategies.
We consider market making strategies parameterized by a window size b 2{   2  . . .   B}  where
B is a multiple of . Before round t  the strategy S(b) selects a window of size b  viz. [at  at + b] 
starting with a1 = p1. For some ﬁxed liquidity density parameter ↵  it submits a buy order of ↵
shares at every price p 2 ⇧ such that p < at and a sell order ↵ shares at every price p 2 ⇧ such that
p > at + b. Depending on the price in the trading period pt  the strategy adjusts the next window by
the smallest amount necessary to include pt.

Algorithm 1 Spread-Based Strategy S(b)
1: Receive parameters b > 0  liquidity density ↵> 0  inital price p1 as input. Initialize a1 := p1.
2: for t = 1  2  . . .   T do
3:
4:
5:
6:
7:
8: end for

Observe market price pt
If pt < at then at+1 pt
Else If pt > at + b then at+1 pt  b
Else at+1 at
Submit limit order Lt+1: Lt+1(p) = 0 if p 2 [at+1  at+1 + b]  else Lt+1(p) = ↵.

The intuition behind a spread-based strategy is that the MM waits for the price to deviate in such a
way that it leaves the window [at  at + b]. Let’s say the price suddenly drops below at and we get
pt = atk for some positive integer k such that k < b. As soon as this happens some transactions
occur and the MM now has holdings of k↵ shares. That is  the MM will have purchased ↵ shares at
each of the prices at    at  2  . . .   at  k. On the following round the MM updates his limit
order Lt+1 to offer to sell ↵ shares at each of the price levels at + b (k 1)  at + b (k 2)  . . ..
This gives a natural matching between shares that were bought and shares that are offered for sale 
with the sale price being exactly b higher than the purchased price. If  at a later time t0 > t  the price
rises so that pt0  at + b +  then all shares bought previously are sold at a proﬁt of kb↵.
We now give a very useful lemma  that essentially shows that we can calculate the proﬁt and loss
of a spread-based strategy on two factors: (a) how much the spread window moves throughout the
trading period  and (b) how far away the ﬁnal price is from the initial price. A sketch of the proof is
provided  but the complete version is in the Appendix.

Lemma 1 The value of the portfolio of S(b) at time T can be bounded as

VT +1 

b

2|at+1  at| (|aT +1  a1| + b)2!

↵

 TXt=1

PROOF:[Sketch] The proof of this lemma is quite similar to the proof of Theorem 2.1 in [4]. The
main idea is given in the intuitive explanation above: we can match pairs of shares that are bought

4

and sold at prices that are b apart  thus registering a proﬁt of b for each such pair. We can relate
these matched pairs to the at’s  and the unmatched stock transactions to the difference |aT +1  a1| 
yielding the stated bound. 2
In other words  the risk taken by all strategies is roughly the same ( 1
2|pT +1  p1|2 up to an addi-
tive constant in the quadratic term). But the revenue of the spread-based strategy scales with two
quantities: the size of the window b but also the total movement of the window. This raises an in-
teresting tradeoff in setting the b parameter  since we would like to make as much as possible on the
movement of the window  but by increasing b the window will get “pushed around” a lot less by the
ﬂuctuating price.
We now make some convenient normalization. Since for every unit price change  the strategies trade
↵/ shares  in the rest of the paper  without loss of generality  we may assume that ↵ = 1 and  = 1
(by appropriately changing the unit of currency). The regret bounds for general ↵ and  scale up by
a factor of ↵
 .

3.2 Structural properties of spread-based strategies.

It is useful to prove certain properties about the proposed spread-based strategies.

Lemma 2 Consider any two strategies S(b) and S(b0) with b0 < b. Let [a0t  a0t + b0] and [at  at + b]
denote the intervals chosen by S(b) and S(b0) at time t respectively. Then for all t  we have [a0t  a0t +
b0] ⇢ [at  at + b].
PROOF:[Sketch] This is easy to prove by induction on t  via a simple case analysis on where pt lies
in relation to the windows [a0t  a0t + b0] and [at  at + b]. 2
Lemma 3 For any strategy S(b)  its inventory at time t  Ht  equals a1  at.
PROOF:[Sketch] Again using case analysis on where pt lies in relation to the window [at  at + b] 
we can show that Ht + at is an invariant. Thus  Ht + at = H1 + a1 = a1  and hence Ht = a1  at.
2
The following corollary follows easily:

Corollary 1 For any round t  consider any two strategies S(b) and S(b0) with b0 < b  with invento-
ries Ht and H0t respectively. Then |Ht  H0t| b  b0.
PROOF: By Lemma 3 we have |HtH0t| = |a1a01+a0tat| bb0  since [a01  a01+b0] ⇢ [a1  a1+b]
and by Lemma 2 [a0t  a0t + b0] ⇢ [at  at + b]. 2
Deﬁnition 1 (-bounded volatility) A price sequence p1  p2  . . .   pT is said to have -bounded
volatility if for all t  2  we have |pt  pt1| .
We assume from now that the price sequence has -bounded volatility. Suppose now that we have
a set B of N window sizes b  all bounded by B. In the rest of the paper  all vectors are in RN with
coordinates indexed by b 2B . For every b 2B   at the end of time period t  let its inventory be
Ht+1(b)  cash value be Ct+1(b)  and total value be Vt+1(b). These quantities deﬁne the vectors
Ht+1  Ct+1 and Vt+1. The following lemma shows that the change in the total value of different
strategies in any round is similar.
Lemma 4 Deﬁne G = 2B + 2. In round t  H = minb2B{Ht(b)}. Then for any strategy S(b) 
we have

Thus  for any two window sizes b and b0  we have

|(Vt+1(b)  Vt(b))  (H(pt  pt1))| G.

|(Vt+1(b)  Vt(b))  (Vt+1(b0)  Vt(b0))| 2G.

PROOF:[Sketch] Since |pt  pt1|   each strategy trades at most  shares  at prices between
pt1 and pt. Next  by Corollary 1  for any strategy |Ht(b)  H| B. Using these bounds  and the
deﬁnitions of the total value  some calculations give the stated bounds. 2

5

4 A low regret meta-algorithm

Recall that we have a set B of N window sizes b  all bounded by B. We want to design a low-regret
algorithm that achieves almost as much payoff as that of the best strategy S(b) for b 2B .
Consider the following meta-algorithm. Treat every strategy S(b) as an expert and run a regret min-
imizing algorithm for learning with expert advice (such as Multiplicative Weights [18] or Follow-
The-Perturbed-Leader [17]). The distributions generated by the regret minimizing algorithm are
treated as mixing weights for the different strategies  essentially executing each strategy scaled by
its current weight. In each round  the meta-algorithm restores the inventory of each strategy to the
correct state by additionally buying or selling enough shares so that its inventory is exactly what
it would have been had it run the different strategies with their present weights throughout. The
speciﬁc algorithm is given below.

Algorithm 2 Low regret meta-algorithm
1: Run every strategy S(b) in parallel so that at the end of each time period t  all trades made by
the strategies and the vectors Ht+1  Ct+1 and Vt+1 2 RN can be computed.
2: Start a regret-minimizing algorithm A for learning from expert advice with one expert corre-
sponding to each strategy S(b) for b 2B . Let the distribution over strategies generated by A at
time t be wt.

3: for t = 1  2  . . .   T do
4:

Execute any market orders from the previous period at the current market price pt so that the
inventory now equals Ht · wt. The cash value changes by (Ht · (wt  wt1))pt.
Execute any limit orders from the previous period: a wt weighted combination of the limit
orders of the strategies S(b). The holdings change to Ht+1 · wt  and the cash value changes
by (Ct+1  Ct) · wt.
For each strategy S(b) for b 2B   set its payoff in round t to be Vt+1(b)  Vt(b) and send
these payoffs to A.
Obtain the updated distribution wt+1 from A.
Place a market order to buy Ht+1·(wt+1wt) shares in the next period  and a wt+1 weighted
combination of the limit orders of the strategies S(b).

5:

6:

7:
8:

9: end for

We now prove the following bound on the regret of the algorithm based on the regret of the under-
lying algorithm A. Recall from Lemma 4 the deﬁnition of G := 2B + 2.
Theorem 2 Assume that the price sequence has -bounded volatity. The regret of the meta-
algorithm is bounded by

G
2

kwt  wt+1k1.

TXt=1
Regret(A) +
PROOF: The regret bound for A implies thatPT
t=1(Vt+1 Vt)· wt  maxb2B VT (b)Regret(A).
Lemma 5 shows that the ﬁnal total value of the meta-algorithm is at leastPT
t=1(Vt+1  Vt) · wt 
2 PT
t=1 kwt  wt+1k1. Thus  the regret of the algorithm is bounded as stated. 2

Lemma 5 In round t  the change in total value of the meta-algorithm equals

G

(Vt+1  Vt) · wt + Ht · (wt  wt1)(pt1  pt).

Furthermore  |Ht · (wt  wt1)(pt1  pt)| G
PROOF:[Sketch] The expression for the change in the total value of the meta-algorithm is a simple
calculation using the deﬁnitions. The second bound is obtained by noting that all the Ht(b)’s are
within B of each other by Corollary 1  and thus |Ht · (wt  wt1)| Bkwt  wt1k1  and
|pt1  pt|  by the bounded volatility assumption. 2

2 kwt  wt+1k1.

6

4.1 A low regret algorithm based on Mutiplicative Weights

Now we give a low regret algorithm based on the classic Multiplicative Weights (MW) algo-
rithm [18]. Call this algorithm MMMW (Market Making using Multiplicative Weights).
The algorithm takes parameters ⌘t  for t = 1  2  . . .   T . It starts by initializing weights w1(b) = 1/N
for every b 2B . In round t  the algorithm updates the weights using the rule
wt+1(b) := wt(b) exp(⌘t(Vt+1(b)  Vt(b)))/Zt 

for every b 2B   where Zt is the normalization constant to make wt+1 a distribution.
Using Theorem 2  we can give the following bound on the regret of MMMW:

Theorem 3 Suppose we set ⌘t = 1

2G min⇢q log(N )

  1  for t = 1  2  . . .   T . Then MMMW has
regret bounded by 13Gplog(N )T .
PROOF:[Sketch] By Theorem 2  we need to bound kwt+1  wtk1. The multiplicative update rule 
wt+1(b) = wt(b) exp(⌘t(Vt+1(b)  Vt(b)))/Zt  and the fact that by Lemma 4  the range of the
entries of Vt+1  Vt is bounded by 2G implies that kwt+1  wtk1  4⌘tG. Standard analysis for
the regret of the MW algorithm then gives the stated regret bound for MMMW. 2

t

4.2 A low regret algorithm based on Follow-The-Perturbed-Leader

Now we give a low regret algorithm based on the Follow-The-Perturbed-Leader (FPL) algo-
rithm [17]. Call this algorithm MMFPL (Market Making using Follow-The-Perturbed-Leader). We
actually use a deterministic version of the algorithm which has the same regret bound.
The algorithm requires a parameter ⌘. For every b 2B   let p(b) be a sample from the exponential
distribution with mean 1/⌘. The distribution wt is then set to be the distribution of the “perturbed
leader”  i.e.

[Vt(b) + p(b)  Vt(b0) + p(b0) 8 b0 2B ].
Using Theorem 2  we can give the following bound on the regret of MMFPL:

wt(b) = Pr
p

2Gq log(N )

Theorem 4 Choose ⌘ = 1

. Then the regret of MMFPL is bounded by 7Gplog(N )T .
PROOF:[Sketch] Again we need to bound kwt+1  wtk1. Kalai and Vempala [17] show that in the
randomized FPL algorithm  probability that the leader changes from round t to t + 1 is bounded by
2⌘G. This implies that kwt+1  wtk1  4⌘G. Standard analysis for the regret of the FPL algorithm
then gives the stated regret bound for MMFPL. 2

T

5 Experiments

We conducted experiments with stock price data obtained from http://www.netfonds.no/.
We downloaded data for the following stocks: MSFT  HPQ and WMT. The data consists of trades
made throughout a given date in chronological order. We obtained data for these stocks for each of
the 5 days in the range May 6-10  2013. The number of trades ranged from roughly 7 000 to 38 000.
The quoted prices are rounded to the nearest cent. Our spread-based strategies operate at the level of
a cent: i.e. the windows are speciﬁed in terms of cents  and the buy/sell orders are set to 1 share per
cent outside the window. The class of spread-based strategies we used in our experiments correspond
to the following set of window sizes  quoted in cents: B = {1  2  3  4  5  10  20  40  80  100}  so that
N = 10 and B = 100.
We implemented MMMW  MMFPL  simple Follow-The-Leader2 (FTL)  and simple uniform av-
eraging over all strategies. We compared their performance to the best strategy in hindsight. For
MMFPL  wt was approximated by averaging 100 independently drawn initial perturbations.

2This algorithm simply chooses the best strategy in each round based on past performance without pertur-

bations.

7

Symbol
HPQ
HPQ
HPQ
HPQ
HPQ
MSFT
MSFT
MSFT
MSFT
MSFT
WMT
WMT
WMT
WMT
WMT

Date

05/06/2013
05/07/2013
05/08/2013
05/09/2013
05/10/2013
05/06/2013
05/07/2013
05/08/2013
05/09/2013
05/10/2013
05/06/2013
05/07/2013
05/08/2013
05/09/2013
05/10/2013

T
7128
13194
12016
14804
14005
29481
34017
38664
34386
27641
8887
11309
12966
10431
9567

Best
668.00
558.00
186.00
1058.00
512.00
1072.00
1260.00
2074.00
1813.00
1236.00
929.00
1333.00
1372.00
2415.00
1150.00

MMMW
370.07
620.18
340.11
890.99
638.53
1062.65
1157.38
2064.83
1802.91
1250.27
694.48
579.88
1300.47
2329.78
1001.31

MMFPL
433.99
-41.54
-568.04
327.05
-446.42
-1547.01
1048.46
1669.30
1534.68
556.08
760.70
995.43
832.80
1882.90

7.03

FTL
638.00
19.00
-242.00
214.00
-554.00
-1300.00
1247.00
2074.00
1811.00
590.00
785.00
918.00
974.00
1991.00
209.00

Uniform
301.10
100.80
-719.80
591.40
345.60
542.60
63.80
939.10
656.10
750.90
235.20
535.40
926.40
1654.10
707.70

Table 1: Final performance of various algorithms in cents. Bolded values indicate best performance.
Italicized values indicate runs where the MMMW algorithm beat the best in hindsight.

Figure 1: Performance of various algorithms and strategies for HPQ on May 8 and 9  2013. For
clarity  the total value every 100 periods is shown. Top row: On May 8  MMMW outperforms the
best strategy  and on May 9 the reverse happens. Bottom row: performance of different strategies.
On May 8  b = 100 performs best  while on May 9  b = 40 performs best.

  1

t

Experimentally  having slightly larger learning rates seemed to help. For MMMW  we used the

Gt  where Gt = max⌧t b b02B |V⌧ (b)  V⌧ (b0)|  and for

speciﬁcation ⌘t = min⇢q log(N )
MMFPL  we used the speciﬁcation ⌘ =q log(N )
through and the regret is bounded by O(pT ) as before.
Table 5 shows the performance of the algorithms in the 15 runs (3 stocks times 5 days). In all the
runs  the MMMW algorithm performed nearly as well as the best strategy  at times even outperform-
ing it. MMFPL didn’t perform as well however. As an illustration of how closely MMMW tracks
the best performance achievable using the spread-based strategies in the class  in Figure 5 we show
the performance of all algorithms for 2 consecutive trading days  May 8 and 9  2013  for the stock
HPQ. We also show the performance of different strategies on these two days - it can be seen that the
best strategy differs  thus motivating the need for an adaptive learning algorithm.

. These speciﬁcations ensures that the theory goes

T

8

References
[1] J. Abernethy  Y. Chen  and J. Wortman Vaughan. An optimization-based framework for auto-
mated market-making. In Proceedings of the 12th ACM Conference on Electronic Commerce 
pages 297–306  2011.

[2] S. Agrawal  E. Delag  M. Peters  Z. Wang  and Y. Ye. A uniﬁed framework for dynamic

prediction market design. Operations research  59(3):550–568  2011.

[3] A. Blum and A. Kalai. Universal portfolios with and without transaction costs. Machine

Learning  35(3):193–205  1999.

[4] T. Chakraborty and M. Kearns. Market making and mean reversion. In Proceedings of the 12th

ACM conference on Electronic commerce  pages 307–314. ACM  2011.

[5] Y. Chen and D. M. Pennock. A utility framework for bounded-loss market makers. In Pro-
ceedings of the 23rd Conference on Uncertainty in Artiﬁcial Intelligence  pages 49–56  2007.
[6] Y. Chen and J. Wortman Vaughan. A new understanding of prediction markets via no-regret
learning. In Proceedings of the 11th ACM Conference on Electronic Commerce  pages 189–
198  2010.

[7] T. M. Cover and E. Ordentlich. Universal portfolios with side information. IEEE Transactions

on Information Theory  42(2):348–363  1996.

[8] S. Das. A learning market-maker in the glosten–milgrom model. Quantitative Finance 

5(2):169–180  2005.

[9] S. Das. The effects of market-making on price dynamics. In Proceedings of the 7th Inter-
national Joint Conference on Autonomous Agents and Multiagent Systems  pages 887–894 
2008.

[10] S. Das and M. Magdon-Ismail. Adapting to a market shock: Optimal sequential market-
In Proceedings of the 21th Annual Conference on Neural Information Processing

making.
Systems  pages 361–368  2008.

[11] L. R. Glosten and P. R. Milgrom. Bid  ask and transaction prices in a specialist market with

heterogeneously informed traders. Journal of ﬁnancial economics  14(1):71–100  1985.

[12] R. Hanson. Combinatorial information market design.

5(1):105–119  2003.

Information Systems Frontiers 

[13] R. Hanson. Logarithmic market scoring rules for modular combinatorial information aggrega-

tion. Journal of Prediction Markets  1(1):3–15  2007.

[14] E. Hazan  A. Kalai  S. Kale  and A. Agarwal. Logarithmic regret algorithms for online convex

optimization. In Learning Theory  pages 499–513. Springer  2006.

[15] D. P. Helmbold  R. E. Schapire  Y. Singer  and M. K. Warmuth. On-line portfolio selection

using multiplicative updates. Mathematical Finance  8(4):325–347  1998.

[16] A. T. Kalai and S. Vempala. Efﬁcient algorithms for universal portfolios. The Journal of

Machine Learning Research  3:423–440  2003.

[17] A. T. Kalai and S. Vempala. Efﬁcient algorithms for online decision problems. J. Comput.

Syst. Sci.  71(3):291–307  2005.

[18] N. Littlestone and M. K. Warmuth. The weighted majority algorithm.

108(2):212–261  1994.

Inf. Comput. 

[19] N. Della Penna and M. D. Reid. Bandit market makers. arXiv preprint arXiv:1112.0076  2011.
[20] T. M. Cover. Universal portfolios. Mathematical Finance  1(1):1–29  January 1991.

9

,Jacob Abernethy
Satyen Kale