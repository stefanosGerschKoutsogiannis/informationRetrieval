2013,Synthesizing Robust Plans under Incomplete Domain Models,Most current planners assume complete domain models and focus on generating correct plans. Unfortunately  domain modeling is a laborious and error-prone task  thus real world agents have to plan with incomplete domain models. While domain experts cannot guarantee completeness  often they are able to circumscribe the incompleteness of the model by providing annotations as to which parts of the domain model may be incomplete. In such cases  the goal should be to synthesize plans that are robust with respect to any known incompleteness of the domain. In this paper  we first introduce annotations expressing the knowledge of the domain incompleteness and formalize the notion of plan robustness with respect to an incomplete domain model. We then show an approach to compiling the problem of finding robust plans to the conformant probabilistic planning problem  and present experimental results with Probabilistic-FF planner.,Synthesizing Robust Plans

under Incomplete Domain Models

Tuan A. Nguyen

Subbarao Kambhampati

Minh Do

Arizona State University

Arizona State University

NASA Ames Research Center

natuan@asu.edu

rao@asu.edu

minh.do@nasa.gov

Abstract

Most current planners assume complete domain models and focus on generating
correct plans. Unfortunately  domain modeling is a laborious and error-prone task 
thus real world agents have to plan with incomplete domain models. While do-
main experts cannot guarantee completeness  often they are able to circumscribe
the incompleteness of the model by providing annotations as to which parts of the
domain model may be incomplete. In such cases  the goal should be to synthesize
plans that are robust with respect to any known incompleteness of the domain. In
this paper  we ﬁrst introduce annotations expressing the knowledge of the domain
incompleteness and formalize the notion of plan robustness with respect to an in-
complete domain model. We then show an approach to compiling the problem of
ﬁnding robust plans to the conformant probabilistic planning problem  and present
experimental results with Probabilistic-FF planner.

1

Introduction

In the past several years  signiﬁcant strides have been made in scaling up plan synthesis techniques.
We now have technology to routinely generate plans with hundreds of actions. All this work  how-
ever  makes a crucial assumption—that the action models of an agent are completely known in
advance. While there are domains where knowledge-engineering such detailed models is necessary
and feasible (e.g.  mission planning domains in NASA and factory-ﬂoor planning)  it is increasingly
recognized (c.f. [13]) that there are also many scenarios where insistence on correct and complete
models renders the current planning technology unusable. The incompleteness in such cases arises
because domain writers do not have the full knowledge of the domain physics. One tempting idea is
to wait until the models become complete  either by manual revision or by machine learning. Alas 
the users often don’t have the luxury of delaying their decision making. For example  although there
exist efforts [1  26] that attempt to either learn models from scratch or revise existing ones  their
operation is contingent on the availability of successful plan traces  or access to execution experi-
ence. There is thus a critical need for planning technology that can get by with partially speciﬁed
domain models  and yet generate plans that are “robust” in the sense that they are likely to execute
successfully in the real world.

This paper addresses the problem of formalizing the notion of plan robustness with respect to an
incomplete domain model  and connects the problem of generating a robust plan under such model
to conformant probabilistic planning [15  11  2  4]. Following Garland & Lesh [7]  we shall assume
that although the domain modelers cannot provide complete models  often they are able to provide
annotations on the partial model circumscribing the places where it is incomplete.In our framework 
these annotations consist of allowing actions to have possible preconditions and effects (in addition
to the standard necessary preconditions and effects).

As an example  consider a variation of the Gripper domain  a well-known planning benchmark
domain. The robot has one gripper that can be used to pick up balls  which are of two types light and
heavy  from one room and move them to another room. The modeler suspects that the gripper may
have an internal problem  but this cannot be conﬁrmed until the robot actually executes the plan. If
it actually has the problem  the execution of the pick-up action succeeds only with balls that are not

1

heavy  but if it has no problem  it can always pickup all types of balls. The modeler can express
this partial knowledge about the domain by annotating the action with a statement representing the
possible precondition that balls should be light.

Incomplete domain models with such possible preconditions and effects implicitly deﬁne an expo-
nential set of complete domain models  with the semantics that the real domain model is guaranteed
to be one of these. The robustness of a plan can now be formalized in terms of the cumulative prob-
ability mass of the complete domain models under which it succeeds. We propose an approach that
compiles the problem of ﬁnding robust plans into the conformant probabilistic planning problem.
We then present empirical results showing interesting relation between aspects such as the amount
domain incompleteness  solving time and plan quality.

2 Problem Formulation
We deﬁne an incomplete domain model eD as eD = hF  Ai  where F = {p1  p2  ...  pm} is a set of

propositions  A is a set of actions a  each might be incompletely speciﬁed. We denote T and F as
the true and false truth values of propositions. A state s ⊆ F is a set of propositions. In addition
to proposition sets that are known as its preconditions P re(a) ⊆ F   add effects Add(a) ⊆ F and
delete effects Del(a) ⊆ F   each action a ∈ A also contains the following annotations:

need as its preconditions.

• Possible precondition set gP re(a) ⊆ F \ P re(a) contains propositions that action a might
• Possible add (delete) effect set gAdd(a) ⊆ F \ Add(a) (gDel(a) ⊆ F \ Del(a)) contains

propositions that the action a might add (delete  respectively) after its execution.

a (p)  wadd

a

(p) and wdel

In addition  each possible precondition  add and delete effect p of the action a is associated with
a weight wpre
a (p) < 1) representing the
domain writer’s assessment of the likelihood that p will actually be realized as a precondition  add
and delete effect of a (respectively) during plan execution. Possible preconditions and effects whose
likelihood of realization is not given are assumed to have weights of 1
2 . Propositions that are not
listed in those “possible lists” of an action are assumed to be not affecting or being affected by the
action.1

a (p) (0 < wpre

a (p)  wadd

(p)  wdel

a

domain models whose actions have all the necessary preconditions  adds and deletes  and a sub-

Given an incomplete domain model eD  we deﬁne its completion set hheDii as the set of complete
set of the possible preconditions  possible adds and possible deletes. Since any subset of gP re(a) 
gAdd(a) and gDel(a) can be realized as preconditions and effects of action a  there are exponen-
tially large number of possible complete domain models Di ∈ hheDii = {D1  D2  ...  D2K }  where
K = Pa∈A(|gP re(a)| + |gAdd(a)| + |gDel(a)|). For each complete model Di  we denote the
corresponding sets of realized preconditions and effects for each action a as P rei(a)  Addi(a)
and Deli(a); equivalently  its complete sets of preconditions and effects are P re(a) ∪ P rei(a) 
Add(a) ∪ Addi(a) and Del(a) ∪ Deli(a).

The projection of a sequence of actions π from an initial state I according to an incomplete domain

model eD is deﬁned in terms of the projections of π from I according to each complete domain model
Di ∈ hheDii:

(1)

γ(π  I  eD) = {γ(π  I  Di) | Di ∈ hheDii}

where the projection over complete models is deﬁned in the usual STRIPS way  with one important
difference. Speciﬁcally  the result of applying an action a  which is complete in Di  in a state s is
deﬁned as followed:

γ(hai  s  Di) = (s \ (Del(a) ∪ Deli(a))) ∪ (Add(a) ∪ Addi(a)) 

if all preconditions of a are satisﬁed in s  and is taken to be s otherwise (rather than as an undeﬁned
state)—in other words  actions in our setting have “soft” preconditions and thus are applicable in any
state. Such a generous execution semantics (GES) is critical from an application point of view: With

1Our incompleteness annotations therefore can also be used to model domains in which the domain writer
can only provide lists of known preconditions/effects of actions  and optionally specifying those known to be
not in the lists.

2

incomplete models  failure of actions should be expected  and the plan needs to be “robustiﬁed”
against them during synthesis. The GES facilitates this by ensuring that the plan as a whole does
not have to fail if an individual action fails (without it  failing actions doom the plan and thus cannot
be supplanted). The resulting state of applying a sequence of complete actions π = ha1  ...  ani in s
with respects to Di is deﬁned as:

γ(π  s  Di) = γ(hani  γ(ha1  ...  an−1i  s  Di)  Di).

propositions that are true in the initial state (and all the remaining are false)  and G is the set of

A planning problem with incomplete domain eD is eP = heD  I  Gi where I ⊆ F is the set of
goal propositions. An action sequence π is considered a valid plan for eP if π solves the problem in
at least one completion of hheDii. Speciﬁcally  ∃Di∈hh eDiiγ(π  I  Di) |= G. Given that hheDii can be

exponentially large in terms of possible preconditions and effects  validity is too weak to guarantee
on the quality of the plan. What we need is a notion that π succeeds in most of the highly likely

completions of eD. We do this in terms of a robustness measure  which will be presented in the next

section.

Modeling assumptions underlying our for-
mulation: From the modeling point of view 
the possible precondition and effect sets can
be modeled at either the grounded action or
action schema level (and thus applicable to
all grounded actions sharing the same action
schema).
From a practical point of view 
however  incompleteness annotations at ground
level hugely increase the burden on domain
writers. In our formal treatment  we therefore
assume that annotations are speciﬁed at the schema level.

Figure 1: Decription of incomplete action schema
pick-up in Gripper domain.

Since possible preconditions and effects can be represented as random variables  they can in prin-
ciple be modeled using graphical models such as Makov Logic Networks and Bayesian Networks
[14]. Though it appears to be an interesting technical challenge  this would require a signiﬁcant
additional knowledge input from the domain writer  and thus less likely to be helpful in practice. We
therefore assume that the possible preconditions and effects are uncorrelated  thus can be realized
independently (both within each action schema and across different ones).

Example: Figure 1 shows the description of incomplete action pick-up(?b - ball ?r - room) as
described above at the schema level. In addition to the possible precondition (light ?b) on the weight
of the ball ?b  we also assume that since the modeler is unsure if the gripper has been cleaned or
not  she models it with a possible add effect (dirty ?b) indicating that the action might make the
ball dirty. Those two possible preconditions and effects can be realized independently  resulting
in four possible candidate complete domains (assuming all other action schemas in the domain are
completely described).

3 A Robustness Measure for Plans
The robustness of a plan π for the problem eP = heD  I  Gi is deﬁned as the cumulative probability
mass of the completions of eD under which π succeeds (in achieving the goals). More formally  let
Pr(Di) be the probability distribution representing the modeler’s estimate of the probability that
a given model in hheDii is the real model of the world (such that PDi∈hh eDii
Pr(Di) = 1). The

robustness of π is deﬁned as follows:

R(π  eP : heD  I  Gi)

def
≡

X

Di∈hh eDii γ(π I Di)|=G

Pr(Di)

(2)

It is easy to see that if R(π  eP) > 0  then π is a valid plan for eP.
Note that given the uncorrelated incompleteness assumption  the probability Pr(Di) for a model
Di ∈ hheDii can be computed as the product of the weights wpre
a (p) for all
a ∈ A and its possible preconditions/effects p if p is realized in the model (or the product of their
“complement” 1 − wpre

(p)  and 1 − wdel

a (p)  wadd

(p)  and wdel

a

a (p)  1 − wadd

a

a (p) if p is not realized).

3

Example: Figure 2 shows an example with an

incomplete domain model eD = hF  Ai with
F = {p1  p2  p3} and A = {a1  a2} and a
solution plan π = ha1  a2i for the problem
eP = heD  I = {p2}  G = {p3}i. The in-
complete model is: P re(a1) = ∅  gP re(a1) =
{p1}  Add(a1) = {p2  p3}  gAdd(a1) = ∅ 
Del(a1) = ∅  gDel(a1) = ∅; P re(a2) = {p2} 
gP re(a2) = ∅  Add(a2) = ∅  gAdd(a2) = {p3} 
Del(a2) = ∅  gDel(a2) = {p1}. Given that

the total number of possible preconditions and
effects is 3  the total number of completions

(|hheDii|) is 23 = 8  for each of which the plan

Figure 2: Example for a set of complete candidate
domain models  and the corresponding plan sta-
tus. Circles with solid and dash boundary respec-
tively are propositions that are known to be T and
might be F when the plan executes (see more in
text).

π may succeed or fail to achieve G  as shown
in the table. In the ﬁfth candidate model  for
instance  p1 and p3 are realized as precondition
and add effect of a1 and a2  whereas p1 is not
a delete effect of action a2. Even though a1
could not execute (and thus p3 remains false in
the second state)  the goal eventually is achieved by action a2 with respects to this candidate model.
Overall  there are two of eight candidate models where π fails and six for which it succeeds. The
robustness value of the plan is R(π) = 3
4 if Pr(Di) is the uniform distribution. However  if the
domain writer thinks that p1 is very likely to be a precondition of a1 and provides wpre
a1 (p1) = 0.9 
the robustness of π decreases to R(π) = 2 × (0.9 × 0.5 × 0.5) + 4 × (0.1 × 0.5 × 0.5) = 0.55 (as
intutively  the last four models with which π succeeds are very unlikely to be the real one). Note that
under the standard non-generous execution semantics (non-GES) where action failure causes plan
failure  the plan π would be mistakenly considered failing to achieve G in the ﬁrst two complete
models  since a2 is prevented from execution.

3.1 A Spectrum of Robust Planning Problems

Given this set up  we can now talk about a spectrum of problems related to planning under incom-
plete domain models:

plan π∗.

Robustness Assessment (RA): Given a plan π for the problem eP  assess the robustness of π.
Maximally Robust Plan Generation (RG∗): Given a problem eP  generate the maximally robust
Generating Plan with Desired Level of Robustness (RGρ): Given a problem eP and a robustness
c ): Given a problem eP and a cost bound c  generate a
Cost-sensitive Robust Plan Generation (RG∗

threshold ρ (0 < ρ ≤ 1)  generate a plan π with robustness greater than or equal to ρ.

plan π of maximal robustness subject to cost bound c (where the cost of a plan π is deﬁned
as the cumulative costs of the actions in π).

Incremental Robustiﬁcation (RIc): Given a plan π for the problem eP  improve the robustness of

π  subject to a cost budget c.

The problem of assessing robustness of plans  RA  can be tackled by compiling it into a weighted
model-counting problem. The following theorem shows that RA with uniform distribution of candi-
date complete models is complete for #P complexity class [22]  and thus the robustness assessment
problem is at least as hard as NP-complete.2
Theorem 1. The problem of assessing plan robustness with the uniform distribution of candidate
complete models is #P -complete.

For plan synthesis problems  we can talk about either generating a maximally robust plan  RG∗  or
ﬁnding a plan with a robustness value above the given threshold  RGρ. A related issue is that of the

2The proof is based on a counting reduction from the problem of counting satisfying assignments for

MONOTONE-2SAT [23]. We omit it due to the space limit.

4

interaction between plan cost and robustness. Often  increasing robustness involves using additional
(or costlier) actions to support the desired goals  and thus comes at the expense of increased plan
cost. We can also talk about cost-constrained robust plan generation problem RG∗
c . Finally  in
practice  we are often interested in increasing the robustness of a given plan (either during iterative
search  or during mixed-initiative planning). We thus also have the incremental variant RIc. In the
next section  we will focus on the problem of synthesizing plans with at least a robustness value ρ.

4 Synthesizing Robust Plans
Given a planning problem eP with an incomplete domain eD  the ultimate goal is to synthesize a plan

having a desired level of robustness  or one with maximal robustness value. In this section  we will
show that the problem of generating plan with at least ρ robustness (0 < ρ ≤ 1)  can be compiled
into an equivalent conformant probabilistic planning problem. The most robust plan can then be
found with a sequence of increasing threshold values.

4.1 Conformant Probabilistic Planning

Following the formalism in [4]  a domain in conformant probabilistic planning (CPP) is a tuple
D′ = hF ′  A′i  where F ′ and A′ are the sets of propositions and probabilistic actions  respectively.
A belief state b : 2F ′
→ [0  1] is a distribution of states s ⊆ F ′ (we denote s ∈ b if b(s) > 0). Each
action a′ ∈ A′ is speciﬁed by a set of preconditions P re(a′) ⊆ F ′ and conditional effects E(a′).
For each e = (cons(e)  O(e)) ∈ E(a′)  cons(e) ⊆ F ′ is the condition set and O(e) determines the
set of outcomes ε = (P r(ε)  add(ε)  del(ε)) that will add and delete proposition sets add(ε)  del(ε)
into and from the resulting state with the probability P r(ε) (0 ≤ P r(ε) ≤ 1   Pε∈O(e) P r(ε) = 1).
All condition sets of the effects in E(a′) are assumed to be mutually exclusive and exhaustive. The
action a′ is applicable in a belief state b if P re(a′) ⊆ s for all s ∈ b  and the probability of a state
s′ in the resulting belief state is ba′ (s′) = Ps⊇P re(a′) b(s)Pε∈O′(e) P r(ε)  where e ∈ E(a′) is
the conditional effect such that cons(e) ⊆ s  and O′(e) ⊆ O(e) is the set of outcomes ε such that
s′ = s ∪ add(ε) \ del(ε).
Given the domain D′  a problem P ′ is a quadruple P ′ = hD′  bI   G′  ρ′i  where bI is an initial
belief state  G′ is a set of goal propositions and ρ′ is the acceptable goal satisfaction probability. A
sequence of actions π′ = (a′
i is applicable in the belief state bi
(assuming b1 ≡ bI )  which results in bi+1 (1 ≤ i ≤ n)  and it achieves all goal propositions with at
least ρ′ probability.

n) is a solution plan for P ′ if a′

1  ...  a′

4.2 Compilation

Given an incomplete domain model eD = hF  Ai and a planning problem eP = heD  I  Gi  we now
describe a compilation that translates the problem of synthesizing a solution plan π for eP such
that R(π  eP) ≥ ρ to a CPP problem P ′. At a high level  the realization of possible preconditions
p ∈ gP re(a) and effects q ∈ gAdd(a)  r ∈ gDel(a) of an action a ∈ A can be understood as
being determined by the truth values of hidden propositions ppre
that are certain
(i.e. unchanged in any world state) but unknown. Speciﬁcally  the applicability of the action in
a state s ⊆ F depends on possible preconditions p that are realized (i.e. ppre
a = T)  and their
truth values in s. Similarly  the values of q and r are affected by a in the resulting state only if
they are realized as add and delete effects of the action (i.e.  qadd
a = T). There are
totally 2| gP re(a)|+| gAdd(a)|+|gDel(a)| realizations of the action a  and all of them should be considered
simultaneously in checking the applicability of the action and in deﬁning corresponding resulting
states.

a = T  rdel

a   qadd

a

and rdel

a

With those observations  we use multiple conditional effects to compile away incomplete knowledge
on preconditions and effects of the action a. Each conditional effect corresponds to one realization of
the action  and can be ﬁred only if p = T whenever ppre
a = T  and adding (removing) an effect q (r)
into (from) the resulting state depending on the values of qadd
a   respectively) in the realization.

(rdel

a

While the partial knowledge can be removed  the hidden propositions introduce uncertainty into
the initial state  and therefore making it a belief state. Since actions are always applicable in our
formulation  resulting in either a new or the same successor state  preconditions P re(a) must be
modeled as conditions of all conditional effects. We are now ready to formally specify the resulting
domain D′ and problem P ′.

5

a

a

a

a

  nrdel

For each action a ∈ A  we introduce new propositions ppre
and their negations nppre
a  
for each p ∈ gP re(a)  q ∈ gAdd(a) and r ∈ gDel(a) to determine whether they are
nqadd
realized as preconditions and effects of a in the real domain.3 Let Fnew be the set of those new
propositions  then F ′ = F ∪ Fnew is the proposition set of D′.
Each action a′ ∈ A′ is made from one action a ∈ A such that P re(a′) = ∅  and E(a′) consists of
2| gP re(a)|+| gAdd(a)|+|gDel(a)| conditional effects e. For each conditional effect e:

a   qadd

  rdel

• cons(e) is the union of the following sets: (i) the certain preconditions P re(a)  (ii) the set
of possible preconditions of a that are realized  and hidden propositions representing their
a |p ∈ gP re(a) \ P re(a)}  (iii) the set of
realization: P re(a) ∪ {ppre
hidden propositions corresponding to the realization of possible add (delete) effects of a:
{qadd
a |r ∈
gDel(a) \ Del(a)}  respectively);

|q ∈ gAdd(a) \ Add(a)} ({rdel

a |p ∈ P re(a)} ∪ {nppre

a |r ∈ Del(a)} ∪ {nrdel

|q ∈ Add(a)} ∪ {nqadd

• the single outcome ε of e is deﬁned as add(ε) = Add(a) ∪ Add(a)  del(ε) = Del(a) ∪

a

a

Del(a)  and P r(ε) = 1 

where P re(a) ⊆ gP re(a)  Add(a) ⊆ gAdd(a) and Del(a) ⊆ gDel(a) represent the sets of realized

preconditions and effects of the action. In other words  we create a conditional effect for each subset
of the union of the possible precondition and effect sets of the action a. Note that the inclusion of new

propositions derived from P re(a)  Add(a)  Del(a) and their “complement” sets gP re(a) \ P re(a) 
gAdd(a) \ Add(a)  gDel(a) \ Del(a) makes all condition sets of the action a′ mutually exclusive.

As for other cases (including those in which some precondition in P re(a) is excluded)  the action
has no effect on the resulting state  they can be ignored. The condition sets  therefore  are also
exhaustive.
The initial belief state bI consists of 2|Fnew| states s′ ⊆ F ′ such that p ∈ s′ iff p ∈ I (∀p ∈ F ) 
each represents a complete domain model Di ∈ hheDii and with the probability Pr(Di)  as deﬁned
in Section 3. The speciﬁcation of bI includes simple Bayesian networks representing the relation
between variables in Fnew  e.g. ppre
a   where the weights w(·) and 1 − w(·) are used
to deﬁne conditional probability tables. The goal is G′ = G  and the acceptable goal satisfaction
probability is ρ′ = ρ. Theorem 2 shows the correctness of our compilation. It also shows that a plan
for eP with at least ρ robustness can be obtained directly from solutions of the compiled problem P ′.
Theorem 2. Given a plan π = (a1  ...  an) for the problem eP  and π′ = (a′
k is the
compiled version of ak (1 ≤ k ≤ n) in P ′. Then R(π  eP) ≥ ρ iff π′ achieves all goals with at least
ρ probability in P ′.

n) where a′

and nppre

1  ...  a′

a

4.3 Experimental Results
In this section  we discuss the results of the compilation with Probabilistic-FF (PFF) on variants of
the Logistics and Satellite domains  where domain incompleteness is modeled on the preconditions
and effects of actions (respectively). Our purpose here is to observe and explain how plan length and
synthesizing time vary with the amount of domain incompleteness and the robustness threshold.4

Logistics: In this domain  each of the two cities C1 and C2 has an airport and a downtown area.
The transportation between the two distant cities can only be done by two airplanes A1 and A2.
In the downtown area of Ci (i ∈ {1  2})  there are three heavy containers Pi1  ...  Pi3 that can be
moved to the airport by a truck Ti. Loading those containers onto the truck in the city Ci  however 
requires moving a team of m robots Ri1  ...  Rim (m ≥ 1)  initially located in the airport  to the
downtown area. The source of incompleteness in this domain comes from the assumption that each
pair of robots R1j and R2j (1 ≤ j ≤ m) are made by the same manufacturer Mj   both therefore
might fail to load a heavy container.5 The actions loading containers onto trucks using robots made

3These propositions are introduced once  and re-used for all actions sharing the same schema with a.
4The experiments were conducted using an Intel Core2 Duo 3.16GHz machine with 4Gb of RAM  and the

time limit is 15 minutes.

5The uncorrelated incompleteness assumption applies for possible preconditions of action schemas speci-
ﬁed for different manufacturers. It should not be confused here that robots R1j and R2j of the same manufac-
turer Mj can independently have fault.

6

by a particular manufacturer (e.g.  the action schema load-truck-with-robots-of-M1 using robots of
manufacturer M1)  therefore  have a possible precondition requiring that containers should not be
heavy. To simplify discussion (see below)  we assume that robots of different manufacturers may
fail to load heavy containers  though independently  with the same probability of 0.7. The goal is
to transport all three containers in the city C1 to C2  and vice versa. For this domain  a plan to
ship a container to another city involves a step of loading it onto the truck  which can be done by a
robot (after moving it from the airport to the downtown). Plans can be made more robust by using
additional robots of different manufacturer after moving them into the downtown areas  with the cost
of increasing plan length.

m = 5

m = 4

⊥
⊥
⊥
⊥
⊥
⊥

ρ
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9

m = 1
32/10.9
32/10.9
32/10.9

m = 2
36/26.2
36/25.9
36/26.2
42/42.1
42/42.0

44/121.8
44/121.8
44/122.2
58/252.8
58/253.1
58/252.8
58/253.1

m = 3
40/57.8
40/57.8
40/57.7
50/107.9
50/107.9
50/108.2

48/245.6
48/245.6
48/245.6
66/551.4
66/551.1
66/551.1
66/551.6
66/550.9

Satellite:
In this domain  there are
two satellites S1 and S2 orbiting the
planet Earth  on each of which there
are m instruments Li1  ...  Lim (i ∈
{1  2}  m ≥ 1) used to take images
of interested modes at some direction
in the space. For each j ∈ {1  ...  m} 
the lenses of instruments Lij ’s were
made from a type of material Mj  
which might have an error affecting
the quality of images that they take.
If the material Mj actually has error 
all instruments Lij ’s produce mangled images. The knowledge of this incompleteness is modeled as
a possible add effect of the action taking images using instruments made from Mj (for instance  the
action schema take-image-with-instruments-M1 using instruments of type M1) with a probability of
pj   asserting that images taken might be in a bad condition. A typical plan to take an image using an
instrument  e.g. L14 of type M4 on the satellite S1  is ﬁrst to switch on L14  turning the satellite S1
to a ground direction from which L14 can be calibrated  and then taking image. Plans can be made
more robust by using additional instruments  which might be on a different satellite  but should be of
different type of materials and can also take an image of the interested mode at the same direction.

Figure 3: The results of generating robust plans in Logistics
domain.

⊥
⊥
⊥
⊥

⊥
⊥
⊥

⊥
⊥

⊥

m = 1
10/0.1
10/0.1

ρ
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9

m = 2
10/0.1
10/0.1
10/0.1
37/17.7

Table 3 and 4 shows respectively the
results in the Logistics and Satellite
domains with ρ ∈ {0.1  0.2  ...  0.9}
and m = {1  2  ...  5}. The num-
ber of complete domain models in
the two domains is 2m. For Satellite
domain  the probabilities pj ’s range
to 0.45 when m
from 0.25  0.3 ...
increases from 1  2  ...
to 5. For
each speciﬁc value of ρ and m  we re-
port l/t where l is the length of plan
and t is the running time (in seconds).
Cases in which no plan is found within the time limit are denoted by “–”  and those where it is prov-
able that no plan with the desired robustness exists are denoted by “⊥”.

Figure 4: The results of generating robust plans in Satellite
domain.

m = 4
10/0.2
10/0.2
10/0.2
10/0.2
37/79.2
37/94.1
53/462.0

m = 3
10/0.2
10/0.1
10/0.1
37/25.1
37/25.5
53/216.7

m = 5
10/0.2
10/0.2
10/0.2
10/0.3

37/199.2
37/216.7

⊥
⊥
⊥
⊥
⊥
⊥
⊥

⊥
⊥
⊥
⊥
⊥

⊥
⊥
⊥

–
–
⊥

⊥
⊥

As the results indicate  for a ﬁxed amount of domain incompleteness (represented by m)  the solution
plans in both domains tend to be longer with higher robustness threshold ρ  and the time to synthesize
plans also increases. For instance  in Logistics with m = 5  the plan returned has 48 actions if
ρ = 0.3  whereas 66-length plan is needed if ρ increases to 0.4. On the other hand  we also note that
more than the needed number of actions have been used in many solution plans. In the Logistics
domain  speciﬁcally  it is easy to see that the probability of successfully loading a container onto
a truck using robots of k (1 ≤ k ≤ m) different manufacturers is (1 − 0.7k). However  robots of
all ﬁve manufacturers are used in a plan when ρ = 0.4  whereas using those of three manufacturers
is enough. The relaxation employed by PFF that ignores all but one condition in effects of actions 
while enables an upper-bound computation for plan robustness  is probably too strong and causes
unnecessary increasing in plan length.

Also as we would expect  when the amount of domain incompleteness (i.e.  m) increases  it takes
longer time to synthesize plans satisfying a ﬁxed robustness value ρ. As an example  in the Satellite
domain  with ρ = 0.6 it takes 216.7 seconds to synthesize a 37-length plan when m = 5  whereas it
is only 94.1 seconds for m = 4. Two exceptions can be seen with ρ = 0.7 where no plan is found

7

within the time limit when m = 5  although a plan with robustness of 0.7075 exists in the solution
space. A probable explanation for this performance is the costly satisﬁability tests and weighted
model-counting for computing resulting belief states during the search.

5 Related Work

There are currently very few research efforts in automated planning literature that explicitly consider
incompletely speciﬁed domain models. To our best knowledge  Garland and Lesh [7] were the ﬁrst
discussing incomplete actions and generating robust plans under incomplete domain models. Their
notion of plan robustness  however  only has tenuous heuristic connections with the likelihood of
successful execution of plans. Weber and Bryce [24] consider a model similar to ours but assume
a non-GES formulation during plan synthesis—the plan fails if any action’s preconditions are not
satisﬁed. As we mention earlier  this semantics is signiﬁcantly less helpful from an application point
of view; and it is arguably easier. Indeed  their method for generating robust plans relies on the
propagation of “reasons” for failure of each action  assuming that every action before it successfully
executes. Such a propagation is no longer appliable for GES. Morwood and Bryce [16] studied the
problem of robustness assessment for the same incompleteness formulation in temporal planning
domains  where plan robustness is deﬁned as the number of complete models under which temporal
constraints are consistent. The work by Fox et al [6] also explores robustness of plans  but their
focus is on temporal plans under unforeseen execution-time variations rather than on incompletely
speciﬁed domains. Eiter et al [5] introduces language K for planning under incomplete knowledge.
Their formulation is however different from ours in the type of incompleteness (world states v.s.
action models) and the notion of plans (secure/conformant plans v.s. robust plans). Our work can
also be categorized as one particular instance of the general model-lite planning problem  as deﬁned
in [13]  in which the author points out a large class of applications where handling incomplete
models is unavoidable due to the difﬁculty in getting a complete model.

As mentioned earlier  there were complementary approaches (c.f. [1  26]) that attempt to either learn
models from scratch or revise existing ones  given the access to successful plan traces or execution
experience  which can then be used to solve new planning problems. These works are different
from ours in both the additional knowledge about the incomplete model (execution experience v.s.
incompleteness annotations)  and the notion of solutions (correct with respect to the learned model
v.s. to candidate complete models).

Though not directly addressing formulation like ours  the work on k-fault plans for non-deterministic
planning [12] focused on reducing the “faults” in plan execution. It is however based on the context
of stochastic/non-deterministic actions rather than incompletely speciﬁed ones. The semantics of
the possible preconditions/effects in our incomplete domain models fundamentally differs from non-
deterministic and stochastic effects (c.f. work by Kushmerick et al [15]). While the probability of
success can be increased by continously executing actions with stochastic effects  the consequence
of unknown but deterministic effects is consistent over different executions.

In Markov Decision Processes (MDPs)  a fairly rich body of work has been done for imprecise tran-
sition probabilities [19  25  8  17  3  21]  using various ways to represent imprecision/incompleteness
in the transition models. These works mainly seek for max-min or min-max optimal policies  assum-
ing that Nature acts optimally against the agent. Much of these work is however done at atomic level
while we focus on factored planning models. Our incompleteness formulation can also be extended
for agent modeling  a topic of interest in multi-agent systems (c.f. [10  9  20  18]).

6 Conclusion and Future Work

In this paper  we motivated the need for synthesizing robust plans under incomplete domain models.
We introduced annotations for expressing domain incompleteness  formalized the notion of plan
robustness  and showed an approach to compile the problem of generating robust plans into confor-
mant probabilistic planning. We presented empirical results showing interesting relation between
aspects such as the amount of domain incompleteness  solving time and plan quality. We are work-
ing on a direct approach reasoning on correctness constraints of plan preﬁxes and partial relaxed
plans  constrasting it with our compilation method. We also plan to take successful plan traces as a
second type of additional inputs for generating robust plans.

Acknowledgements: This research is supported in part by the ARO grant W911NF-13-1-0023 
the ONR grants N00014-13-1-0176  N00014-09-1-0017 and N00014-07-1-1049  and the NSF grant
IIS201330813.

8

References

[1] E. Amir and A. Chang. Learning partially observable deterministic action models. Journal of Artiﬁcial

Intelligence Research  33(1):349–402  2008.

[2] D. Bryce  S. Kambhampati  and D. Smith. Sequential monte carlo in probabilistic planning reachability

heuristics. Proceedings of ICAPS06  2006.

[3] K. Delgado  S. Sanner  and L. De Barros. Efﬁcient solutions to factored mdps with imprecise transition

probabilities. Artiﬁcial Intelligence  2011.

[4] C. Domshlak and J. Hoffmann. Probabilistic planning via heuristic forward search and weighted model

counting. Journal of Artiﬁcial Intelligence Research  30(1):565–620  2007.

[5] T. Eiter  W. Faber  N. Leone  G. Pfeifer  and A. Polleres. Planning under incomplete knowledge. Compu-

tational LogicCL 2000  pages 807–821  2000.

[6] M. Fox  R. Howey  and D. Long. Exploration of the robustness of plans. In Proceedings of the National

Conference on Artiﬁcial Intelligence  volume 21  page 834  2006.

[7] A. Garland and N. Lesh. Plan evaluation with incomplete action descriptions.

In Proceedings of the

National Conference on Artiﬁcial Intelligence  pages 461–467  2002.

[8] R. Givan  S. Leach  and T. Dean. Bounded-parameter markov decision processes. Artiﬁcial Intelligence 

122(1-2):71–109  2000.

[9] P. Gmytrasiewicz and P. Doshi. A framework for sequential planning in multiagent settings. Journal of

Artiﬁcial Intelligence Research  24(1):49–79  2005.

[10] P. Gmytrasiewicz and E. Durfee. Rational coordination in multi-agent environments. Autonomous Agents

and Multi-Agent Systems  3(4):319–350  2000.

[11] N. Hyaﬁl and F. Bacchus. Conformant probabilistic planning via csps. In Proceedings of the Thirteenth

International Conference on Automated Planning and Scheduling  pages 205–214  2003.

[12] R. Jensen  M. Veloso  and R. Bryant. Fault tolerant planning: Toward probabilistic uncertainty models in
symbolic non-deterministic planning. In Proceedings of the 14th International Conference on Automated
Planning and Scheduling (ICAPS)  volume 4  pages 235–344  2004.

[13] S. Kambhampati. Model-lite planning for the web age masses: The challenges of planning with incom-
plete and evolving domain models. In Proceedings of the National Conference on Artiﬁcial Intelligence 
volume 22  page 1601  2007.

[14] D. Koller and N. Friedman. Probabilistic graphical models: principles and techniques. MIT press  2009.

[15] N. Kushmerick  S. Hanks  and D. Weld. An algorithm for probabilistic planning. Artiﬁcial Intelligence 

76(1-2):239–286  1995.

[16] D. Morwood and D. Bryce. Evaluating temporal plans in incomplete domains. In Twenty-Sixth AAAI

Conference on Artiﬁcial Intelligence  2012.

[17] A. Nilim and L. Ghaoui. Robust control of Markov decision processes with uncertain transition matrices.

Operations Research  53(5):780–798  2005.

[18] F. A. Oliehoek. Value-Based Planning for Teams of Agents in Stochastic Partially Observable Environ-

ments. PhD thesis  Informatics Institute  University of Amsterdam  Feb. 2010.

[19] J. Satia and R. Lave Jr. Markovian decision processes with uncertain transition probabilities. Operations

Research  pages 728–740  1973.

[20] S. Seuken and S. Zilberstein. Formal models and algorithms for decentralized decision making under

uncertainty. Autonomous Agents and Multi-Agent Systems  17(2):190–250  2008.

[21] A. Shapiro and A. Kleywegt. Minimax analysis of stochastic problems. Optimization Methods and

Software  17(3):523–542  2002.

[22] L. Valiant. The complexity of computing the permanent. Theoretical computer science  8(2):189–201 

1979.

[23] L. Valiant. The complexity of enumeration and reliability problems. SIAM Journal on Computing 

8(3):410–421  1979.

[24] C. Weber and D. Bryce. Planning and acting in incomplete domains. Proceedings of ICAPS11  2011.

[25] C. White III and H. Eldeib. Markov decision processes with imprecise transition probabilities. Operations

Research  pages 739–749  1994.

[26] Q. Yang  K. Wu  and Y. Jiang. Learning action models from plan examples using weighted max-sat.

Artiﬁcial Intelligence  171(2):107–143  2007.

9

,Tuan Nguyen
Subbarao Kambhampati
Minh Do
Yuqian Zhang
Han-wen Kuo
John Wright